diff --git a/src/components/SyncSidebar.ts b/src/components/SyncSidebar.ts
index 16c5bd6..af5d46a 100644
--- a/src/components/SyncSidebar.ts
+++ b/src/components/SyncSidebar.ts
@@ -68,6 +68,71 @@ export class SyncSidebar extends ItemView {
     await this.renderContent();
   }
 
+  private async renderContent() {
+    const folderState = this.saveFolderState();
+    this.contentContainer.empty();
+
+    // Create a wrapper for the scrollable content
+    const scrollableContent = this.contentContainer.createEl("div", {
+      cls: "scrollable-content",
+    });
+
+    this.updateNoFilesMessageVisibility();
+
+    if (!this.isEmptyContent()) {
+      this.renderRootFolders(scrollableContent);
+    }
+
+    // Render submit button outside the scrollable content
+    this.renderSubmitButton();
+
+    this.applyFolderState(folderState);
+  }
+
+  private renderRootFolders(container: HTMLElement) {
+    const filesToExportFolder = this.createRootFolder(
+      "Files to Export",
+      this.filesToSync[this.currentTab],
+    );
+    const unsyncedFilesFolder = this.createRootFolder(
+      "Unsynced Files",
+      this.files[this.currentTab],
+    );
+
+    container.appendChild(unsyncedFilesFolder);
+    container.appendChild(filesToExportFolder);
+  }
+
+  private createRootFolder(name: string, files: FileNode[]): HTMLElement {
+    const folderEl = createEl("div", { cls: "root-folder" });
+    const folderHeader = folderEl.createEl("div", {
+      cls: "folder-header nav-folder-title is-clickable",
+    });
+
+    const toggleEl = folderHeader.createEl("div", {
+      cls: "tree-item-icon collapse-icon nav-folder-collapse-indicator",
+    });
+    const chevronSvg = this.createChevronSvg();
+    toggleEl.appendChild(chevronSvg);
+
+    folderHeader.createEl("div", {
+      text: name,
+      cls: "tree-item-inner nav-folder-title-content",
+    });
+
+    const contentEl = folderEl.createEl("div", { cls: "nav-folder-children" });
+    this.renderFileNodes(files, contentEl, name === "Unsynced Files", 0);
+
+    let isExpanded = true;
+    folderHeader.addEventListener("click", () => {
+      isExpanded = !isExpanded;
+      contentEl.style.display = isExpanded ? "block" : "none";
+      this.updateChevronRotation(chevronSvg, isExpanded);
+    });
+
+    return folderEl;
+  }
+
   private renderTabs() {
     const tabContainer = this.containerEl.createEl("div", {
       cls: "tab-container",
@@ -116,20 +181,6 @@ export class SyncSidebar extends ItemView {
     this.filesToSync = { export: [], import: [] };
   }
 
-  private async renderContent() {
-    const folderState = this.saveFolderState();
-    this.contentContainer.empty();
-
-    this.updateNoFilesMessageVisibility();
-
-    if (!this.isEmptyContent()) {
-      this.renderFileColumns();
-      this.renderSubmitButton();
-    }
-
-    this.applyFolderState(folderState);
-  }
-
   private isEmptyContent(): boolean {
     return (
       this.files[this.currentTab].length === 0 &&
@@ -186,35 +237,11 @@ export class SyncSidebar extends ItemView {
   }
 
   private renderSubmitButton() {
-    if (this.currentTab === "export") {
-      const priceInfoBox = this.contentContainer.createEl("div", {
-        cls: "price-info-box",
-      });
-
-      priceInfoBox.createEl("div", {
-        cls: "balance-display",
-        attr: {
-          "data-label": "Current Balance:",
-          "data-value": `${this.currentBalance} AR`,
-        },
-      });
-      priceInfoBox.createEl("div", {
-        cls: "total-price-display",
-        attr: {
-          "data-label": "Total Price:",
-          "data-value": `${this.totalPrice} AR`,
-        },
-      });
-      priceInfoBox.createEl("div", {
-        cls: "new-balance-display",
-        attr: {
-          "data-label": "New Balance:",
-          "data-value": `${this.newBalance} AR`,
-        },
-      });
-    }
+    const submitContainer = this.contentContainer.createEl("div", {
+      cls: "submit-changes-container",
+    });
 
-    const submitButton = this.contentContainer.createEl("button", {
+    const submitButton = submitContainer.createEl("button", {
       text: `${this.currentTab === "export" ? "Export" : "Import"}`,
       cls: "mod-cta submit-changes",
       attr: {
@@ -420,7 +447,7 @@ export class SyncSidebar extends ItemView {
     return files;
   }
 
-  private renderFileNode(
+  private async renderFileNode(
     node: FileNode,
     contentEl: HTMLElement,
     isSource: boolean,
@@ -440,32 +467,6 @@ export class SyncSidebar extends ItemView {
       text: this.displayFileName(node.name),
     });
 
-    // Check if this file has been renamed remotely
-    const remoteFileInfo = Object.values(
-      this.plugin.settings.remoteUploadConfig,
-    ).find(
-      (remoteFile) =>
-        remoteFile.filePath === node.path && remoteFile.oldFilePath,
-    );
-
-    // if (remoteFileInfo && remoteFileInfo.oldFilePath) {
-    //   const renameIndicator = contentEl.createEl("span", {
-    //     cls: "rename-indicator",
-    //     text: "R",
-    //   });
-    //   renameIndicator.style.marginLeft = "5px";
-    //   renameIndicator.style.fontWeight = "bold";
-    //   renameIndicator.style.color = "var(--text-accent)";
-
-    //   // Add tooltip
-    //   const tooltip = `Renamed from: ${remoteFileInfo.oldFilePath}`;
-    //   renameIndicator.setAttribute("aria-label", tooltip);
-    //   renameIndicator.addClass("tooltip");
-
-    //   // Add CSS for tooltip (you can also add this to your styles.css)
-    //   contentEl.addClass("rename-container");
-    // }
-
     if (node.fileInfo) {
       this.setFileNodeAttributes(contentEl, node);
     }
@@ -528,7 +529,21 @@ export class SyncSidebar extends ItemView {
 
   private updateNoFilesMessageVisibility() {
     const isEmpty = this.isEmptyContent();
-    this.showNoFilesMessage(isEmpty);
+    let messageContainer = this.contentContainer.querySelector(
+      ".no-files-message-container",
+    ) as HTMLElement | null;
+
+    if (!messageContainer) {
+      messageContainer = this.contentContainer.createEl("div", {
+        cls: "no-files-message-container",
+      });
+      // Add the content for the no files message here
+      // ...
+    }
+
+    if (messageContainer instanceof HTMLElement) {
+      messageContainer.style.display = isEmpty ? "flex" : "none";
+    }
   }
 
   private expandParentFolders(filePath: string, tree: FileNode[]) {
@@ -753,34 +768,26 @@ export class SyncSidebar extends ItemView {
     const files = this.plugin.app.vault.getFiles();
 
     for (const file of files) {
-      // Check if this file's path matches any oldFilePath in remoteUploadConfig
-      const isRenamedRemotely = Object.values(
-        this.plugin.settings.remoteUploadConfig,
-      ).some((remoteFile) => remoteFile.oldFilePath === file.path);
+      const { syncState, fileHash } =
+        await this.plugin.vaultSyncManager.checkFileSync(file);
 
-      if (!isRenamedRemotely) {
-        const { syncState, fileHash } =
-          await this.plugin.vaultSyncManager.checkFileSync(file);
+      if (syncState === "new-local" || syncState === "local-newer") {
+        const localFileInfo = this.plugin.settings.localUploadConfig[file.path];
+        const fileNode = this.createFileNode(
+          file.path,
+          {
+            txId: localFileInfo?.txId || "",
+            timestamp: file.stat.mtime,
+            fileHash: fileHash,
+            encrypted: false,
+            filePath: file.path,
+            previousVersionTxId: localFileInfo?.previousVersionTxId || null,
+            versionNumber: (localFileInfo?.versionNumber || 0) + 1,
+          },
+          syncState,
+        );
 
-        if (syncState === "new-local" || syncState === "local-newer") {
-          const localFileInfo =
-            this.plugin.settings.localUploadConfig[file.path];
-          const fileNode = this.createFileNode(
-            file.path,
-            {
-              txId: localFileInfo?.txId || "",
-              timestamp: file.stat.mtime,
-              fileHash: fileHash,
-              encrypted: false,
-              filePath: file.path,
-              previousVersionTxId: localFileInfo?.previousVersionTxId || null,
-              versionNumber: (localFileInfo?.versionNumber || 0) + 1,
-            },
-            syncState,
-          );
-
-          newOrModifiedFiles.push(fileNode);
-        }
+        newOrModifiedFiles.push(fileNode);
       }
     }
 
diff --git a/src/main.ts b/src/main.ts
index 4f0f8e3..e9feda4 100644
--- a/src/main.ts
+++ b/src/main.ts
@@ -796,9 +796,23 @@ export default class ArweaveSync extends Plugin {
   }
 
   public async refreshSyncSidebar() {
-    const view = await this.getSyncSidebarView();
-    if (view) {
-      view.refresh();
+    const leaves = this.app.workspace.getLeavesOfType(SYNC_SIDEBAR_VIEW);
+    for (const leaf of leaves) {
+      // Ensure the view is loaded
+      if (leaf.view instanceof SyncSidebar) {
+        const view = leaf.view;
+
+        // Check if this view is currently active
+        const isActiveView =
+          this.app.workspace.getActiveViewOfType(SyncSidebar) === view;
+
+        if (!isActiveView) {
+          // Refresh in the background if not the active view
+          setTimeout(() => view.refresh(), 0);
+        } else {
+          view.refresh();
+        }
+      }
     }
   }
 
diff --git a/src/styles.css b/src/styles.css
index fe496f0..0c6f9e4 100644
--- a/src/styles.css
+++ b/src/styles.css
@@ -134,7 +134,6 @@
     box-shadow: none;
     background: none;
 }
-
 .arweave-sync-sidebar {
     display: flex;
     flex-direction: column;
@@ -164,8 +163,12 @@
     display: flex;
     flex-direction: column;
     overflow: hidden;
+}
+
+.arweave-sync-sidebar .scrollable-content {
+    flex-grow: 1;
+    overflow-y: auto;
     padding: 10px;
-    margin-bottom: 2rem;
 }
 
 .arweave-sync-sidebar .file-columns {
@@ -289,15 +292,16 @@
     padding-left: 0;
 }
 
+.arweave-sync-sidebar .submit-changes-container {
+    padding: 10px;
+    background-color: var(--background-secondary);
+    border-top: 1px solid var(--background-modifier-border);
+}
+
 .arweave-sync-sidebar .submit-changes {
     width: 100%;
-    margin-top: 10px;
-    padding: 10px;
-    background-color: var(--interactive-accent);
-    color: var(--text-on-accent);
-    border: none;
-    border-radius: 4px;
-    cursor: pointer;
+    margin-top: 0;
+    margin-bottom: 0;
 }
 
 .arweave-sync-sidebar .submit-changes:hover {
@@ -345,6 +349,10 @@
     background-color: var(--background-modifier-hover);
 }
 
+.arweave-sync-sidebar .root-folder {
+    margin-bottom: 20px;
+}
+
 .price-info-box {
     background-color: var(--background-secondary);
     border: 1px solid var(--background-modifier-border);
@@ -497,10 +505,15 @@
     transform: rotate(180deg) translateY(2px);
 }
 
-.nav-folder .tree-item-self.is-clickable.nav-file-title.new-file,
-.nav-folder .tree-item-self.is-clickable.nav-file-title.updated-file {
+.nav-folder .tree-item-self.is-clickable.nav-file-title.new-local,
+.nav-folder .tree-item-self.is-clickable.nav-file-title.new-remote,
+.nav-folder .tree-item-self.is-clickable.nav-file-title.local-newer,
+.nav-folder .tree-item-self.is-clickable.nav-file-title.remote-newer,
+.nav-folder .tree-item-self.is-clickable.nav-file-title.decrypt-failed {
     margin-inline-start: -13px !important;
     padding-inline-start: 41px !important;
+    /* border-top-left-radius: 0;
+    border-bottom-left-radius: 0; */
 }
 
 .RemoteNewerVersionModal .button-container {
@@ -530,6 +543,37 @@
     position: relative;
 }
 
+.root-folder {
+    /* margin-top: 20px; */
+}
+
+.root-folder > .nav-folder-title {
+    padding-left: 4px;
+    display: flex;
+    align-items: center;
+}
+
+.root-folder > .nav-folder-title .tree-item-icon {
+    margin-left: 4px;
+}
+
+.root-folder > .nav-folder-title .tree-item-inner {
+    font-weight: bold;
+    margin-left: 6px;
+}
+
+.root-folder > .nav-folder-children {
+    padding-left: 20px;
+}
+
+.nav-folder-collapse-indicator {
+    transition: transform 100ms ease-in-out;
+}
+
+.nav-folder-collapse-indicator svg {
+    transition: transform 100ms ease-in-out;
+}
+
 /*
 .tooltip {
     left: 0;
@@ -561,9 +605,45 @@
     opacity: 1;
     visibility: visible;
 } */
-
 @media (max-width: 768px) {
+    .arweave-sync-sidebar {
+        display: flex;
+        flex-direction: column;
+    }
+
     .arweave-sync-sidebar .tab-container {
-        margin-top: 1rem;
+        order: 2;
+        position: fixed;
+        bottom: 0;
+        left: 0;
+        right: 0;
+        background-color: var(--background-primary);
+        border-top: 1px solid var(--background-modifier-border);
+        border-bottom: none;
+        z-index: 1000;
+    }
+
+    .arweave-sync-sidebar .content-container {
+        order: 0;
+        margin-bottom: 100px; /* Adjust this value based on your tab height + submit button height */
+    }
+
+    .arweave-sync-sidebar .submit-changes-container {
+        order: 1;
+        position: fixed;
+        bottom: 50px; /* Adjust this value based on your tab height */
+        left: 0;
+        right: 0;
+        z-index: 999; /* Just below the tabs */
+    }
+
+    .arweave-sync-sidebar .scrollable-content {
+        padding-bottom: 20px; /* Add some space at the bottom */
+    }
+
+    .arweave-sync-sidebar .tab {
+        flex: 1;
+        text-align: center;
+        padding: 15px 10px;
     }
 }
diff --git a/styles.css b/styles.css
index 58adedd..0c6f9e4 100644
--- a/styles.css
+++ b/styles.css
@@ -134,7 +134,6 @@
     box-shadow: none;
     background: none;
 }
-
 .arweave-sync-sidebar {
     display: flex;
     flex-direction: column;
@@ -164,8 +163,12 @@
     display: flex;
     flex-direction: column;
     overflow: hidden;
+}
+
+.arweave-sync-sidebar .scrollable-content {
+    flex-grow: 1;
+    overflow-y: auto;
     padding: 10px;
-    margin-bottom: 2rem;
 }
 
 .arweave-sync-sidebar .file-columns {
@@ -289,15 +292,16 @@
     padding-left: 0;
 }
 
+.arweave-sync-sidebar .submit-changes-container {
+    padding: 10px;
+    background-color: var(--background-secondary);
+    border-top: 1px solid var(--background-modifier-border);
+}
+
 .arweave-sync-sidebar .submit-changes {
     width: 100%;
-    margin-top: 10px;
-    padding: 10px;
-    background-color: var(--interactive-accent);
-    color: var(--text-on-accent);
-    border: none;
-    border-radius: 4px;
-    cursor: pointer;
+    margin-top: 0;
+    margin-bottom: 0;
 }
 
 .arweave-sync-sidebar .submit-changes:hover {
@@ -345,6 +349,10 @@
     background-color: var(--background-modifier-hover);
 }
 
+.arweave-sync-sidebar .root-folder {
+    margin-bottom: 20px;
+}
+
 .price-info-box {
     background-color: var(--background-secondary);
     border: 1px solid var(--background-modifier-border);
@@ -497,10 +505,15 @@
     transform: rotate(180deg) translateY(2px);
 }
 
-.nav-folder .tree-item-self.is-clickable.nav-file-title.new-file,
-.nav-folder .tree-item-self.is-clickable.nav-file-title.updated-file {
+.nav-folder .tree-item-self.is-clickable.nav-file-title.new-local,
+.nav-folder .tree-item-self.is-clickable.nav-file-title.new-remote,
+.nav-folder .tree-item-self.is-clickable.nav-file-title.local-newer,
+.nav-folder .tree-item-self.is-clickable.nav-file-title.remote-newer,
+.nav-folder .tree-item-self.is-clickable.nav-file-title.decrypt-failed {
     margin-inline-start: -13px !important;
     padding-inline-start: 41px !important;
+    /* border-top-left-radius: 0;
+    border-bottom-left-radius: 0; */
 }
 
 .RemoteNewerVersionModal .button-container {
@@ -530,6 +543,38 @@
     position: relative;
 }
 
+.root-folder {
+    /* margin-top: 20px; */
+}
+
+.root-folder > .nav-folder-title {
+    padding-left: 4px;
+    display: flex;
+    align-items: center;
+}
+
+.root-folder > .nav-folder-title .tree-item-icon {
+    margin-left: 4px;
+}
+
+.root-folder > .nav-folder-title .tree-item-inner {
+    font-weight: bold;
+    margin-left: 6px;
+}
+
+.root-folder > .nav-folder-children {
+    padding-left: 20px;
+}
+
+.nav-folder-collapse-indicator {
+    transition: transform 100ms ease-in-out;
+}
+
+.nav-folder-collapse-indicator svg {
+    transition: transform 100ms ease-in-out;
+}
+
+/*
 .tooltip {
     left: 0;
     box-shadow: none;
@@ -559,10 +604,46 @@
 .tooltip:hover::after {
     opacity: 1;
     visibility: visible;
-}
-
+} */
 @media (max-width: 768px) {
+    .arweave-sync-sidebar {
+        display: flex;
+        flex-direction: column;
+    }
+
     .arweave-sync-sidebar .tab-container {
-        margin-top: 1rem;
+        order: 2;
+        position: fixed;
+        bottom: 0;
+        left: 0;
+        right: 0;
+        background-color: var(--background-primary);
+        border-top: 1px solid var(--background-modifier-border);
+        border-bottom: none;
+        z-index: 1000;
+    }
+
+    .arweave-sync-sidebar .content-container {
+        order: 0;
+        margin-bottom: 100px; /* Adjust this value based on your tab height + submit button height */
+    }
+
+    .arweave-sync-sidebar .submit-changes-container {
+        order: 1;
+        position: fixed;
+        bottom: 50px; /* Adjust this value based on your tab height */
+        left: 0;
+        right: 0;
+        z-index: 999; /* Just below the tabs */
+    }
+
+    .arweave-sync-sidebar .scrollable-content {
+        padding-bottom: 20px; /* Add some space at the bottom */
     }
-}
\ No newline at end of file
+
+    .arweave-sync-sidebar .tab {
+        flex: 1;
+        text-align: center;
+        padding: 15px 10px;
+    }
+}
