var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
var __privateWrapper = (obj, member, setter, getter) => ({
  set _(value) {
    __privateSet(obj, member, value, setter);
  },
  get _() {
    return __privateGet(obj, member, getter);
  }
});

// (disabled):crypto
var require_crypto = __commonJS({
  "(disabled):crypto"() {
  }
});

// node_modules/crypto-js/core.js
var require_core = __commonJS({
  "node_modules/crypto-js/core.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory();
      } else if (typeof define === "function" && define.amd) {
        define([], factory);
      } else {
        root.CryptoJS = factory();
      }
    })(exports, function() {
      var CryptoJS3 = CryptoJS3 || function(Math2, undefined2) {
        var crypto2;
        if (typeof window !== "undefined" && window.crypto) {
          crypto2 = window.crypto;
        }
        if (typeof self !== "undefined" && self.crypto) {
          crypto2 = self.crypto;
        }
        if (typeof globalThis !== "undefined" && globalThis.crypto) {
          crypto2 = globalThis.crypto;
        }
        if (!crypto2 && typeof window !== "undefined" && window.msCrypto) {
          crypto2 = window.msCrypto;
        }
        if (!crypto2 && typeof window !== "undefined" && window.crypto) {
          crypto2 = window.crypto;
        }
        if (!crypto2 && typeof require === "function") {
          try {
            crypto2 = require_crypto();
          } catch (err) {
          }
        }
        var cryptoSecureRandomInt = function() {
          if (crypto2) {
            if (typeof crypto2.getRandomValues === "function") {
              try {
                return crypto2.getRandomValues(new Uint32Array(1))[0];
              } catch (err) {
              }
            }
            if (typeof crypto2.randomBytes === "function") {
              try {
                return crypto2.randomBytes(4).readInt32LE();
              } catch (err) {
              }
            }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        };
        var create = Object.create || /* @__PURE__ */ function() {
          function F3() {
          }
          return function(obj) {
            var subtype;
            F3.prototype = obj;
            subtype = new F3();
            F3.prototype = null;
            return subtype;
          };
        }();
        var C3 = {};
        var C_lib = C3.lib = {};
        var Base = C_lib.Base = /* @__PURE__ */ function() {
          return {
            /**
             * Creates a new object that inherits from this object.
             *
             * @param {Object} overrides Properties to copy into the new object.
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function(overrides) {
              var subtype = create(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var instance = MyType.create();
             */
            create: function() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            /**
             * Initializes a newly created object.
             * Override this method to add some logic when your objects are created.
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
             */
            init: function() {
            },
            /**
             * Copies properties into this object.
             *
             * @param {Object} properties The properties to mix in.
             *
             * @example
             *
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = instance.clone();
             */
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        var WordArray = C_lib.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of 32-bit words.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.create();
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },
          /**
           * Converts this word array to a string.
           *
           * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
           *
           * @return {string} The stringified word array.
           *
           * @example
           *
           *     var string = wordArray + '';
           *     var string = wordArray.toString();
           *     var string = wordArray.toString(CryptoJS.enc.Utf8);
           */
          toString: function(encoder) {
            return (encoder || Hex).stringify(this);
          },
          /**
           * Concatenates a word array to this word array.
           *
           * @param {WordArray} wordArray The word array to append.
           *
           * @return {WordArray} This word array.
           *
           * @example
           *
           *     wordArray1.concat(wordArray2);
           */
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i = 0; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
              }
            } else {
              for (var j2 = 0; j2 < thatSigBytes; j2 += 4) {
                thisWords[thisSigBytes + j2 >>> 2] = thatWords[j2 >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          /**
           * Removes insignificant bits.
           *
           * @example
           *
           *     wordArray.clamp();
           */
          clamp: function() {
            var words = this.words;
            var sigBytes = this.sigBytes;
            words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words.length = Math2.ceil(sigBytes / 4);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {WordArray} The clone.
           *
           * @example
           *
           *     var clone = wordArray.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone;
          },
          /**
           * Creates a word array filled with random bytes.
           *
           * @param {number} nBytes The number of random bytes to generate.
           *
           * @return {WordArray} The random word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.random(16);
           */
          random: function(nBytes) {
            var words = [];
            for (var i = 0; i < nBytes; i += 4) {
              words.push(cryptoSecureRandomInt());
            }
            return new WordArray.init(words, nBytes);
          }
        });
        var C_enc = C3.enc = {};
        var Hex = C_enc.Hex = {
          /**
           * Converts a word array to a hex string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The hex string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          /**
           * Converts a hex string to a word array.
           *
           * @param {string} hexStr The hex string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
           */
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words = [];
            for (var i = 0; i < hexStrLength; i += 2) {
              words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
            }
            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          /**
           * Converts a word array to a Latin1 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Latin1 string.
           *
           * @static
           *
           * @example
           *
           *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          /**
           * Converts a Latin1 string to a word array.
           *
           * @param {string} latin1Str The Latin1 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
           */
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words = [];
            for (var i = 0; i < latin1StrLength; i++) {
              words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
            }
            return new WordArray.init(words, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          /**
           * Converts a word array to a UTF-8 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-8 string.
           *
           * @static
           *
           * @example
           *
           *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
           */
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          /**
           * Converts a UTF-8 string to a word array.
           *
           * @param {string} utf8Str The UTF-8 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
           */
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          /**
           * Resets this block algorithm's data buffer to its initial state.
           *
           * @example
           *
           *     bufferedBlockAlgorithm.reset();
           */
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          /**
           * Adds new data to this block algorithm's buffer.
           *
           * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
           *
           * @example
           *
           *     bufferedBlockAlgorithm._append('data');
           *     bufferedBlockAlgorithm._append(wordArray);
           */
          _append: function(data) {
            if (typeof data == "string") {
              data = Utf8.parse(data);
            }
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          /**
           * Processes available data blocks.
           *
           * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
           *
           * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
           *
           * @return {WordArray} The processed data.
           *
           * @example
           *
           *     var processedData = bufferedBlockAlgorithm._process();
           *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
           */
          _process: function(doFlush) {
            var processedWords;
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          /**
           * Creates a copy of this object.
           *
           * @return {Object} The clone.
           *
           * @example
           *
           *     var clone = bufferedBlockAlgorithm.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone;
          },
          _minBufferSize: 0
        });
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           */
          cfg: Base.extend(),
          /**
           * Initializes a newly created hasher.
           *
           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
           *
           * @example
           *
           *     var hasher = CryptoJS.algo.SHA256.create();
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          /**
           * Resets this hasher to its initial state.
           *
           * @example
           *
           *     hasher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Updates this hasher with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {Hasher} This hasher.
           *
           * @example
           *
           *     hasher.update('message');
           *     hasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          /**
           * Finalizes the hash computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The hash.
           *
           * @example
           *
           *     var hash = hasher.finalize();
           *     var hash = hasher.finalize('message');
           *     var hash = hasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash = this._doFinalize();
            return hash;
          },
          blockSize: 512 / 32,
          /**
           * Creates a shortcut function to a hasher's object interface.
           *
           * @param {Hasher} hasher The hasher to create a helper for.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
           */
          _createHelper: function(hasher) {
            return function(message2, cfg) {
              return new hasher.init(cfg).finalize(message2);
            };
          },
          /**
           * Creates a shortcut function to the HMAC's object interface.
           *
           * @param {Hasher} hasher The hasher to use in this HMAC helper.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
           */
          _createHmacHelper: function(hasher) {
            return function(message2, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message2);
            };
          }
        });
        var C_algo = C3.algo = {};
        return C3;
      }(Math);
      return CryptoJS3;
    });
  }
});

// node_modules/crypto-js/x64-core.js
var require_x64_core = __commonJS({
  "node_modules/crypto-js/x64-core.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function(undefined2) {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;
        var C_x64 = C3.x64 = {};
        var X64Word = C_x64.Word = Base.extend({
          /**
           * Initializes a newly created 64-bit word.
           *
           * @param {number} high The high 32 bits.
           * @param {number} low The low 32 bits.
           *
           * @example
           *
           *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
           */
          init: function(high, low) {
            this.high = high;
            this.low = low;
          }
          /**
           * Bitwise NOTs this word.
           *
           * @return {X64Word} A new x64-Word object after negating.
           *
           * @example
           *
           *     var negated = x64Word.not();
           */
          // not: function () {
          // var high = ~this.high;
          // var low = ~this.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ANDs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to AND with this word.
           *
           * @return {X64Word} A new x64-Word object after ANDing.
           *
           * @example
           *
           *     var anded = x64Word.and(anotherX64Word);
           */
          // and: function (word) {
          // var high = this.high & word.high;
          // var low = this.low & word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to OR with this word.
           *
           * @return {X64Word} A new x64-Word object after ORing.
           *
           * @example
           *
           *     var ored = x64Word.or(anotherX64Word);
           */
          // or: function (word) {
          // var high = this.high | word.high;
          // var low = this.low | word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise XORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to XOR with this word.
           *
           * @return {X64Word} A new x64-Word object after XORing.
           *
           * @example
           *
           *     var xored = x64Word.xor(anotherX64Word);
           */
          // xor: function (word) {
          // var high = this.high ^ word.high;
          // var low = this.low ^ word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the left.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftL(25);
           */
          // shiftL: function (n) {
          // if (n < 32) {
          // var high = (this.high << n) | (this.low >>> (32 - n));
          // var low = this.low << n;
          // } else {
          // var high = this.low << (n - 32);
          // var low = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the right.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftR(7);
           */
          // shiftR: function (n) {
          // if (n < 32) {
          // var low = (this.low >>> n) | (this.high << (32 - n));
          // var high = this.high >>> n;
          // } else {
          // var low = this.high >>> (n - 32);
          // var high = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Rotates this word n bits to the left.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotL(25);
           */
          // rotL: function (n) {
          // return this.shiftL(n).or(this.shiftR(64 - n));
          // },
          /**
           * Rotates this word n bits to the right.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotR(7);
           */
          // rotR: function (n) {
          // return this.shiftR(n).or(this.shiftL(64 - n));
          // },
          /**
           * Adds this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to add with this word.
           *
           * @return {X64Word} A new x64-Word object after adding.
           *
           * @example
           *
           *     var added = x64Word.add(anotherX64Word);
           */
          // add: function (word) {
          // var low = (this.low + word.low) | 0;
          // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
          // var high = (this.high + word.high + carry) | 0;
          // return X64Word.create(high, low);
          // }
        });
        var X64WordArray = C_x64.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.x64.WordArray.create();
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ]);
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ], 10);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 8;
            }
          },
          /**
           * Converts this 64-bit word array to a 32-bit word array.
           *
           * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
           *
           * @example
           *
           *     var x32WordArray = x64WordArray.toX32();
           */
          toX32: function() {
            var x64Words = this.words;
            var x64WordsLength = x64Words.length;
            var x32Words = [];
            for (var i = 0; i < x64WordsLength; i++) {
              var x64Word = x64Words[i];
              x32Words.push(x64Word.high);
              x32Words.push(x64Word.low);
            }
            return X32WordArray.create(x32Words, this.sigBytes);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {X64WordArray} The clone.
           *
           * @example
           *
           *     var clone = x64WordArray.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            var words = clone.words = this.words.slice(0);
            var wordsLength = words.length;
            for (var i = 0; i < wordsLength; i++) {
              words[i] = words[i].clone();
            }
            return clone;
          }
        });
      })();
      return CryptoJS3;
    });
  }
});

// node_modules/crypto-js/lib-typedarrays.js
var require_lib_typedarrays = __commonJS({
  "node_modules/crypto-js/lib-typedarrays.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function() {
        if (typeof ArrayBuffer != "function") {
          return;
        }
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var superInit = WordArray.init;
        var subInit = WordArray.init = function(typedArray) {
          if (typedArray instanceof ArrayBuffer) {
            typedArray = new Uint8Array(typedArray);
          }
          if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
          }
          if (typedArray instanceof Uint8Array) {
            var typedArrayByteLength = typedArray.byteLength;
            var words = [];
            for (var i = 0; i < typedArrayByteLength; i++) {
              words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
            }
            superInit.call(this, words, typedArrayByteLength);
          } else {
            superInit.apply(this, arguments);
          }
        };
        subInit.prototype = WordArray;
      })();
      return CryptoJS3.lib.WordArray;
    });
  }
});

// node_modules/crypto-js/enc-utf16.js
var require_enc_utf16 = __commonJS({
  "node_modules/crypto-js/enc-utf16.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function() {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C3.enc;
        var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
          /**
           * Converts a word array to a UTF-16 BE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 BE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 65535;
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 BE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 BE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        C_enc.Utf16LE = {
          /**
           * Converts a word array to a UTF-16 LE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 LE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 65535);
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 LE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 LE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        function swapEndian(word) {
          return word << 8 & 4278255360 | word >>> 8 & 16711935;
        }
      })();
      return CryptoJS3.enc.Utf16;
    });
  }
});

// node_modules/crypto-js/enc-base64.js
var require_enc_base64 = __commonJS({
  "node_modules/crypto-js/enc-base64.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function() {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C3.enc;
        var Base64 = C_enc.Base64 = {
          /**
           * Converts a word array to a Base64 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Base64 string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map3 = this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j2 = 0; j2 < 4 && i + j2 * 0.75 < sigBytes; j2++) {
                base64Chars.push(map3.charAt(triplet >>> 6 * (3 - j2) & 63));
              }
            }
            var paddingChar = map3.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64 string to a word array.
           *
           * @param {string} base64Str The Base64 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
           */
          parse: function(base64Str) {
            var base64StrLength = base64Str.length;
            var map3 = this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j2 = 0; j2 < map3.length; j2++) {
                reverseMap[map3.charCodeAt(j2)] = j2;
              }
            }
            var paddingChar = map3.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS3.enc.Base64;
    });
  }
});

// node_modules/crypto-js/enc-base64url.js
var require_enc_base64url = __commonJS({
  "node_modules/crypto-js/enc-base64url.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function() {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C3.enc;
        var Base64url = C_enc.Base64url = {
          /**
           * Converts a word array to a Base64url string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {string} The Base64url string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
           */
          stringify: function(wordArray, urlSafe) {
            if (urlSafe === void 0) {
              urlSafe = true;
            }
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map3 = urlSafe ? this._safe_map : this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j2 = 0; j2 < 4 && i + j2 * 0.75 < sigBytes; j2++) {
                base64Chars.push(map3.charAt(triplet >>> 6 * (3 - j2) & 63));
              }
            }
            var paddingChar = map3.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64url string to a word array.
           *
           * @param {string} base64Str The Base64url string.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
           */
          parse: function(base64Str, urlSafe) {
            if (urlSafe === void 0) {
              urlSafe = true;
            }
            var base64StrLength = base64Str.length;
            var map3 = urlSafe ? this._safe_map : this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j2 = 0; j2 < map3.length; j2++) {
                reverseMap[map3.charCodeAt(j2)] = j2;
              }
            }
            var paddingChar = map3.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
          _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS3.enc.Base64url;
    });
  }
});

// node_modules/crypto-js/md5.js
var require_md5 = __commonJS({
  "node_modules/crypto-js/md5.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function(Math2) {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C3.algo;
        var T4 = [];
        (function() {
          for (var i = 0; i < 64; i++) {
            T4[i] = Math2.abs(Math2.sin(i + 1)) * 4294967296 | 0;
          }
        })();
        var MD5 = C_algo.MD5 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878
            ]);
          },
          _doProcessBlock: function(M4, offset) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M4[offset_i];
              M4[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H2 = this._hash.words;
            var M_offset_0 = M4[offset + 0];
            var M_offset_1 = M4[offset + 1];
            var M_offset_2 = M4[offset + 2];
            var M_offset_3 = M4[offset + 3];
            var M_offset_4 = M4[offset + 4];
            var M_offset_5 = M4[offset + 5];
            var M_offset_6 = M4[offset + 6];
            var M_offset_7 = M4[offset + 7];
            var M_offset_8 = M4[offset + 8];
            var M_offset_9 = M4[offset + 9];
            var M_offset_10 = M4[offset + 10];
            var M_offset_11 = M4[offset + 11];
            var M_offset_12 = M4[offset + 12];
            var M_offset_13 = M4[offset + 13];
            var M_offset_14 = M4[offset + 14];
            var M_offset_15 = M4[offset + 15];
            var a = H2[0];
            var b2 = H2[1];
            var c2 = H2[2];
            var d2 = H2[3];
            a = FF(a, b2, c2, d2, M_offset_0, 7, T4[0]);
            d2 = FF(d2, a, b2, c2, M_offset_1, 12, T4[1]);
            c2 = FF(c2, d2, a, b2, M_offset_2, 17, T4[2]);
            b2 = FF(b2, c2, d2, a, M_offset_3, 22, T4[3]);
            a = FF(a, b2, c2, d2, M_offset_4, 7, T4[4]);
            d2 = FF(d2, a, b2, c2, M_offset_5, 12, T4[5]);
            c2 = FF(c2, d2, a, b2, M_offset_6, 17, T4[6]);
            b2 = FF(b2, c2, d2, a, M_offset_7, 22, T4[7]);
            a = FF(a, b2, c2, d2, M_offset_8, 7, T4[8]);
            d2 = FF(d2, a, b2, c2, M_offset_9, 12, T4[9]);
            c2 = FF(c2, d2, a, b2, M_offset_10, 17, T4[10]);
            b2 = FF(b2, c2, d2, a, M_offset_11, 22, T4[11]);
            a = FF(a, b2, c2, d2, M_offset_12, 7, T4[12]);
            d2 = FF(d2, a, b2, c2, M_offset_13, 12, T4[13]);
            c2 = FF(c2, d2, a, b2, M_offset_14, 17, T4[14]);
            b2 = FF(b2, c2, d2, a, M_offset_15, 22, T4[15]);
            a = GG(a, b2, c2, d2, M_offset_1, 5, T4[16]);
            d2 = GG(d2, a, b2, c2, M_offset_6, 9, T4[17]);
            c2 = GG(c2, d2, a, b2, M_offset_11, 14, T4[18]);
            b2 = GG(b2, c2, d2, a, M_offset_0, 20, T4[19]);
            a = GG(a, b2, c2, d2, M_offset_5, 5, T4[20]);
            d2 = GG(d2, a, b2, c2, M_offset_10, 9, T4[21]);
            c2 = GG(c2, d2, a, b2, M_offset_15, 14, T4[22]);
            b2 = GG(b2, c2, d2, a, M_offset_4, 20, T4[23]);
            a = GG(a, b2, c2, d2, M_offset_9, 5, T4[24]);
            d2 = GG(d2, a, b2, c2, M_offset_14, 9, T4[25]);
            c2 = GG(c2, d2, a, b2, M_offset_3, 14, T4[26]);
            b2 = GG(b2, c2, d2, a, M_offset_8, 20, T4[27]);
            a = GG(a, b2, c2, d2, M_offset_13, 5, T4[28]);
            d2 = GG(d2, a, b2, c2, M_offset_2, 9, T4[29]);
            c2 = GG(c2, d2, a, b2, M_offset_7, 14, T4[30]);
            b2 = GG(b2, c2, d2, a, M_offset_12, 20, T4[31]);
            a = HH(a, b2, c2, d2, M_offset_5, 4, T4[32]);
            d2 = HH(d2, a, b2, c2, M_offset_8, 11, T4[33]);
            c2 = HH(c2, d2, a, b2, M_offset_11, 16, T4[34]);
            b2 = HH(b2, c2, d2, a, M_offset_14, 23, T4[35]);
            a = HH(a, b2, c2, d2, M_offset_1, 4, T4[36]);
            d2 = HH(d2, a, b2, c2, M_offset_4, 11, T4[37]);
            c2 = HH(c2, d2, a, b2, M_offset_7, 16, T4[38]);
            b2 = HH(b2, c2, d2, a, M_offset_10, 23, T4[39]);
            a = HH(a, b2, c2, d2, M_offset_13, 4, T4[40]);
            d2 = HH(d2, a, b2, c2, M_offset_0, 11, T4[41]);
            c2 = HH(c2, d2, a, b2, M_offset_3, 16, T4[42]);
            b2 = HH(b2, c2, d2, a, M_offset_6, 23, T4[43]);
            a = HH(a, b2, c2, d2, M_offset_9, 4, T4[44]);
            d2 = HH(d2, a, b2, c2, M_offset_12, 11, T4[45]);
            c2 = HH(c2, d2, a, b2, M_offset_15, 16, T4[46]);
            b2 = HH(b2, c2, d2, a, M_offset_2, 23, T4[47]);
            a = II(a, b2, c2, d2, M_offset_0, 6, T4[48]);
            d2 = II(d2, a, b2, c2, M_offset_7, 10, T4[49]);
            c2 = II(c2, d2, a, b2, M_offset_14, 15, T4[50]);
            b2 = II(b2, c2, d2, a, M_offset_5, 21, T4[51]);
            a = II(a, b2, c2, d2, M_offset_12, 6, T4[52]);
            d2 = II(d2, a, b2, c2, M_offset_3, 10, T4[53]);
            c2 = II(c2, d2, a, b2, M_offset_10, 15, T4[54]);
            b2 = II(b2, c2, d2, a, M_offset_1, 21, T4[55]);
            a = II(a, b2, c2, d2, M_offset_8, 6, T4[56]);
            d2 = II(d2, a, b2, c2, M_offset_15, 10, T4[57]);
            c2 = II(c2, d2, a, b2, M_offset_6, 15, T4[58]);
            b2 = II(b2, c2, d2, a, M_offset_13, 21, T4[59]);
            a = II(a, b2, c2, d2, M_offset_4, 6, T4[60]);
            d2 = II(d2, a, b2, c2, M_offset_11, 10, T4[61]);
            c2 = II(c2, d2, a, b2, M_offset_2, 15, T4[62]);
            b2 = II(b2, c2, d2, a, M_offset_9, 21, T4[63]);
            H2[0] = H2[0] + a | 0;
            H2[1] = H2[1] + b2 | 0;
            H2[2] = H2[2] + c2 | 0;
            H2[3] = H2[3] + d2 | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
            var nBitsTotalL = nBitsTotal;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H2 = hash.words;
            for (var i = 0; i < 4; i++) {
              var H_i = H2[i];
              H2[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function FF(a, b2, c2, d2, x4, s, t) {
          var n = a + (b2 & c2 | ~b2 & d2) + x4 + t;
          return (n << s | n >>> 32 - s) + b2;
        }
        function GG(a, b2, c2, d2, x4, s, t) {
          var n = a + (b2 & d2 | c2 & ~d2) + x4 + t;
          return (n << s | n >>> 32 - s) + b2;
        }
        function HH(a, b2, c2, d2, x4, s, t) {
          var n = a + (b2 ^ c2 ^ d2) + x4 + t;
          return (n << s | n >>> 32 - s) + b2;
        }
        function II(a, b2, c2, d2, x4, s, t) {
          var n = a + (c2 ^ (b2 | ~d2)) + x4 + t;
          return (n << s | n >>> 32 - s) + b2;
        }
        C3.MD5 = Hasher._createHelper(MD5);
        C3.HmacMD5 = Hasher._createHmacHelper(MD5);
      })(Math);
      return CryptoJS3.MD5;
    });
  }
});

// node_modules/crypto-js/sha1.js
var require_sha1 = __commonJS({
  "node_modules/crypto-js/sha1.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function() {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C3.algo;
        var W = [];
        var SHA1 = C_algo.SHA1 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878,
              3285377520
            ]);
          },
          _doProcessBlock: function(M4, offset) {
            var H2 = this._hash.words;
            var a = H2[0];
            var b2 = H2[1];
            var c2 = H2[2];
            var d2 = H2[3];
            var e = H2[4];
            for (var i = 0; i < 80; i++) {
              if (i < 16) {
                W[i] = M4[offset + i] | 0;
              } else {
                var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                W[i] = n << 1 | n >>> 31;
              }
              var t = (a << 5 | a >>> 27) + e + W[i];
              if (i < 20) {
                t += (b2 & c2 | ~b2 & d2) + 1518500249;
              } else if (i < 40) {
                t += (b2 ^ c2 ^ d2) + 1859775393;
              } else if (i < 60) {
                t += (b2 & c2 | b2 & d2 | c2 & d2) - 1894007588;
              } else {
                t += (b2 ^ c2 ^ d2) - 899497514;
              }
              e = d2;
              d2 = c2;
              c2 = b2 << 30 | b2 >>> 2;
              b2 = a;
              a = t;
            }
            H2[0] = H2[0] + a | 0;
            H2[1] = H2[1] + b2 | 0;
            H2[2] = H2[2] + c2 | 0;
            H2[3] = H2[3] + d2 | 0;
            H2[4] = H2[4] + e | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C3.SHA1 = Hasher._createHelper(SHA1);
        C3.HmacSHA1 = Hasher._createHmacHelper(SHA1);
      })();
      return CryptoJS3.SHA1;
    });
  }
});

// node_modules/crypto-js/sha256.js
var require_sha256 = __commonJS({
  "node_modules/crypto-js/sha256.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function(Math2) {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C3.algo;
        var H2 = [];
        var K2 = [];
        (function() {
          function isPrime(n2) {
            var sqrtN = Math2.sqrt(n2);
            for (var factor = 2; factor <= sqrtN; factor++) {
              if (!(n2 % factor)) {
                return false;
              }
            }
            return true;
          }
          function getFractionalBits(n2) {
            return (n2 - (n2 | 0)) * 4294967296 | 0;
          }
          var n = 2;
          var nPrime = 0;
          while (nPrime < 64) {
            if (isPrime(n)) {
              if (nPrime < 8) {
                H2[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
              }
              K2[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
              nPrime++;
            }
            n++;
          }
        })();
        var W = [];
        var SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init(H2.slice(0));
          },
          _doProcessBlock: function(M4, offset) {
            var H3 = this._hash.words;
            var a = H3[0];
            var b2 = H3[1];
            var c2 = H3[2];
            var d2 = H3[3];
            var e = H3[4];
            var f2 = H3[5];
            var g2 = H3[6];
            var h = H3[7];
            for (var i = 0; i < 64; i++) {
              if (i < 16) {
                W[i] = M4[offset + i] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                var gamma1x = W[i - 2];
                var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
              }
              var ch = e & f2 ^ ~e & g2;
              var maj = a & b2 ^ a & c2 ^ b2 & c2;
              var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
              var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
              var t1 = h + sigma1 + ch + K2[i] + W[i];
              var t2 = sigma0 + maj;
              h = g2;
              g2 = f2;
              f2 = e;
              e = d2 + t1 | 0;
              d2 = c2;
              c2 = b2;
              b2 = a;
              a = t1 + t2 | 0;
            }
            H3[0] = H3[0] + a | 0;
            H3[1] = H3[1] + b2 | 0;
            H3[2] = H3[2] + c2 | 0;
            H3[3] = H3[3] + d2 | 0;
            H3[4] = H3[4] + e | 0;
            H3[5] = H3[5] + f2 | 0;
            H3[6] = H3[6] + g2 | 0;
            H3[7] = H3[7] + h | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C3.SHA256 = Hasher._createHelper(SHA256);
        C3.HmacSHA256 = Hasher._createHmacHelper(SHA256);
      })(Math);
      return CryptoJS3.SHA256;
    });
  }
});

// node_modules/crypto-js/sha224.js
var require_sha224 = __commonJS({
  "node_modules/crypto-js/sha224.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_sha256());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function() {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C3.algo;
        var SHA256 = C_algo.SHA256;
        var SHA224 = C_algo.SHA224 = SHA256.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              3238371032,
              914150663,
              812702999,
              4144912697,
              4290775857,
              1750603025,
              1694076839,
              3204075428
            ]);
          },
          _doFinalize: function() {
            var hash = SHA256._doFinalize.call(this);
            hash.sigBytes -= 4;
            return hash;
          }
        });
        C3.SHA224 = SHA256._createHelper(SHA224);
        C3.HmacSHA224 = SHA256._createHmacHelper(SHA224);
      })();
      return CryptoJS3.SHA224;
    });
  }
});

// node_modules/crypto-js/sha512.js
var require_sha512 = __commonJS({
  "node_modules/crypto-js/sha512.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function() {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var Hasher = C_lib.Hasher;
        var C_x64 = C3.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C3.algo;
        function X64Word_create() {
          return X64Word.create.apply(X64Word, arguments);
        }
        var K2 = [
          X64Word_create(1116352408, 3609767458),
          X64Word_create(1899447441, 602891725),
          X64Word_create(3049323471, 3964484399),
          X64Word_create(3921009573, 2173295548),
          X64Word_create(961987163, 4081628472),
          X64Word_create(1508970993, 3053834265),
          X64Word_create(2453635748, 2937671579),
          X64Word_create(2870763221, 3664609560),
          X64Word_create(3624381080, 2734883394),
          X64Word_create(310598401, 1164996542),
          X64Word_create(607225278, 1323610764),
          X64Word_create(1426881987, 3590304994),
          X64Word_create(1925078388, 4068182383),
          X64Word_create(2162078206, 991336113),
          X64Word_create(2614888103, 633803317),
          X64Word_create(3248222580, 3479774868),
          X64Word_create(3835390401, 2666613458),
          X64Word_create(4022224774, 944711139),
          X64Word_create(264347078, 2341262773),
          X64Word_create(604807628, 2007800933),
          X64Word_create(770255983, 1495990901),
          X64Word_create(1249150122, 1856431235),
          X64Word_create(1555081692, 3175218132),
          X64Word_create(1996064986, 2198950837),
          X64Word_create(2554220882, 3999719339),
          X64Word_create(2821834349, 766784016),
          X64Word_create(2952996808, 2566594879),
          X64Word_create(3210313671, 3203337956),
          X64Word_create(3336571891, 1034457026),
          X64Word_create(3584528711, 2466948901),
          X64Word_create(113926993, 3758326383),
          X64Word_create(338241895, 168717936),
          X64Word_create(666307205, 1188179964),
          X64Word_create(773529912, 1546045734),
          X64Word_create(1294757372, 1522805485),
          X64Word_create(1396182291, 2643833823),
          X64Word_create(1695183700, 2343527390),
          X64Word_create(1986661051, 1014477480),
          X64Word_create(2177026350, 1206759142),
          X64Word_create(2456956037, 344077627),
          X64Word_create(2730485921, 1290863460),
          X64Word_create(2820302411, 3158454273),
          X64Word_create(3259730800, 3505952657),
          X64Word_create(3345764771, 106217008),
          X64Word_create(3516065817, 3606008344),
          X64Word_create(3600352804, 1432725776),
          X64Word_create(4094571909, 1467031594),
          X64Word_create(275423344, 851169720),
          X64Word_create(430227734, 3100823752),
          X64Word_create(506948616, 1363258195),
          X64Word_create(659060556, 3750685593),
          X64Word_create(883997877, 3785050280),
          X64Word_create(958139571, 3318307427),
          X64Word_create(1322822218, 3812723403),
          X64Word_create(1537002063, 2003034995),
          X64Word_create(1747873779, 3602036899),
          X64Word_create(1955562222, 1575990012),
          X64Word_create(2024104815, 1125592928),
          X64Word_create(2227730452, 2716904306),
          X64Word_create(2361852424, 442776044),
          X64Word_create(2428436474, 593698344),
          X64Word_create(2756734187, 3733110249),
          X64Word_create(3204031479, 2999351573),
          X64Word_create(3329325298, 3815920427),
          X64Word_create(3391569614, 3928383900),
          X64Word_create(3515267271, 566280711),
          X64Word_create(3940187606, 3454069534),
          X64Word_create(4118630271, 4000239992),
          X64Word_create(116418474, 1914138554),
          X64Word_create(174292421, 2731055270),
          X64Word_create(289380356, 3203993006),
          X64Word_create(460393269, 320620315),
          X64Word_create(685471733, 587496836),
          X64Word_create(852142971, 1086792851),
          X64Word_create(1017036298, 365543100),
          X64Word_create(1126000580, 2618297676),
          X64Word_create(1288033470, 3409855158),
          X64Word_create(1501505948, 4234509866),
          X64Word_create(1607167915, 987167468),
          X64Word_create(1816402316, 1246189591)
        ];
        var W = [];
        (function() {
          for (var i = 0; i < 80; i++) {
            W[i] = X64Word_create();
          }
        })();
        var SHA512 = C_algo.SHA512 = Hasher.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(1779033703, 4089235720),
              new X64Word.init(3144134277, 2227873595),
              new X64Word.init(1013904242, 4271175723),
              new X64Word.init(2773480762, 1595750129),
              new X64Word.init(1359893119, 2917565137),
              new X64Word.init(2600822924, 725511199),
              new X64Word.init(528734635, 4215389547),
              new X64Word.init(1541459225, 327033209)
            ]);
          },
          _doProcessBlock: function(M4, offset) {
            var H2 = this._hash.words;
            var H0 = H2[0];
            var H1 = H2[1];
            var H22 = H2[2];
            var H3 = H2[3];
            var H4 = H2[4];
            var H5 = H2[5];
            var H6 = H2[6];
            var H7 = H2[7];
            var H0h = H0.high;
            var H0l = H0.low;
            var H1h = H1.high;
            var H1l = H1.low;
            var H2h = H22.high;
            var H2l = H22.low;
            var H3h = H3.high;
            var H3l = H3.low;
            var H4h = H4.high;
            var H4l = H4.low;
            var H5h = H5.high;
            var H5l = H5.low;
            var H6h = H6.high;
            var H6l = H6.low;
            var H7h = H7.high;
            var H7l = H7.low;
            var ah = H0h;
            var al = H0l;
            var bh = H1h;
            var bl = H1l;
            var ch = H2h;
            var cl = H2l;
            var dh = H3h;
            var dl = H3l;
            var eh = H4h;
            var el2 = H4l;
            var fh = H5h;
            var fl = H5l;
            var gh = H6h;
            var gl = H6l;
            var hh = H7h;
            var hl = H7l;
            for (var i = 0; i < 80; i++) {
              var Wil;
              var Wih;
              var Wi = W[i];
              if (i < 16) {
                Wih = Wi.high = M4[offset + i * 2] | 0;
                Wil = Wi.low = M4[offset + i * 2 + 1] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0xh = gamma0x.high;
                var gamma0xl = gamma0x.low;
                var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                var gamma1x = W[i - 2];
                var gamma1xh = gamma1x.high;
                var gamma1xl = gamma1x.low;
                var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                var Wi7 = W[i - 7];
                var Wi7h = Wi7.high;
                var Wi7l = Wi7.low;
                var Wi16 = W[i - 16];
                var Wi16h = Wi16.high;
                var Wi16l = Wi16.low;
                Wil = gamma0l + Wi7l;
                Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                Wil = Wil + gamma1l;
                Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                Wil = Wil + Wi16l;
                Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                Wi.high = Wih;
                Wi.low = Wil;
              }
              var chh = eh & fh ^ ~eh & gh;
              var chl = el2 & fl ^ ~el2 & gl;
              var majh = ah & bh ^ ah & ch ^ bh & ch;
              var majl = al & bl ^ al & cl ^ bl & cl;
              var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
              var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
              var sigma1h = (eh >>> 14 | el2 << 18) ^ (eh >>> 18 | el2 << 14) ^ (eh << 23 | el2 >>> 9);
              var sigma1l = (el2 >>> 14 | eh << 18) ^ (el2 >>> 18 | eh << 14) ^ (el2 << 23 | eh >>> 9);
              var Ki = K2[i];
              var Kih = Ki.high;
              var Kil = Ki.low;
              var t1l = hl + sigma1l;
              var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
              var t1l = t1l + chl;
              var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
              var t1l = t1l + Kil;
              var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
              var t1l = t1l + Wil;
              var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
              var t2l = sigma0l + majl;
              var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el2;
              el2 = dl + t1l | 0;
              eh = dh + t1h + (el2 >>> 0 < dl >>> 0 ? 1 : 0) | 0;
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              al = t1l + t2l | 0;
              ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
            }
            H0l = H0.low = H0l + al;
            H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
            H1l = H1.low = H1l + bl;
            H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
            H2l = H22.low = H2l + cl;
            H22.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
            H3l = H3.low = H3l + dl;
            H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
            H4l = H4.low = H4l + el2;
            H4.high = H4h + eh + (H4l >>> 0 < el2 >>> 0 ? 1 : 0);
            H5l = H5.low = H5l + fl;
            H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
            H6l = H6.low = H6l + gl;
            H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
            H7l = H7.low = H7l + hl;
            H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var hash = this._hash.toX32();
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          },
          blockSize: 1024 / 32
        });
        C3.SHA512 = Hasher._createHelper(SHA512);
        C3.HmacSHA512 = Hasher._createHmacHelper(SHA512);
      })();
      return CryptoJS3.SHA512;
    });
  }
});

// node_modules/crypto-js/sha384.js
var require_sha384 = __commonJS({
  "node_modules/crypto-js/sha384.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_x64_core(), require_sha512());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./sha512"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function() {
        var C3 = CryptoJS3;
        var C_x64 = C3.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C3.algo;
        var SHA512 = C_algo.SHA512;
        var SHA384 = C_algo.SHA384 = SHA512.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(3418070365, 3238371032),
              new X64Word.init(1654270250, 914150663),
              new X64Word.init(2438529370, 812702999),
              new X64Word.init(355462360, 4144912697),
              new X64Word.init(1731405415, 4290775857),
              new X64Word.init(2394180231, 1750603025),
              new X64Word.init(3675008525, 1694076839),
              new X64Word.init(1203062813, 3204075428)
            ]);
          },
          _doFinalize: function() {
            var hash = SHA512._doFinalize.call(this);
            hash.sigBytes -= 16;
            return hash;
          }
        });
        C3.SHA384 = SHA512._createHelper(SHA384);
        C3.HmacSHA384 = SHA512._createHmacHelper(SHA384);
      })();
      return CryptoJS3.SHA384;
    });
  }
});

// node_modules/crypto-js/sha3.js
var require_sha3 = __commonJS({
  "node_modules/crypto-js/sha3.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function(Math2) {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C3.x64;
        var X64Word = C_x64.Word;
        var C_algo = C3.algo;
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        (function() {
          var x4 = 1, y2 = 0;
          for (var t = 0; t < 24; t++) {
            RHO_OFFSETS[x4 + 5 * y2] = (t + 1) * (t + 2) / 2 % 64;
            var newX = y2 % 5;
            var newY = (2 * x4 + 3 * y2) % 5;
            x4 = newX;
            y2 = newY;
          }
          for (var x4 = 0; x4 < 5; x4++) {
            for (var y2 = 0; y2 < 5; y2++) {
              PI_INDEXES[x4 + 5 * y2] = y2 + (2 * x4 + 3 * y2) % 5 * 5;
            }
          }
          var LFSR = 1;
          for (var i = 0; i < 24; i++) {
            var roundConstantMsw = 0;
            var roundConstantLsw = 0;
            for (var j2 = 0; j2 < 7; j2++) {
              if (LFSR & 1) {
                var bitPosition = (1 << j2) - 1;
                if (bitPosition < 32) {
                  roundConstantLsw ^= 1 << bitPosition;
                } else {
                  roundConstantMsw ^= 1 << bitPosition - 32;
                }
              }
              if (LFSR & 128) {
                LFSR = LFSR << 1 ^ 113;
              } else {
                LFSR <<= 1;
              }
            }
            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
          }
        })();
        var T4 = [];
        (function() {
          for (var i = 0; i < 25; i++) {
            T4[i] = X64Word.create();
          }
        })();
        var SHA3 = C_algo.SHA3 = Hasher.extend({
          /**
           * Configuration options.
           *
           * @property {number} outputLength
           *   The desired number of bits in the output hash.
           *   Only values permitted are: 224, 256, 384, 512.
           *   Default: 512
           */
          cfg: Hasher.cfg.extend({
            outputLength: 512
          }),
          _doReset: function() {
            var state = this._state = [];
            for (var i = 0; i < 25; i++) {
              state[i] = new X64Word.init();
            }
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          },
          _doProcessBlock: function(M4, offset) {
            var state = this._state;
            var nBlockSizeLanes = this.blockSize / 2;
            for (var i = 0; i < nBlockSizeLanes; i++) {
              var M2i = M4[offset + 2 * i];
              var M2i1 = M4[offset + 2 * i + 1];
              M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
              M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
              var lane = state[i];
              lane.high ^= M2i1;
              lane.low ^= M2i;
            }
            for (var round = 0; round < 24; round++) {
              for (var x4 = 0; x4 < 5; x4++) {
                var tMsw = 0, tLsw = 0;
                for (var y2 = 0; y2 < 5; y2++) {
                  var lane = state[x4 + 5 * y2];
                  tMsw ^= lane.high;
                  tLsw ^= lane.low;
                }
                var Tx = T4[x4];
                Tx.high = tMsw;
                Tx.low = tLsw;
              }
              for (var x4 = 0; x4 < 5; x4++) {
                var Tx4 = T4[(x4 + 4) % 5];
                var Tx1 = T4[(x4 + 1) % 5];
                var Tx1Msw = Tx1.high;
                var Tx1Lsw = Tx1.low;
                var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                for (var y2 = 0; y2 < 5; y2++) {
                  var lane = state[x4 + 5 * y2];
                  lane.high ^= tMsw;
                  lane.low ^= tLsw;
                }
              }
              for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                var tMsw;
                var tLsw;
                var lane = state[laneIndex];
                var laneMsw = lane.high;
                var laneLsw = lane.low;
                var rhoOffset = RHO_OFFSETS[laneIndex];
                if (rhoOffset < 32) {
                  tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                  tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                } else {
                  tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                  tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                }
                var TPiLane = T4[PI_INDEXES[laneIndex]];
                TPiLane.high = tMsw;
                TPiLane.low = tLsw;
              }
              var T0 = T4[0];
              var state0 = state[0];
              T0.high = state0.high;
              T0.low = state0.low;
              for (var x4 = 0; x4 < 5; x4++) {
                for (var y2 = 0; y2 < 5; y2++) {
                  var laneIndex = x4 + 5 * y2;
                  var lane = state[laneIndex];
                  var TLane = T4[laneIndex];
                  var Tx1Lane = T4[(x4 + 1) % 5 + 5 * y2];
                  var Tx2Lane = T4[(x4 + 2) % 5 + 5 * y2];
                  lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                  lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                }
              }
              var lane = state[0];
              var roundConstant = ROUND_CONSTANTS[round];
              lane.high ^= roundConstant.high;
              lane.low ^= roundConstant.low;
            }
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            var blockSizeBits = this.blockSize * 32;
            dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
            dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var state = this._state;
            var outputLengthBytes = this.cfg.outputLength / 8;
            var outputLengthLanes = outputLengthBytes / 8;
            var hashWords = [];
            for (var i = 0; i < outputLengthLanes; i++) {
              var lane = state[i];
              var laneMsw = lane.high;
              var laneLsw = lane.low;
              laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
              laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
              hashWords.push(laneLsw);
              hashWords.push(laneMsw);
            }
            return new WordArray.init(hashWords, outputLengthBytes);
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            var state = clone._state = this._state.slice(0);
            for (var i = 0; i < 25; i++) {
              state[i] = state[i].clone();
            }
            return clone;
          }
        });
        C3.SHA3 = Hasher._createHelper(SHA3);
        C3.HmacSHA3 = Hasher._createHmacHelper(SHA3);
      })(Math);
      return CryptoJS3.SHA3;
    });
  }
});

// node_modules/crypto-js/ripemd160.js
var require_ripemd160 = __commonJS({
  "node_modules/crypto-js/ripemd160.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function(Math2) {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C3.algo;
        var _zl = WordArray.create([
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ]);
        var _zr = WordArray.create([
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ]);
        var _sl = WordArray.create([
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ]);
        var _sr = WordArray.create([
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ]);
        var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
        var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
        var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
          _doReset: function() {
            this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          },
          _doProcessBlock: function(M4, offset) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M4[offset_i];
              M4[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H2 = this._hash.words;
            var hl = _hl.words;
            var hr2 = _hr.words;
            var zl = _zl.words;
            var zr2 = _zr.words;
            var sl = _sl.words;
            var sr2 = _sr.words;
            var al, bl, cl, dl, el2;
            var ar2, br4, cr2, dr2, er2;
            ar2 = al = H2[0];
            br4 = bl = H2[1];
            cr2 = cl = H2[2];
            dr2 = dl = H2[3];
            er2 = el2 = H2[4];
            var t;
            for (var i = 0; i < 80; i += 1) {
              t = al + M4[offset + zl[i]] | 0;
              if (i < 16) {
                t += f1(bl, cl, dl) + hl[0];
              } else if (i < 32) {
                t += f2(bl, cl, dl) + hl[1];
              } else if (i < 48) {
                t += f3(bl, cl, dl) + hl[2];
              } else if (i < 64) {
                t += f4(bl, cl, dl) + hl[3];
              } else {
                t += f5(bl, cl, dl) + hl[4];
              }
              t = t | 0;
              t = rotl(t, sl[i]);
              t = t + el2 | 0;
              al = el2;
              el2 = dl;
              dl = rotl(cl, 10);
              cl = bl;
              bl = t;
              t = ar2 + M4[offset + zr2[i]] | 0;
              if (i < 16) {
                t += f5(br4, cr2, dr2) + hr2[0];
              } else if (i < 32) {
                t += f4(br4, cr2, dr2) + hr2[1];
              } else if (i < 48) {
                t += f3(br4, cr2, dr2) + hr2[2];
              } else if (i < 64) {
                t += f2(br4, cr2, dr2) + hr2[3];
              } else {
                t += f1(br4, cr2, dr2) + hr2[4];
              }
              t = t | 0;
              t = rotl(t, sr2[i]);
              t = t + er2 | 0;
              ar2 = er2;
              er2 = dr2;
              dr2 = rotl(cr2, 10);
              cr2 = br4;
              br4 = t;
            }
            t = H2[1] + cl + dr2 | 0;
            H2[1] = H2[2] + dl + er2 | 0;
            H2[2] = H2[3] + el2 + ar2 | 0;
            H2[3] = H2[4] + al + br4 | 0;
            H2[4] = H2[0] + bl + cr2 | 0;
            H2[0] = t;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H2 = hash.words;
            for (var i = 0; i < 5; i++) {
              var H_i = H2[i];
              H2[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function f1(x4, y2, z5) {
          return x4 ^ y2 ^ z5;
        }
        function f2(x4, y2, z5) {
          return x4 & y2 | ~x4 & z5;
        }
        function f3(x4, y2, z5) {
          return (x4 | ~y2) ^ z5;
        }
        function f4(x4, y2, z5) {
          return x4 & z5 | y2 & ~z5;
        }
        function f5(x4, y2, z5) {
          return x4 ^ (y2 | ~z5);
        }
        function rotl(x4, n) {
          return x4 << n | x4 >>> 32 - n;
        }
        C3.RIPEMD160 = Hasher._createHelper(RIPEMD160);
        C3.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
      })(Math);
      return CryptoJS3.RIPEMD160;
    });
  }
});

// node_modules/crypto-js/hmac.js
var require_hmac = __commonJS({
  "node_modules/crypto-js/hmac.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function() {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var Base = C_lib.Base;
        var C_enc = C3.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C3.algo;
        var HMAC = C_algo.HMAC = Base.extend({
          /**
           * Initializes a newly created HMAC.
           *
           * @param {Hasher} hasher The hash algorithm to use.
           * @param {WordArray|string} key The secret key.
           *
           * @example
           *
           *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
           */
          init: function(hasher, key) {
            hasher = this._hasher = new hasher.init();
            if (typeof key == "string") {
              key = Utf8.parse(key);
            }
            var hasherBlockSize = hasher.blockSize;
            var hasherBlockSizeBytes = hasherBlockSize * 4;
            if (key.sigBytes > hasherBlockSizeBytes) {
              key = hasher.finalize(key);
            }
            key.clamp();
            var oKey = this._oKey = key.clone();
            var iKey = this._iKey = key.clone();
            var oKeyWords = oKey.words;
            var iKeyWords = iKey.words;
            for (var i = 0; i < hasherBlockSize; i++) {
              oKeyWords[i] ^= 1549556828;
              iKeyWords[i] ^= 909522486;
            }
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
            this.reset();
          },
          /**
           * Resets this HMAC to its initial state.
           *
           * @example
           *
           *     hmacHasher.reset();
           */
          reset: function() {
            var hasher = this._hasher;
            hasher.reset();
            hasher.update(this._iKey);
          },
          /**
           * Updates this HMAC with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {HMAC} This HMAC instance.
           *
           * @example
           *
           *     hmacHasher.update('message');
           *     hmacHasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._hasher.update(messageUpdate);
            return this;
          },
          /**
           * Finalizes the HMAC computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The HMAC.
           *
           * @example
           *
           *     var hmac = hmacHasher.finalize();
           *     var hmac = hmacHasher.finalize('message');
           *     var hmac = hmacHasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            var hasher = this._hasher;
            var innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
            return hmac;
          }
        });
      })();
    });
  }
});

// node_modules/crypto-js/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "node_modules/crypto-js/pbkdf2.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_sha256(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function() {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C3.algo;
        var SHA256 = C_algo.SHA256;
        var HMAC = C_algo.HMAC;
        var PBKDF2 = C_algo.PBKDF2 = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hasher to use. Default: SHA256
           * @property {number} iterations The number of iterations to perform. Default: 250000
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: SHA256,
            iterations: 25e4
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.PBKDF2.create();
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Computes the Password-Based Key Derivation Function 2.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var cfg = this.cfg;
            var hmac = HMAC.create(cfg.hasher, password);
            var derivedKey = WordArray.create();
            var blockIndex = WordArray.create([1]);
            var derivedKeyWords = derivedKey.words;
            var blockIndexWords = blockIndex.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              var block = hmac.update(salt).finalize(blockIndex);
              hmac.reset();
              var blockWords = block.words;
              var blockWordsLength = blockWords.length;
              var intermediate = block;
              for (var i = 1; i < iterations; i++) {
                intermediate = hmac.finalize(intermediate);
                hmac.reset();
                var intermediateWords = intermediate.words;
                for (var j2 = 0; j2 < blockWordsLength; j2++) {
                  blockWords[j2] ^= intermediateWords[j2];
                }
              }
              derivedKey.concat(block);
              blockIndexWords[0]++;
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C3.PBKDF2 = function(password, salt, cfg) {
          return PBKDF2.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS3.PBKDF2;
    });
  }
});

// node_modules/crypto-js/evpkdf.js
var require_evpkdf = __commonJS({
  "node_modules/crypto-js/evpkdf.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_sha1(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function() {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C3.algo;
        var MD5 = C_algo.MD5;
        var EvpKDF = C_algo.EvpKDF = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hash algorithm to use. Default: MD5
           * @property {number} iterations The number of iterations to perform. Default: 1
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: MD5,
            iterations: 1
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.EvpKDF.create();
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Derives a key from a password.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var block;
            var cfg = this.cfg;
            var hasher = cfg.hasher.create();
            var derivedKey = WordArray.create();
            var derivedKeyWords = derivedKey.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              if (block) {
                hasher.update(block);
              }
              block = hasher.update(password).finalize(salt);
              hasher.reset();
              for (var i = 1; i < iterations; i++) {
                block = hasher.finalize(block);
                hasher.reset();
              }
              derivedKey.concat(block);
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C3.EvpKDF = function(password, salt, cfg) {
          return EvpKDF.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS3.EvpKDF;
    });
  }
});

// node_modules/crypto-js/cipher-core.js
var require_cipher_core = __commonJS({
  "node_modules/crypto-js/cipher-core.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_evpkdf());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./evpkdf"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      CryptoJS3.lib.Cipher || function(undefined2) {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C3.enc;
        var Utf8 = C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C3.algo;
        var EvpKDF = C_algo.EvpKDF;
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           *
           * @property {WordArray} iv The IV to use for this operation.
           */
          cfg: Base.extend(),
          /**
           * Creates this cipher in encryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
           */
          createEncryptor: function(key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
          },
          /**
           * Creates this cipher in decryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
           */
          createDecryptor: function(key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
          },
          /**
           * Initializes a newly created cipher.
           *
           * @param {number} xformMode Either the encryption or decryption transormation mode constant.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
           */
          init: function(xformMode, key, cfg) {
            this.cfg = this.cfg.extend(cfg);
            this._xformMode = xformMode;
            this._key = key;
            this.reset();
          },
          /**
           * Resets this cipher to its initial state.
           *
           * @example
           *
           *     cipher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Adds data to be encrypted or decrypted.
           *
           * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
           *
           * @return {WordArray} The data after processing.
           *
           * @example
           *
           *     var encrypted = cipher.process('data');
           *     var encrypted = cipher.process(wordArray);
           */
          process: function(dataUpdate) {
            this._append(dataUpdate);
            return this._process();
          },
          /**
           * Finalizes the encryption or decryption process.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
           *
           * @return {WordArray} The data after final processing.
           *
           * @example
           *
           *     var encrypted = cipher.finalize();
           *     var encrypted = cipher.finalize('data');
           *     var encrypted = cipher.finalize(wordArray);
           */
          finalize: function(dataUpdate) {
            if (dataUpdate) {
              this._append(dataUpdate);
            }
            var finalProcessedData = this._doFinalize();
            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          /**
           * Creates shortcut functions to a cipher's object interface.
           *
           * @param {Cipher} cipher The cipher to create a helper for.
           *
           * @return {Object} An object with encrypt and decrypt shortcut functions.
           *
           * @static
           *
           * @example
           *
           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
           */
          _createHelper: /* @__PURE__ */ function() {
            function selectCipherStrategy(key) {
              if (typeof key == "string") {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }
            return function(cipher) {
              return {
                encrypt: function(message2, key, cfg) {
                  return selectCipherStrategy(key).encrypt(cipher, message2, key, cfg);
                },
                decrypt: function(ciphertext, key, cfg) {
                  return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                }
              };
            };
          }()
        });
        var StreamCipher = C_lib.StreamCipher = Cipher.extend({
          _doFinalize: function() {
            var finalProcessedBlocks = this._process(true);
            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        var C_mode = C3.mode = {};
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          /**
           * Creates this mode for encryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
           */
          createEncryptor: function(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },
          /**
           * Creates this mode for decryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
           */
          createDecryptor: function(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },
          /**
           * Initializes a newly created mode.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
           */
          init: function(cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        var CBC = C_mode.CBC = function() {
          var CBC2 = BlockCipherMode.extend();
          CBC2.Encryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              xorBlock.call(this, words, offset, blockSize);
              cipher.encryptBlock(words, offset);
              this._prevBlock = words.slice(offset, offset + blockSize);
            }
          });
          CBC2.Decryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words.slice(offset, offset + blockSize);
              cipher.decryptBlock(words, offset);
              xorBlock.call(this, words, offset, blockSize);
              this._prevBlock = thisBlock;
            }
          });
          function xorBlock(words, offset, blockSize) {
            var block;
            var iv = this._iv;
            if (iv) {
              block = iv;
              this._iv = undefined2;
            } else {
              block = this._prevBlock;
            }
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= block[i];
            }
          }
          return CBC2;
        }();
        var C_pad = C3.pad = {};
        var Pkcs7 = C_pad.Pkcs7 = {
          /**
           * Pads data using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to pad.
           * @param {number} blockSize The multiple that the data should be padded to.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
           */
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
            var paddingWords = [];
            for (var i = 0; i < nPaddingBytes; i += 4) {
              paddingWords.push(paddingWord);
            }
            var padding = WordArray.create(paddingWords, nPaddingBytes);
            data.concat(padding);
          },
          /**
           * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to unpad.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.unpad(wordArray);
           */
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        var BlockCipher = C_lib.BlockCipher = Cipher.extend({
          /**
           * Configuration options.
           *
           * @property {Mode} mode The block mode to use. Default: CBC
           * @property {Padding} padding The padding strategy to use. Default: Pkcs7
           */
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function() {
            var modeCreator;
            Cipher.reset.call(this);
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              modeCreator = mode.createEncryptor;
            } else {
              modeCreator = mode.createDecryptor;
              this._minBufferSize = 1;
            }
            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function(words, offset) {
            this._mode.processBlock(words, offset);
          },
          _doFinalize: function() {
            var finalProcessedBlocks;
            var padding = this.cfg.padding;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              padding.pad(this._data, this.blockSize);
              finalProcessedBlocks = this._process(true);
            } else {
              finalProcessedBlocks = this._process(true);
              padding.unpad(finalProcessedBlocks);
            }
            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        var CipherParams = C_lib.CipherParams = Base.extend({
          /**
           * Initializes a newly created cipher params object.
           *
           * @param {Object} cipherParams An object with any of the possible cipher parameters.
           *
           * @example
           *
           *     var cipherParams = CryptoJS.lib.CipherParams.create({
           *         ciphertext: ciphertextWordArray,
           *         key: keyWordArray,
           *         iv: ivWordArray,
           *         salt: saltWordArray,
           *         algorithm: CryptoJS.algo.AES,
           *         mode: CryptoJS.mode.CBC,
           *         padding: CryptoJS.pad.PKCS7,
           *         blockSize: 4,
           *         formatter: CryptoJS.format.OpenSSL
           *     });
           */
          init: function(cipherParams) {
            this.mixIn(cipherParams);
          },
          /**
           * Converts this cipher params object to a string.
           *
           * @param {Format} formatter (Optional) The formatting strategy to use.
           *
           * @return {string} The stringified cipher params.
           *
           * @throws Error If neither the formatter nor the default formatter is set.
           *
           * @example
           *
           *     var string = cipherParams + '';
           *     var string = cipherParams.toString();
           *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
           */
          toString: function(formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        var C_format = C3.format = {};
        var OpenSSLFormatter = C_format.OpenSSL = {
          /**
           * Converts a cipher params object to an OpenSSL-compatible string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The OpenSSL-compatible string.
           *
           * @static
           *
           * @example
           *
           *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            var wordArray;
            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt;
            if (salt) {
              wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }
            return wordArray.toString(Base64);
          },
          /**
           * Converts an OpenSSL-compatible string to a cipher params object.
           *
           * @param {string} openSSLStr The OpenSSL-compatible string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
           */
          parse: function(openSSLStr) {
            var salt;
            var ciphertext = Base64.parse(openSSLStr);
            var ciphertextWords = ciphertext.words;
            if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
              salt = WordArray.create(ciphertextWords.slice(2, 4));
              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }
            return CipherParams.create({ ciphertext, salt });
          }
        };
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          /**
           * Configuration options.
           *
           * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
           */
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),
          /**
           * Encrypts a message.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message2, key, cfg) {
            cfg = this.cfg.extend(cfg);
            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message2);
            var cipherCfg = encryptor.cfg;
            return CipherParams.create({
              ciphertext,
              key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },
          /**
           * Decrypts serialized ciphertext.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, key, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },
          /**
           * Converts serialized ciphertext to CipherParams,
           * else assumed CipherParams already and returns ciphertext unchanged.
           *
           * @param {CipherParams|string} ciphertext The ciphertext.
           * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
           *
           * @return {CipherParams} The unserialized ciphertext.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
           */
          _parse: function(ciphertext, format) {
            if (typeof ciphertext == "string") {
              return format.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        var C_kdf = C3.kdf = {};
        var OpenSSLKdf = C_kdf.OpenSSL = {
          /**
           * Derives a key and IV from a password.
           *
           * @param {string} password The password to derive from.
           * @param {number} keySize The size in words of the key to generate.
           * @param {number} ivSize The size in words of the IV to generate.
           * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
           *
           * @return {CipherParams} A cipher params object with the key, IV, and salt.
           *
           * @static
           *
           * @example
           *
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
           */
          execute: function(password, keySize, ivSize, salt, hasher) {
            if (!salt) {
              salt = WordArray.random(64 / 8);
            }
            if (!hasher) {
              var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
            } else {
              var key = EvpKDF.create({ keySize: keySize + ivSize, hasher }).compute(password, salt);
            }
            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4;
            return CipherParams.create({ key, iv, salt });
          }
        };
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          /**
           * Configuration options.
           *
           * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
           */
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),
          /**
           * Encrypts a message using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message2, password, cfg) {
            cfg = this.cfg.extend(cfg);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);
            cfg.iv = derivedParams.iv;
            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message2, derivedParams.key, cfg);
            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },
          /**
           * Decrypts serialized ciphertext using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, password, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);
            cfg.iv = derivedParams.iv;
            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();
    });
  }
});

// node_modules/crypto-js/mode-cfb.js
var require_mode_cfb = __commonJS({
  "node_modules/crypto-js/mode-cfb.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      CryptoJS3.mode.CFB = function() {
        var CFB = CryptoJS3.lib.BlockCipherMode.extend();
        CFB.Encryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = words.slice(offset, offset + blockSize);
          }
        });
        CFB.Decryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var thisBlock = words.slice(offset, offset + blockSize);
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = thisBlock;
          }
        });
        function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
          var keystream;
          var iv = this._iv;
          if (iv) {
            keystream = iv.slice(0);
            this._iv = void 0;
          } else {
            keystream = this._prevBlock;
          }
          cipher.encryptBlock(keystream, 0);
          for (var i = 0; i < blockSize; i++) {
            words[offset + i] ^= keystream[i];
          }
        }
        return CFB;
      }();
      return CryptoJS3.mode.CFB;
    });
  }
});

// node_modules/crypto-js/mode-ctr.js
var require_mode_ctr = __commonJS({
  "node_modules/crypto-js/mode-ctr.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      CryptoJS3.mode.CTR = function() {
        var CTR = CryptoJS3.lib.BlockCipherMode.extend();
        var Encryptor = CTR.Encryptor = CTR.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        CTR.Decryptor = Encryptor;
        return CTR;
      }();
      return CryptoJS3.mode.CTR;
    });
  }
});

// node_modules/crypto-js/mode-ctr-gladman.js
var require_mode_ctr_gladman = __commonJS({
  "node_modules/crypto-js/mode-ctr-gladman.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      CryptoJS3.mode.CTRGladman = function() {
        var CTRGladman = CryptoJS3.lib.BlockCipherMode.extend();
        function incWord(word) {
          if ((word >> 24 & 255) === 255) {
            var b1 = word >> 16 & 255;
            var b2 = word >> 8 & 255;
            var b3 = word & 255;
            if (b1 === 255) {
              b1 = 0;
              if (b2 === 255) {
                b2 = 0;
                if (b3 === 255) {
                  b3 = 0;
                } else {
                  ++b3;
                }
              } else {
                ++b2;
              }
            } else {
              ++b1;
            }
            word = 0;
            word += b1 << 16;
            word += b2 << 8;
            word += b3;
          } else {
            word += 1 << 24;
          }
          return word;
        }
        function incCounter(counter) {
          if ((counter[0] = incWord(counter[0])) === 0) {
            counter[1] = incWord(counter[1]);
          }
          return counter;
        }
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            incCounter(counter);
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        CTRGladman.Decryptor = Encryptor;
        return CTRGladman;
      }();
      return CryptoJS3.mode.CTRGladman;
    });
  }
});

// node_modules/crypto-js/mode-ofb.js
var require_mode_ofb = __commonJS({
  "node_modules/crypto-js/mode-ofb.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      CryptoJS3.mode.OFB = function() {
        var OFB = CryptoJS3.lib.BlockCipherMode.extend();
        var Encryptor = OFB.Encryptor = OFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var keystream = this._keystream;
            if (iv) {
              keystream = this._keystream = iv.slice(0);
              this._iv = void 0;
            }
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        OFB.Decryptor = Encryptor;
        return OFB;
      }();
      return CryptoJS3.mode.OFB;
    });
  }
});

// node_modules/crypto-js/mode-ecb.js
var require_mode_ecb = __commonJS({
  "node_modules/crypto-js/mode-ecb.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      CryptoJS3.mode.ECB = function() {
        var ECB = CryptoJS3.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.encryptBlock(words, offset);
          }
        });
        ECB.Decryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.decryptBlock(words, offset);
          }
        });
        return ECB;
      }();
      return CryptoJS3.mode.ECB;
    });
  }
});

// node_modules/crypto-js/pad-ansix923.js
var require_pad_ansix923 = __commonJS({
  "node_modules/crypto-js/pad-ansix923.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      CryptoJS3.pad.AnsiX923 = {
        pad: function(data, blockSize) {
          var dataSigBytes = data.sigBytes;
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
          var lastBytePos = dataSigBytes + nPaddingBytes - 1;
          data.clamp();
          data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
          data.sigBytes += nPaddingBytes;
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS3.pad.Ansix923;
    });
  }
});

// node_modules/crypto-js/pad-iso10126.js
var require_pad_iso10126 = __commonJS({
  "node_modules/crypto-js/pad-iso10126.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      CryptoJS3.pad.Iso10126 = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
          data.concat(CryptoJS3.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS3.lib.WordArray.create([nPaddingBytes << 24], 1));
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS3.pad.Iso10126;
    });
  }
});

// node_modules/crypto-js/pad-iso97971.js
var require_pad_iso97971 = __commonJS({
  "node_modules/crypto-js/pad-iso97971.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      CryptoJS3.pad.Iso97971 = {
        pad: function(data, blockSize) {
          data.concat(CryptoJS3.lib.WordArray.create([2147483648], 1));
          CryptoJS3.pad.ZeroPadding.pad(data, blockSize);
        },
        unpad: function(data) {
          CryptoJS3.pad.ZeroPadding.unpad(data);
          data.sigBytes--;
        }
      };
      return CryptoJS3.pad.Iso97971;
    });
  }
});

// node_modules/crypto-js/pad-zeropadding.js
var require_pad_zeropadding = __commonJS({
  "node_modules/crypto-js/pad-zeropadding.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      CryptoJS3.pad.ZeroPadding = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          data.clamp();
          data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
        },
        unpad: function(data) {
          var dataWords = data.words;
          var i = data.sigBytes - 1;
          for (var i = data.sigBytes - 1; i >= 0; i--) {
            if (dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 255) {
              data.sigBytes = i + 1;
              break;
            }
          }
        }
      };
      return CryptoJS3.pad.ZeroPadding;
    });
  }
});

// node_modules/crypto-js/pad-nopadding.js
var require_pad_nopadding = __commonJS({
  "node_modules/crypto-js/pad-nopadding.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      CryptoJS3.pad.NoPadding = {
        pad: function() {
        },
        unpad: function() {
        }
      };
      return CryptoJS3.pad.NoPadding;
    });
  }
});

// node_modules/crypto-js/format-hex.js
var require_format_hex = __commonJS({
  "node_modules/crypto-js/format-hex.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function(undefined2) {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var CipherParams = C_lib.CipherParams;
        var C_enc = C3.enc;
        var Hex = C_enc.Hex;
        var C_format = C3.format;
        var HexFormatter = C_format.Hex = {
          /**
           * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The hexadecimally encoded string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            return cipherParams.ciphertext.toString(Hex);
          },
          /**
           * Converts a hexadecimally encoded ciphertext string to a cipher params object.
           *
           * @param {string} input The hexadecimally encoded string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
           */
          parse: function(input) {
            var ciphertext = Hex.parse(input);
            return CipherParams.create({ ciphertext });
          }
        };
      })();
      return CryptoJS3.format.Hex;
    });
  }
});

// node_modules/crypto-js/aes.js
var require_aes = __commonJS({
  "node_modules/crypto-js/aes.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function() {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C3.algo;
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        (function() {
          var d2 = [];
          for (var i = 0; i < 256; i++) {
            if (i < 128) {
              d2[i] = i << 1;
            } else {
              d2[i] = i << 1 ^ 283;
            }
          }
          var x4 = 0;
          var xi = 0;
          for (var i = 0; i < 256; i++) {
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ sx & 255 ^ 99;
            SBOX[x4] = sx;
            INV_SBOX[sx] = x4;
            var x22 = d2[x4];
            var x42 = d2[x22];
            var x8 = d2[x42];
            var t = d2[sx] * 257 ^ sx * 16843008;
            SUB_MIX_0[x4] = t << 24 | t >>> 8;
            SUB_MIX_1[x4] = t << 16 | t >>> 16;
            SUB_MIX_2[x4] = t << 8 | t >>> 24;
            SUB_MIX_3[x4] = t;
            var t = x8 * 16843009 ^ x42 * 65537 ^ x22 * 257 ^ x4 * 16843008;
            INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
            INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
            INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
            INV_SUB_MIX_3[sx] = t;
            if (!x4) {
              x4 = xi = 1;
            } else {
              x4 = x22 ^ d2[d2[d2[x8 ^ x22]]];
              xi ^= d2[d2[xi]];
            }
          }
        })();
        var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var AES = C_algo.AES = BlockCipher.extend({
          _doReset: function() {
            var t;
            if (this._nRounds && this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            var nRounds = this._nRounds = keySize + 6;
            var ksRows = (nRounds + 1) * 4;
            var keySchedule = this._keySchedule = [];
            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                keySchedule[ksRow] = keyWords[ksRow];
              } else {
                t = keySchedule[ksRow - 1];
                if (!(ksRow % keySize)) {
                  t = t << 8 | t >>> 24;
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                  t ^= RCON[ksRow / keySize | 0] << 24;
                } else if (keySize > 6 && ksRow % keySize == 4) {
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                }
                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
              }
            }
            var invKeySchedule = this._invKeySchedule = [];
            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              var ksRow = ksRows - invKsRow;
              if (invKsRow % 4) {
                var t = keySchedule[ksRow];
              } else {
                var t = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t;
              } else {
                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t & 255]];
              }
            }
          },
          encryptBlock: function(M4, offset) {
            this._doCryptBlock(M4, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function(M4, offset) {
            var t = M4[offset + 1];
            M4[offset + 1] = M4[offset + 3];
            M4[offset + 3] = t;
            this._doCryptBlock(M4, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
            var t = M4[offset + 1];
            M4[offset + 1] = M4[offset + 3];
            M4[offset + 3] = t;
          },
          _doCryptBlock: function(M4, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
            var nRounds = this._nRounds;
            var s0 = M4[offset] ^ keySchedule[0];
            var s1 = M4[offset + 1] ^ keySchedule[1];
            var s2 = M4[offset + 2] ^ keySchedule[2];
            var s3 = M4[offset + 3] ^ keySchedule[3];
            var ksRow = 4;
            for (var round = 1; round < nRounds; round++) {
              var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
              var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
              var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
              var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
              s0 = t0;
              s1 = t1;
              s2 = t2;
              s3 = t3;
            }
            var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
            var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
            var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
            var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
            M4[offset] = t0;
            M4[offset + 1] = t1;
            M4[offset + 2] = t2;
            M4[offset + 3] = t3;
          },
          keySize: 256 / 32
        });
        C3.AES = BlockCipher._createHelper(AES);
      })();
      return CryptoJS3.AES;
    });
  }
});

// node_modules/crypto-js/tripledes.js
var require_tripledes = __commonJS({
  "node_modules/crypto-js/tripledes.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function() {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C3.algo;
        var PC1 = [
          57,
          49,
          41,
          33,
          25,
          17,
          9,
          1,
          58,
          50,
          42,
          34,
          26,
          18,
          10,
          2,
          59,
          51,
          43,
          35,
          27,
          19,
          11,
          3,
          60,
          52,
          44,
          36,
          63,
          55,
          47,
          39,
          31,
          23,
          15,
          7,
          62,
          54,
          46,
          38,
          30,
          22,
          14,
          6,
          61,
          53,
          45,
          37,
          29,
          21,
          13,
          5,
          28,
          20,
          12,
          4
        ];
        var PC2 = [
          14,
          17,
          11,
          24,
          1,
          5,
          3,
          28,
          15,
          6,
          21,
          10,
          23,
          19,
          12,
          4,
          26,
          8,
          16,
          7,
          27,
          20,
          13,
          2,
          41,
          52,
          31,
          37,
          47,
          55,
          30,
          40,
          51,
          45,
          33,
          48,
          44,
          49,
          39,
          56,
          34,
          53,
          46,
          42,
          50,
          36,
          29,
          32
        ];
        var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
        var SBOX_P = [
          {
            0: 8421888,
            268435456: 32768,
            536870912: 8421378,
            805306368: 2,
            1073741824: 512,
            1342177280: 8421890,
            1610612736: 8389122,
            1879048192: 8388608,
            2147483648: 514,
            2415919104: 8389120,
            2684354560: 33280,
            2952790016: 8421376,
            3221225472: 32770,
            3489660928: 8388610,
            3758096384: 0,
            4026531840: 33282,
            134217728: 0,
            402653184: 8421890,
            671088640: 33282,
            939524096: 32768,
            1207959552: 8421888,
            1476395008: 512,
            1744830464: 8421378,
            2013265920: 2,
            2281701376: 8389120,
            2550136832: 33280,
            2818572288: 8421376,
            3087007744: 8389122,
            3355443200: 8388610,
            3623878656: 32770,
            3892314112: 514,
            4160749568: 8388608,
            1: 32768,
            268435457: 2,
            536870913: 8421888,
            805306369: 8388608,
            1073741825: 8421378,
            1342177281: 33280,
            1610612737: 512,
            1879048193: 8389122,
            2147483649: 8421890,
            2415919105: 8421376,
            2684354561: 8388610,
            2952790017: 33282,
            3221225473: 514,
            3489660929: 8389120,
            3758096385: 32770,
            4026531841: 0,
            134217729: 8421890,
            402653185: 8421376,
            671088641: 8388608,
            939524097: 512,
            1207959553: 32768,
            1476395009: 8388610,
            1744830465: 2,
            2013265921: 33282,
            2281701377: 32770,
            2550136833: 8389122,
            2818572289: 514,
            3087007745: 8421888,
            3355443201: 8389120,
            3623878657: 0,
            3892314113: 33280,
            4160749569: 8421378
          },
          {
            0: 1074282512,
            16777216: 16384,
            33554432: 524288,
            50331648: 1074266128,
            67108864: 1073741840,
            83886080: 1074282496,
            100663296: 1073758208,
            117440512: 16,
            134217728: 540672,
            150994944: 1073758224,
            167772160: 1073741824,
            184549376: 540688,
            201326592: 524304,
            218103808: 0,
            234881024: 16400,
            251658240: 1074266112,
            8388608: 1073758208,
            25165824: 540688,
            41943040: 16,
            58720256: 1073758224,
            75497472: 1074282512,
            92274688: 1073741824,
            109051904: 524288,
            125829120: 1074266128,
            142606336: 524304,
            159383552: 0,
            176160768: 16384,
            192937984: 1074266112,
            209715200: 1073741840,
            226492416: 540672,
            243269632: 1074282496,
            260046848: 16400,
            268435456: 0,
            285212672: 1074266128,
            301989888: 1073758224,
            318767104: 1074282496,
            335544320: 1074266112,
            352321536: 16,
            369098752: 540688,
            385875968: 16384,
            402653184: 16400,
            419430400: 524288,
            436207616: 524304,
            452984832: 1073741840,
            469762048: 540672,
            486539264: 1073758208,
            503316480: 1073741824,
            520093696: 1074282512,
            276824064: 540688,
            293601280: 524288,
            310378496: 1074266112,
            327155712: 16384,
            343932928: 1073758208,
            360710144: 1074282512,
            377487360: 16,
            394264576: 1073741824,
            411041792: 1074282496,
            427819008: 1073741840,
            444596224: 1073758224,
            461373440: 524304,
            478150656: 0,
            494927872: 16400,
            511705088: 1074266128,
            528482304: 540672
          },
          {
            0: 260,
            1048576: 0,
            2097152: 67109120,
            3145728: 65796,
            4194304: 65540,
            5242880: 67108868,
            6291456: 67174660,
            7340032: 67174400,
            8388608: 67108864,
            9437184: 67174656,
            10485760: 65792,
            11534336: 67174404,
            12582912: 67109124,
            13631488: 65536,
            14680064: 4,
            15728640: 256,
            524288: 67174656,
            1572864: 67174404,
            2621440: 0,
            3670016: 67109120,
            4718592: 67108868,
            5767168: 65536,
            6815744: 65540,
            7864320: 260,
            8912896: 4,
            9961472: 256,
            11010048: 67174400,
            12058624: 65796,
            13107200: 65792,
            14155776: 67109124,
            15204352: 67174660,
            16252928: 67108864,
            16777216: 67174656,
            17825792: 65540,
            18874368: 65536,
            19922944: 67109120,
            20971520: 256,
            22020096: 67174660,
            23068672: 67108868,
            24117248: 0,
            25165824: 67109124,
            26214400: 67108864,
            27262976: 4,
            28311552: 65792,
            29360128: 67174400,
            30408704: 260,
            31457280: 65796,
            32505856: 67174404,
            17301504: 67108864,
            18350080: 260,
            19398656: 67174656,
            20447232: 0,
            21495808: 65540,
            22544384: 67109120,
            23592960: 256,
            24641536: 67174404,
            25690112: 65536,
            26738688: 67174660,
            27787264: 65796,
            28835840: 67108868,
            29884416: 67109124,
            30932992: 67174400,
            31981568: 4,
            33030144: 65792
          },
          {
            0: 2151682048,
            65536: 2147487808,
            131072: 4198464,
            196608: 2151677952,
            262144: 0,
            327680: 4198400,
            393216: 2147483712,
            458752: 4194368,
            524288: 2147483648,
            589824: 4194304,
            655360: 64,
            720896: 2147487744,
            786432: 2151678016,
            851968: 4160,
            917504: 4096,
            983040: 2151682112,
            32768: 2147487808,
            98304: 64,
            163840: 2151678016,
            229376: 2147487744,
            294912: 4198400,
            360448: 2151682112,
            425984: 0,
            491520: 2151677952,
            557056: 4096,
            622592: 2151682048,
            688128: 4194304,
            753664: 4160,
            819200: 2147483648,
            884736: 4194368,
            950272: 4198464,
            1015808: 2147483712,
            1048576: 4194368,
            1114112: 4198400,
            1179648: 2147483712,
            1245184: 0,
            1310720: 4160,
            1376256: 2151678016,
            1441792: 2151682048,
            1507328: 2147487808,
            1572864: 2151682112,
            1638400: 2147483648,
            1703936: 2151677952,
            1769472: 4198464,
            1835008: 2147487744,
            1900544: 4194304,
            1966080: 64,
            2031616: 4096,
            1081344: 2151677952,
            1146880: 2151682112,
            1212416: 0,
            1277952: 4198400,
            1343488: 4194368,
            1409024: 2147483648,
            1474560: 2147487808,
            1540096: 64,
            1605632: 2147483712,
            1671168: 4096,
            1736704: 2147487744,
            1802240: 2151678016,
            1867776: 4160,
            1933312: 2151682048,
            1998848: 4194304,
            2064384: 4198464
          },
          {
            0: 128,
            4096: 17039360,
            8192: 262144,
            12288: 536870912,
            16384: 537133184,
            20480: 16777344,
            24576: 553648256,
            28672: 262272,
            32768: 16777216,
            36864: 537133056,
            40960: 536871040,
            45056: 553910400,
            49152: 553910272,
            53248: 0,
            57344: 17039488,
            61440: 553648128,
            2048: 17039488,
            6144: 553648256,
            10240: 128,
            14336: 17039360,
            18432: 262144,
            22528: 537133184,
            26624: 553910272,
            30720: 536870912,
            34816: 537133056,
            38912: 0,
            43008: 553910400,
            47104: 16777344,
            51200: 536871040,
            55296: 553648128,
            59392: 16777216,
            63488: 262272,
            65536: 262144,
            69632: 128,
            73728: 536870912,
            77824: 553648256,
            81920: 16777344,
            86016: 553910272,
            90112: 537133184,
            94208: 16777216,
            98304: 553910400,
            102400: 553648128,
            106496: 17039360,
            110592: 537133056,
            114688: 262272,
            118784: 536871040,
            122880: 0,
            126976: 17039488,
            67584: 553648256,
            71680: 16777216,
            75776: 17039360,
            79872: 537133184,
            83968: 536870912,
            88064: 17039488,
            92160: 128,
            96256: 553910272,
            100352: 262272,
            104448: 553910400,
            108544: 0,
            112640: 553648128,
            116736: 16777344,
            120832: 262144,
            124928: 537133056,
            129024: 536871040
          },
          {
            0: 268435464,
            256: 8192,
            512: 270532608,
            768: 270540808,
            1024: 268443648,
            1280: 2097152,
            1536: 2097160,
            1792: 268435456,
            2048: 0,
            2304: 268443656,
            2560: 2105344,
            2816: 8,
            3072: 270532616,
            3328: 2105352,
            3584: 8200,
            3840: 270540800,
            128: 270532608,
            384: 270540808,
            640: 8,
            896: 2097152,
            1152: 2105352,
            1408: 268435464,
            1664: 268443648,
            1920: 8200,
            2176: 2097160,
            2432: 8192,
            2688: 268443656,
            2944: 270532616,
            3200: 0,
            3456: 270540800,
            3712: 2105344,
            3968: 268435456,
            4096: 268443648,
            4352: 270532616,
            4608: 270540808,
            4864: 8200,
            5120: 2097152,
            5376: 268435456,
            5632: 268435464,
            5888: 2105344,
            6144: 2105352,
            6400: 0,
            6656: 8,
            6912: 270532608,
            7168: 8192,
            7424: 268443656,
            7680: 270540800,
            7936: 2097160,
            4224: 8,
            4480: 2105344,
            4736: 2097152,
            4992: 268435464,
            5248: 268443648,
            5504: 8200,
            5760: 270540808,
            6016: 270532608,
            6272: 270540800,
            6528: 270532616,
            6784: 8192,
            7040: 2105352,
            7296: 2097160,
            7552: 0,
            7808: 268435456,
            8064: 268443656
          },
          {
            0: 1048576,
            16: 33555457,
            32: 1024,
            48: 1049601,
            64: 34604033,
            80: 0,
            96: 1,
            112: 34603009,
            128: 33555456,
            144: 1048577,
            160: 33554433,
            176: 34604032,
            192: 34603008,
            208: 1025,
            224: 1049600,
            240: 33554432,
            8: 34603009,
            24: 0,
            40: 33555457,
            56: 34604032,
            72: 1048576,
            88: 33554433,
            104: 33554432,
            120: 1025,
            136: 1049601,
            152: 33555456,
            168: 34603008,
            184: 1048577,
            200: 1024,
            216: 34604033,
            232: 1,
            248: 1049600,
            256: 33554432,
            272: 1048576,
            288: 33555457,
            304: 34603009,
            320: 1048577,
            336: 33555456,
            352: 34604032,
            368: 1049601,
            384: 1025,
            400: 34604033,
            416: 1049600,
            432: 1,
            448: 0,
            464: 34603008,
            480: 33554433,
            496: 1024,
            264: 1049600,
            280: 33555457,
            296: 34603009,
            312: 1,
            328: 33554432,
            344: 1048576,
            360: 1025,
            376: 34604032,
            392: 33554433,
            408: 34603008,
            424: 0,
            440: 34604033,
            456: 1049601,
            472: 1024,
            488: 33555456,
            504: 1048577
          },
          {
            0: 134219808,
            1: 131072,
            2: 134217728,
            3: 32,
            4: 131104,
            5: 134350880,
            6: 134350848,
            7: 2048,
            8: 134348800,
            9: 134219776,
            10: 133120,
            11: 134348832,
            12: 2080,
            13: 0,
            14: 134217760,
            15: 133152,
            2147483648: 2048,
            2147483649: 134350880,
            2147483650: 134219808,
            2147483651: 134217728,
            2147483652: 134348800,
            2147483653: 133120,
            2147483654: 133152,
            2147483655: 32,
            2147483656: 134217760,
            2147483657: 2080,
            2147483658: 131104,
            2147483659: 134350848,
            2147483660: 0,
            2147483661: 134348832,
            2147483662: 134219776,
            2147483663: 131072,
            16: 133152,
            17: 134350848,
            18: 32,
            19: 2048,
            20: 134219776,
            21: 134217760,
            22: 134348832,
            23: 131072,
            24: 0,
            25: 131104,
            26: 134348800,
            27: 134219808,
            28: 134350880,
            29: 133120,
            30: 2080,
            31: 134217728,
            2147483664: 131072,
            2147483665: 2048,
            2147483666: 134348832,
            2147483667: 133152,
            2147483668: 32,
            2147483669: 134348800,
            2147483670: 134217728,
            2147483671: 134219808,
            2147483672: 134350880,
            2147483673: 134217760,
            2147483674: 134219776,
            2147483675: 0,
            2147483676: 133120,
            2147483677: 2080,
            2147483678: 131104,
            2147483679: 134350848
          }
        ];
        var SBOX_MASK = [
          4160749569,
          528482304,
          33030144,
          2064384,
          129024,
          8064,
          504,
          2147483679
        ];
        var DES = C_algo.DES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keyBits = [];
            for (var i = 0; i < 56; i++) {
              var keyBitPos = PC1[i] - 1;
              keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
            }
            var subKeys = this._subKeys = [];
            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
              var subKey = subKeys[nSubKey] = [];
              var bitShift = BIT_SHIFTS[nSubKey];
              for (var i = 0; i < 24; i++) {
                subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;
                subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
              }
              subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
              for (var i = 1; i < 7; i++) {
                subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
              }
              subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
            }
            var invSubKeys = this._invSubKeys = [];
            for (var i = 0; i < 16; i++) {
              invSubKeys[i] = subKeys[15 - i];
            }
          },
          encryptBlock: function(M4, offset) {
            this._doCryptBlock(M4, offset, this._subKeys);
          },
          decryptBlock: function(M4, offset) {
            this._doCryptBlock(M4, offset, this._invSubKeys);
          },
          _doCryptBlock: function(M4, offset, subKeys) {
            this._lBlock = M4[offset];
            this._rBlock = M4[offset + 1];
            exchangeLR.call(this, 4, 252645135);
            exchangeLR.call(this, 16, 65535);
            exchangeRL.call(this, 2, 858993459);
            exchangeRL.call(this, 8, 16711935);
            exchangeLR.call(this, 1, 1431655765);
            for (var round = 0; round < 16; round++) {
              var subKey = subKeys[round];
              var lBlock = this._lBlock;
              var rBlock = this._rBlock;
              var f2 = 0;
              for (var i = 0; i < 8; i++) {
                f2 |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
              }
              this._lBlock = rBlock;
              this._rBlock = lBlock ^ f2;
            }
            var t = this._lBlock;
            this._lBlock = this._rBlock;
            this._rBlock = t;
            exchangeLR.call(this, 1, 1431655765);
            exchangeRL.call(this, 8, 16711935);
            exchangeRL.call(this, 2, 858993459);
            exchangeLR.call(this, 16, 65535);
            exchangeLR.call(this, 4, 252645135);
            M4[offset] = this._lBlock;
            M4[offset + 1] = this._rBlock;
          },
          keySize: 64 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        function exchangeLR(offset, mask) {
          var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
          this._rBlock ^= t;
          this._lBlock ^= t << offset;
        }
        function exchangeRL(offset, mask) {
          var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
          this._lBlock ^= t;
          this._rBlock ^= t << offset;
        }
        C3.DES = BlockCipher._createHelper(DES);
        var TripleDES = C_algo.TripleDES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
              throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
            }
            var key1 = keyWords.slice(0, 2);
            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);
            this._des1 = DES.createEncryptor(WordArray.create(key1));
            this._des2 = DES.createEncryptor(WordArray.create(key2));
            this._des3 = DES.createEncryptor(WordArray.create(key3));
          },
          encryptBlock: function(M4, offset) {
            this._des1.encryptBlock(M4, offset);
            this._des2.decryptBlock(M4, offset);
            this._des3.encryptBlock(M4, offset);
          },
          decryptBlock: function(M4, offset) {
            this._des3.decryptBlock(M4, offset);
            this._des2.encryptBlock(M4, offset);
            this._des1.decryptBlock(M4, offset);
          },
          keySize: 192 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        C3.TripleDES = BlockCipher._createHelper(TripleDES);
      })();
      return CryptoJS3.TripleDES;
    });
  }
});

// node_modules/crypto-js/rc4.js
var require_rc4 = __commonJS({
  "node_modules/crypto-js/rc4.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function() {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C3.algo;
        var RC4 = C_algo.RC4 = StreamCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keySigBytes = key.sigBytes;
            var S = this._S = [];
            for (var i = 0; i < 256; i++) {
              S[i] = i;
            }
            for (var i = 0, j2 = 0; i < 256; i++) {
              var keyByteIndex = i % keySigBytes;
              var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
              j2 = (j2 + S[i] + keyByte) % 256;
              var t = S[i];
              S[i] = S[j2];
              S[j2] = t;
            }
            this._i = this._j = 0;
          },
          _doProcessBlock: function(M4, offset) {
            M4[offset] ^= generateKeystreamWord.call(this);
          },
          keySize: 256 / 32,
          ivSize: 0
        });
        function generateKeystreamWord() {
          var S = this._S;
          var i = this._i;
          var j2 = this._j;
          var keystreamWord = 0;
          for (var n = 0; n < 4; n++) {
            i = (i + 1) % 256;
            j2 = (j2 + S[i]) % 256;
            var t = S[i];
            S[i] = S[j2];
            S[j2] = t;
            keystreamWord |= S[(S[i] + S[j2]) % 256] << 24 - n * 8;
          }
          this._i = i;
          this._j = j2;
          return keystreamWord;
        }
        C3.RC4 = StreamCipher._createHelper(RC4);
        var RC4Drop = C_algo.RC4Drop = RC4.extend({
          /**
           * Configuration options.
           *
           * @property {number} drop The number of keystream words to drop. Default 192
           */
          cfg: RC4.cfg.extend({
            drop: 192
          }),
          _doReset: function() {
            RC4._doReset.call(this);
            for (var i = this.cfg.drop; i > 0; i--) {
              generateKeystreamWord.call(this);
            }
          }
        });
        C3.RC4Drop = StreamCipher._createHelper(RC4Drop);
      })();
      return CryptoJS3.RC4;
    });
  }
});

// node_modules/crypto-js/rabbit.js
var require_rabbit = __commonJS({
  "node_modules/crypto-js/rabbit.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function() {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C3.algo;
        var S = [];
        var C_ = [];
        var G2 = [];
        var Rabbit = C_algo.Rabbit = StreamCipher.extend({
          _doReset: function() {
            var K2 = this._key.words;
            var iv = this.cfg.iv;
            for (var i = 0; i < 4; i++) {
              K2[i] = (K2[i] << 8 | K2[i] >>> 24) & 16711935 | (K2[i] << 24 | K2[i] >>> 8) & 4278255360;
            }
            var X4 = this._X = [
              K2[0],
              K2[3] << 16 | K2[2] >>> 16,
              K2[1],
              K2[0] << 16 | K2[3] >>> 16,
              K2[2],
              K2[1] << 16 | K2[0] >>> 16,
              K2[3],
              K2[2] << 16 | K2[1] >>> 16
            ];
            var C4 = this._C = [
              K2[2] << 16 | K2[2] >>> 16,
              K2[0] & 4294901760 | K2[1] & 65535,
              K2[3] << 16 | K2[3] >>> 16,
              K2[1] & 4294901760 | K2[2] & 65535,
              K2[0] << 16 | K2[0] >>> 16,
              K2[2] & 4294901760 | K2[3] & 65535,
              K2[1] << 16 | K2[1] >>> 16,
              K2[3] & 4294901760 | K2[0] & 65535
            ];
            this._b = 0;
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }
            for (var i = 0; i < 8; i++) {
              C4[i] ^= X4[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i2 & 4294901760;
              var i3 = i2 << 16 | i0 & 65535;
              C4[0] ^= i0;
              C4[1] ^= i1;
              C4[2] ^= i2;
              C4[3] ^= i3;
              C4[4] ^= i0;
              C4[5] ^= i1;
              C4[6] ^= i2;
              C4[7] ^= i3;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M4, offset) {
            var X4 = this._X;
            nextState.call(this);
            S[0] = X4[0] ^ X4[5] >>> 16 ^ X4[3] << 16;
            S[1] = X4[2] ^ X4[7] >>> 16 ^ X4[5] << 16;
            S[2] = X4[4] ^ X4[1] >>> 16 ^ X4[7] << 16;
            S[3] = X4[6] ^ X4[3] >>> 16 ^ X4[1] << 16;
            for (var i = 0; i < 4; i++) {
              S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
              M4[offset + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X4 = this._X;
          var C4 = this._C;
          for (var i = 0; i < 8; i++) {
            C_[i] = C4[i];
          }
          C4[0] = C4[0] + 1295307597 + this._b | 0;
          C4[1] = C4[1] + 3545052371 + (C4[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C4[2] = C4[2] + 886263092 + (C4[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C4[3] = C4[3] + 1295307597 + (C4[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C4[4] = C4[4] + 3545052371 + (C4[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C4[5] = C4[5] + 886263092 + (C4[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C4[6] = C4[6] + 1295307597 + (C4[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C4[7] = C4[7] + 3545052371 + (C4[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C4[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i = 0; i < 8; i++) {
            var gx = X4[i] + C4[i];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G2[i] = gh ^ gl;
          }
          X4[0] = G2[0] + (G2[7] << 16 | G2[7] >>> 16) + (G2[6] << 16 | G2[6] >>> 16) | 0;
          X4[1] = G2[1] + (G2[0] << 8 | G2[0] >>> 24) + G2[7] | 0;
          X4[2] = G2[2] + (G2[1] << 16 | G2[1] >>> 16) + (G2[0] << 16 | G2[0] >>> 16) | 0;
          X4[3] = G2[3] + (G2[2] << 8 | G2[2] >>> 24) + G2[1] | 0;
          X4[4] = G2[4] + (G2[3] << 16 | G2[3] >>> 16) + (G2[2] << 16 | G2[2] >>> 16) | 0;
          X4[5] = G2[5] + (G2[4] << 8 | G2[4] >>> 24) + G2[3] | 0;
          X4[6] = G2[6] + (G2[5] << 16 | G2[5] >>> 16) + (G2[4] << 16 | G2[4] >>> 16) | 0;
          X4[7] = G2[7] + (G2[6] << 8 | G2[6] >>> 24) + G2[5] | 0;
        }
        C3.Rabbit = StreamCipher._createHelper(Rabbit);
      })();
      return CryptoJS3.Rabbit;
    });
  }
});

// node_modules/crypto-js/rabbit-legacy.js
var require_rabbit_legacy = __commonJS({
  "node_modules/crypto-js/rabbit-legacy.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function() {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C3.algo;
        var S = [];
        var C_ = [];
        var G2 = [];
        var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
          _doReset: function() {
            var K2 = this._key.words;
            var iv = this.cfg.iv;
            var X4 = this._X = [
              K2[0],
              K2[3] << 16 | K2[2] >>> 16,
              K2[1],
              K2[0] << 16 | K2[3] >>> 16,
              K2[2],
              K2[1] << 16 | K2[0] >>> 16,
              K2[3],
              K2[2] << 16 | K2[1] >>> 16
            ];
            var C4 = this._C = [
              K2[2] << 16 | K2[2] >>> 16,
              K2[0] & 4294901760 | K2[1] & 65535,
              K2[3] << 16 | K2[3] >>> 16,
              K2[1] & 4294901760 | K2[2] & 65535,
              K2[0] << 16 | K2[0] >>> 16,
              K2[2] & 4294901760 | K2[3] & 65535,
              K2[1] << 16 | K2[1] >>> 16,
              K2[3] & 4294901760 | K2[0] & 65535
            ];
            this._b = 0;
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }
            for (var i = 0; i < 8; i++) {
              C4[i] ^= X4[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i2 & 4294901760;
              var i3 = i2 << 16 | i0 & 65535;
              C4[0] ^= i0;
              C4[1] ^= i1;
              C4[2] ^= i2;
              C4[3] ^= i3;
              C4[4] ^= i0;
              C4[5] ^= i1;
              C4[6] ^= i2;
              C4[7] ^= i3;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M4, offset) {
            var X4 = this._X;
            nextState.call(this);
            S[0] = X4[0] ^ X4[5] >>> 16 ^ X4[3] << 16;
            S[1] = X4[2] ^ X4[7] >>> 16 ^ X4[5] << 16;
            S[2] = X4[4] ^ X4[1] >>> 16 ^ X4[7] << 16;
            S[3] = X4[6] ^ X4[3] >>> 16 ^ X4[1] << 16;
            for (var i = 0; i < 4; i++) {
              S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
              M4[offset + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X4 = this._X;
          var C4 = this._C;
          for (var i = 0; i < 8; i++) {
            C_[i] = C4[i];
          }
          C4[0] = C4[0] + 1295307597 + this._b | 0;
          C4[1] = C4[1] + 3545052371 + (C4[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C4[2] = C4[2] + 886263092 + (C4[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C4[3] = C4[3] + 1295307597 + (C4[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C4[4] = C4[4] + 3545052371 + (C4[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C4[5] = C4[5] + 886263092 + (C4[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C4[6] = C4[6] + 1295307597 + (C4[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C4[7] = C4[7] + 3545052371 + (C4[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C4[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i = 0; i < 8; i++) {
            var gx = X4[i] + C4[i];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G2[i] = gh ^ gl;
          }
          X4[0] = G2[0] + (G2[7] << 16 | G2[7] >>> 16) + (G2[6] << 16 | G2[6] >>> 16) | 0;
          X4[1] = G2[1] + (G2[0] << 8 | G2[0] >>> 24) + G2[7] | 0;
          X4[2] = G2[2] + (G2[1] << 16 | G2[1] >>> 16) + (G2[0] << 16 | G2[0] >>> 16) | 0;
          X4[3] = G2[3] + (G2[2] << 8 | G2[2] >>> 24) + G2[1] | 0;
          X4[4] = G2[4] + (G2[3] << 16 | G2[3] >>> 16) + (G2[2] << 16 | G2[2] >>> 16) | 0;
          X4[5] = G2[5] + (G2[4] << 8 | G2[4] >>> 24) + G2[3] | 0;
          X4[6] = G2[6] + (G2[5] << 16 | G2[5] >>> 16) + (G2[4] << 16 | G2[4] >>> 16) | 0;
          X4[7] = G2[7] + (G2[6] << 8 | G2[6] >>> 24) + G2[5] | 0;
        }
        C3.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
      })();
      return CryptoJS3.RabbitLegacy;
    });
  }
});

// node_modules/crypto-js/blowfish.js
var require_blowfish = __commonJS({
  "node_modules/crypto-js/blowfish.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      (function() {
        var C3 = CryptoJS3;
        var C_lib = C3.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C3.algo;
        const N4 = 16;
        const ORIG_P = [
          608135816,
          2242054355,
          320440878,
          57701188,
          2752067618,
          698298832,
          137296536,
          3964562569,
          1160258022,
          953160567,
          3193202383,
          887688300,
          3232508343,
          3380367581,
          1065670069,
          3041331479,
          2450970073,
          2306472731
        ];
        const ORIG_S = [
          [
            3509652390,
            2564797868,
            805139163,
            3491422135,
            3101798381,
            1780907670,
            3128725573,
            4046225305,
            614570311,
            3012652279,
            134345442,
            2240740374,
            1667834072,
            1901547113,
            2757295779,
            4103290238,
            227898511,
            1921955416,
            1904987480,
            2182433518,
            2069144605,
            3260701109,
            2620446009,
            720527379,
            3318853667,
            677414384,
            3393288472,
            3101374703,
            2390351024,
            1614419982,
            1822297739,
            2954791486,
            3608508353,
            3174124327,
            2024746970,
            1432378464,
            3864339955,
            2857741204,
            1464375394,
            1676153920,
            1439316330,
            715854006,
            3033291828,
            289532110,
            2706671279,
            2087905683,
            3018724369,
            1668267050,
            732546397,
            1947742710,
            3462151702,
            2609353502,
            2950085171,
            1814351708,
            2050118529,
            680887927,
            999245976,
            1800124847,
            3300911131,
            1713906067,
            1641548236,
            4213287313,
            1216130144,
            1575780402,
            4018429277,
            3917837745,
            3693486850,
            3949271944,
            596196993,
            3549867205,
            258830323,
            2213823033,
            772490370,
            2760122372,
            1774776394,
            2652871518,
            566650946,
            4142492826,
            1728879713,
            2882767088,
            1783734482,
            3629395816,
            2517608232,
            2874225571,
            1861159788,
            326777828,
            3124490320,
            2130389656,
            2716951837,
            967770486,
            1724537150,
            2185432712,
            2364442137,
            1164943284,
            2105845187,
            998989502,
            3765401048,
            2244026483,
            1075463327,
            1455516326,
            1322494562,
            910128902,
            469688178,
            1117454909,
            936433444,
            3490320968,
            3675253459,
            1240580251,
            122909385,
            2157517691,
            634681816,
            4142456567,
            3825094682,
            3061402683,
            2540495037,
            79693498,
            3249098678,
            1084186820,
            1583128258,
            426386531,
            1761308591,
            1047286709,
            322548459,
            995290223,
            1845252383,
            2603652396,
            3431023940,
            2942221577,
            3202600964,
            3727903485,
            1712269319,
            422464435,
            3234572375,
            1170764815,
            3523960633,
            3117677531,
            1434042557,
            442511882,
            3600875718,
            1076654713,
            1738483198,
            4213154764,
            2393238008,
            3677496056,
            1014306527,
            4251020053,
            793779912,
            2902807211,
            842905082,
            4246964064,
            1395751752,
            1040244610,
            2656851899,
            3396308128,
            445077038,
            3742853595,
            3577915638,
            679411651,
            2892444358,
            2354009459,
            1767581616,
            3150600392,
            3791627101,
            3102740896,
            284835224,
            4246832056,
            1258075500,
            768725851,
            2589189241,
            3069724005,
            3532540348,
            1274779536,
            3789419226,
            2764799539,
            1660621633,
            3471099624,
            4011903706,
            913787905,
            3497959166,
            737222580,
            2514213453,
            2928710040,
            3937242737,
            1804850592,
            3499020752,
            2949064160,
            2386320175,
            2390070455,
            2415321851,
            4061277028,
            2290661394,
            2416832540,
            1336762016,
            1754252060,
            3520065937,
            3014181293,
            791618072,
            3188594551,
            3933548030,
            2332172193,
            3852520463,
            3043980520,
            413987798,
            3465142937,
            3030929376,
            4245938359,
            2093235073,
            3534596313,
            375366246,
            2157278981,
            2479649556,
            555357303,
            3870105701,
            2008414854,
            3344188149,
            4221384143,
            3956125452,
            2067696032,
            3594591187,
            2921233993,
            2428461,
            544322398,
            577241275,
            1471733935,
            610547355,
            4027169054,
            1432588573,
            1507829418,
            2025931657,
            3646575487,
            545086370,
            48609733,
            2200306550,
            1653985193,
            298326376,
            1316178497,
            3007786442,
            2064951626,
            458293330,
            2589141269,
            3591329599,
            3164325604,
            727753846,
            2179363840,
            146436021,
            1461446943,
            4069977195,
            705550613,
            3059967265,
            3887724982,
            4281599278,
            3313849956,
            1404054877,
            2845806497,
            146425753,
            1854211946
          ],
          [
            1266315497,
            3048417604,
            3681880366,
            3289982499,
            290971e4,
            1235738493,
            2632868024,
            2414719590,
            3970600049,
            1771706367,
            1449415276,
            3266420449,
            422970021,
            1963543593,
            2690192192,
            3826793022,
            1062508698,
            1531092325,
            1804592342,
            2583117782,
            2714934279,
            4024971509,
            1294809318,
            4028980673,
            1289560198,
            2221992742,
            1669523910,
            35572830,
            157838143,
            1052438473,
            1016535060,
            1802137761,
            1753167236,
            1386275462,
            3080475397,
            2857371447,
            1040679964,
            2145300060,
            2390574316,
            1461121720,
            2956646967,
            4031777805,
            4028374788,
            33600511,
            2920084762,
            1018524850,
            629373528,
            3691585981,
            3515945977,
            2091462646,
            2486323059,
            586499841,
            988145025,
            935516892,
            3367335476,
            2599673255,
            2839830854,
            265290510,
            3972581182,
            2759138881,
            3795373465,
            1005194799,
            847297441,
            406762289,
            1314163512,
            1332590856,
            1866599683,
            4127851711,
            750260880,
            613907577,
            1450815602,
            3165620655,
            3734664991,
            3650291728,
            3012275730,
            3704569646,
            1427272223,
            778793252,
            1343938022,
            2676280711,
            2052605720,
            1946737175,
            3164576444,
            3914038668,
            3967478842,
            3682934266,
            1661551462,
            3294938066,
            4011595847,
            840292616,
            3712170807,
            616741398,
            312560963,
            711312465,
            1351876610,
            322626781,
            1910503582,
            271666773,
            2175563734,
            1594956187,
            70604529,
            3617834859,
            1007753275,
            1495573769,
            4069517037,
            2549218298,
            2663038764,
            504708206,
            2263041392,
            3941167025,
            2249088522,
            1514023603,
            1998579484,
            1312622330,
            694541497,
            2582060303,
            2151582166,
            1382467621,
            776784248,
            2618340202,
            3323268794,
            2497899128,
            2784771155,
            503983604,
            4076293799,
            907881277,
            423175695,
            432175456,
            1378068232,
            4145222326,
            3954048622,
            3938656102,
            3820766613,
            2793130115,
            2977904593,
            26017576,
            3274890735,
            3194772133,
            1700274565,
            1756076034,
            4006520079,
            3677328699,
            720338349,
            1533947780,
            354530856,
            688349552,
            3973924725,
            1637815568,
            332179504,
            3949051286,
            53804574,
            2852348879,
            3044236432,
            1282449977,
            3583942155,
            3416972820,
            4006381244,
            1617046695,
            2628476075,
            3002303598,
            1686838959,
            431878346,
            2686675385,
            1700445008,
            1080580658,
            1009431731,
            832498133,
            3223435511,
            2605976345,
            2271191193,
            2516031870,
            1648197032,
            4164389018,
            2548247927,
            300782431,
            375919233,
            238389289,
            3353747414,
            2531188641,
            2019080857,
            1475708069,
            455242339,
            2609103871,
            448939670,
            3451063019,
            1395535956,
            2413381860,
            1841049896,
            1491858159,
            885456874,
            4264095073,
            4001119347,
            1565136089,
            3898914787,
            1108368660,
            540939232,
            1173283510,
            2745871338,
            3681308437,
            4207628240,
            3343053890,
            4016749493,
            1699691293,
            1103962373,
            3625875870,
            2256883143,
            3830138730,
            1031889488,
            3479347698,
            1535977030,
            4236805024,
            3251091107,
            2132092099,
            1774941330,
            1199868427,
            1452454533,
            157007616,
            2904115357,
            342012276,
            595725824,
            1480756522,
            206960106,
            497939518,
            591360097,
            863170706,
            2375253569,
            3596610801,
            1814182875,
            2094937945,
            3421402208,
            1082520231,
            3463918190,
            2785509508,
            435703966,
            3908032597,
            1641649973,
            2842273706,
            3305899714,
            1510255612,
            2148256476,
            2655287854,
            3276092548,
            4258621189,
            236887753,
            3681803219,
            274041037,
            1734335097,
            3815195456,
            3317970021,
            1899903192,
            1026095262,
            4050517792,
            356393447,
            2410691914,
            3873677099,
            3682840055
          ],
          [
            3913112168,
            2491498743,
            4132185628,
            2489919796,
            1091903735,
            1979897079,
            3170134830,
            3567386728,
            3557303409,
            857797738,
            1136121015,
            1342202287,
            507115054,
            2535736646,
            337727348,
            3213592640,
            1301675037,
            2528481711,
            1895095763,
            1721773893,
            3216771564,
            62756741,
            2142006736,
            835421444,
            2531993523,
            1442658625,
            3659876326,
            2882144922,
            676362277,
            1392781812,
            170690266,
            3921047035,
            1759253602,
            3611846912,
            1745797284,
            664899054,
            1329594018,
            3901205900,
            3045908486,
            2062866102,
            2865634940,
            3543621612,
            3464012697,
            1080764994,
            553557557,
            3656615353,
            3996768171,
            991055499,
            499776247,
            1265440854,
            648242737,
            3940784050,
            980351604,
            3713745714,
            1749149687,
            3396870395,
            4211799374,
            3640570775,
            1161844396,
            3125318951,
            1431517754,
            545492359,
            4268468663,
            3499529547,
            1437099964,
            2702547544,
            3433638243,
            2581715763,
            2787789398,
            1060185593,
            1593081372,
            2418618748,
            4260947970,
            69676912,
            2159744348,
            86519011,
            2512459080,
            3838209314,
            1220612927,
            3339683548,
            133810670,
            1090789135,
            1078426020,
            1569222167,
            845107691,
            3583754449,
            4072456591,
            1091646820,
            628848692,
            1613405280,
            3757631651,
            526609435,
            236106946,
            48312990,
            2942717905,
            3402727701,
            1797494240,
            859738849,
            992217954,
            4005476642,
            2243076622,
            3870952857,
            3732016268,
            765654824,
            3490871365,
            2511836413,
            1685915746,
            3888969200,
            1414112111,
            2273134842,
            3281911079,
            4080962846,
            172450625,
            2569994100,
            980381355,
            4109958455,
            2819808352,
            2716589560,
            2568741196,
            3681446669,
            3329971472,
            1835478071,
            660984891,
            3704678404,
            4045999559,
            3422617507,
            3040415634,
            1762651403,
            1719377915,
            3470491036,
            2693910283,
            3642056355,
            3138596744,
            1364962596,
            2073328063,
            1983633131,
            926494387,
            3423689081,
            2150032023,
            4096667949,
            1749200295,
            3328846651,
            309677260,
            2016342300,
            1779581495,
            3079819751,
            111262694,
            1274766160,
            443224088,
            298511866,
            1025883608,
            3806446537,
            1145181785,
            168956806,
            3641502830,
            3584813610,
            1689216846,
            3666258015,
            3200248200,
            1692713982,
            2646376535,
            4042768518,
            1618508792,
            1610833997,
            3523052358,
            4130873264,
            2001055236,
            3610705100,
            2202168115,
            4028541809,
            2961195399,
            1006657119,
            2006996926,
            3186142756,
            1430667929,
            3210227297,
            1314452623,
            4074634658,
            4101304120,
            2273951170,
            1399257539,
            3367210612,
            3027628629,
            1190975929,
            2062231137,
            2333990788,
            2221543033,
            2438960610,
            1181637006,
            548689776,
            2362791313,
            3372408396,
            3104550113,
            3145860560,
            296247880,
            1970579870,
            3078560182,
            3769228297,
            1714227617,
            3291629107,
            3898220290,
            166772364,
            1251581989,
            493813264,
            448347421,
            195405023,
            2709975567,
            677966185,
            3703036547,
            1463355134,
            2715995803,
            1338867538,
            1343315457,
            2802222074,
            2684532164,
            233230375,
            2599980071,
            2000651841,
            3277868038,
            1638401717,
            4028070440,
            3237316320,
            6314154,
            819756386,
            300326615,
            590932579,
            1405279636,
            3267499572,
            3150704214,
            2428286686,
            3959192993,
            3461946742,
            1862657033,
            1266418056,
            963775037,
            2089974820,
            2263052895,
            1917689273,
            448879540,
            3550394620,
            3981727096,
            150775221,
            3627908307,
            1303187396,
            508620638,
            2975983352,
            2726630617,
            1817252668,
            1876281319,
            1457606340,
            908771278,
            3720792119,
            3617206836,
            2455994898,
            1729034894,
            1080033504
          ],
          [
            976866871,
            3556439503,
            2881648439,
            1522871579,
            1555064734,
            1336096578,
            3548522304,
            2579274686,
            3574697629,
            3205460757,
            3593280638,
            3338716283,
            3079412587,
            564236357,
            2993598910,
            1781952180,
            1464380207,
            3163844217,
            3332601554,
            1699332808,
            1393555694,
            1183702653,
            3581086237,
            1288719814,
            691649499,
            2847557200,
            2895455976,
            3193889540,
            2717570544,
            1781354906,
            1676643554,
            2592534050,
            3230253752,
            1126444790,
            2770207658,
            2633158820,
            2210423226,
            2615765581,
            2414155088,
            3127139286,
            673620729,
            2805611233,
            1269405062,
            4015350505,
            3341807571,
            4149409754,
            1057255273,
            2012875353,
            2162469141,
            2276492801,
            2601117357,
            993977747,
            3918593370,
            2654263191,
            753973209,
            36408145,
            2530585658,
            25011837,
            3520020182,
            2088578344,
            530523599,
            2918365339,
            1524020338,
            1518925132,
            3760827505,
            3759777254,
            1202760957,
            3985898139,
            3906192525,
            674977740,
            4174734889,
            2031300136,
            2019492241,
            3983892565,
            4153806404,
            3822280332,
            352677332,
            2297720250,
            60907813,
            90501309,
            3286998549,
            1016092578,
            2535922412,
            2839152426,
            457141659,
            509813237,
            4120667899,
            652014361,
            1966332200,
            2975202805,
            55981186,
            2327461051,
            676427537,
            3255491064,
            2882294119,
            3433927263,
            1307055953,
            942726286,
            933058658,
            2468411793,
            3933900994,
            4215176142,
            1361170020,
            2001714738,
            2830558078,
            3274259782,
            1222529897,
            1679025792,
            2729314320,
            3714953764,
            1770335741,
            151462246,
            3013232138,
            1682292957,
            1483529935,
            471910574,
            1539241949,
            458788160,
            3436315007,
            1807016891,
            3718408830,
            978976581,
            1043663428,
            3165965781,
            1927990952,
            4200891579,
            2372276910,
            3208408903,
            3533431907,
            1412390302,
            2931980059,
            4132332400,
            1947078029,
            3881505623,
            4168226417,
            2941484381,
            1077988104,
            1320477388,
            886195818,
            18198404,
            3786409e3,
            2509781533,
            112762804,
            3463356488,
            1866414978,
            891333506,
            18488651,
            661792760,
            1628790961,
            3885187036,
            3141171499,
            876946877,
            2693282273,
            1372485963,
            791857591,
            2686433993,
            3759982718,
            3167212022,
            3472953795,
            2716379847,
            445679433,
            3561995674,
            3504004811,
            3574258232,
            54117162,
            3331405415,
            2381918588,
            3769707343,
            4154350007,
            1140177722,
            4074052095,
            668550556,
            3214352940,
            367459370,
            261225585,
            2610173221,
            4209349473,
            3468074219,
            3265815641,
            314222801,
            3066103646,
            3808782860,
            282218597,
            3406013506,
            3773591054,
            379116347,
            1285071038,
            846784868,
            2669647154,
            3771962079,
            3550491691,
            2305946142,
            453669953,
            1268987020,
            3317592352,
            3279303384,
            3744833421,
            2610507566,
            3859509063,
            266596637,
            3847019092,
            517658769,
            3462560207,
            3443424879,
            370717030,
            4247526661,
            2224018117,
            4143653529,
            4112773975,
            2788324899,
            2477274417,
            1456262402,
            2901442914,
            1517677493,
            1846949527,
            2295493580,
            3734397586,
            2176403920,
            1280348187,
            1908823572,
            3871786941,
            846861322,
            1172426758,
            3287448474,
            3383383037,
            1655181056,
            3139813346,
            901632758,
            1897031941,
            2986607138,
            3066810236,
            3447102507,
            1393639104,
            373351379,
            950779232,
            625454576,
            3124240540,
            4148612726,
            2007998917,
            544563296,
            2244738638,
            2330496472,
            2058025392,
            1291430526,
            424198748,
            50039436,
            29584100,
            3605783033,
            2429876329,
            2791104160,
            1057563949,
            3255363231,
            3075367218,
            3463963227,
            1469046755,
            985887462
          ]
        ];
        var BLOWFISH_CTX = {
          pbox: [],
          sbox: []
        };
        function F3(ctx, x4) {
          let a = x4 >> 24 & 255;
          let b2 = x4 >> 16 & 255;
          let c2 = x4 >> 8 & 255;
          let d2 = x4 & 255;
          let y2 = ctx.sbox[0][a] + ctx.sbox[1][b2];
          y2 = y2 ^ ctx.sbox[2][c2];
          y2 = y2 + ctx.sbox[3][d2];
          return y2;
        }
        function BlowFish_Encrypt(ctx, left, right) {
          let Xl = left;
          let Xr2 = right;
          let temp;
          for (let i = 0; i < N4; ++i) {
            Xl = Xl ^ ctx.pbox[i];
            Xr2 = F3(ctx, Xl) ^ Xr2;
            temp = Xl;
            Xl = Xr2;
            Xr2 = temp;
          }
          temp = Xl;
          Xl = Xr2;
          Xr2 = temp;
          Xr2 = Xr2 ^ ctx.pbox[N4];
          Xl = Xl ^ ctx.pbox[N4 + 1];
          return { left: Xl, right: Xr2 };
        }
        function BlowFish_Decrypt(ctx, left, right) {
          let Xl = left;
          let Xr2 = right;
          let temp;
          for (let i = N4 + 1; i > 1; --i) {
            Xl = Xl ^ ctx.pbox[i];
            Xr2 = F3(ctx, Xl) ^ Xr2;
            temp = Xl;
            Xl = Xr2;
            Xr2 = temp;
          }
          temp = Xl;
          Xl = Xr2;
          Xr2 = temp;
          Xr2 = Xr2 ^ ctx.pbox[1];
          Xl = Xl ^ ctx.pbox[0];
          return { left: Xl, right: Xr2 };
        }
        function BlowFishInit(ctx, key, keysize) {
          for (let Row = 0; Row < 4; Row++) {
            ctx.sbox[Row] = [];
            for (let Col = 0; Col < 256; Col++) {
              ctx.sbox[Row][Col] = ORIG_S[Row][Col];
            }
          }
          let keyIndex = 0;
          for (let index = 0; index < N4 + 2; index++) {
            ctx.pbox[index] = ORIG_P[index] ^ key[keyIndex];
            keyIndex++;
            if (keyIndex >= keysize) {
              keyIndex = 0;
            }
          }
          let Data1 = 0;
          let Data2 = 0;
          let res = 0;
          for (let i = 0; i < N4 + 2; i += 2) {
            res = BlowFish_Encrypt(ctx, Data1, Data2);
            Data1 = res.left;
            Data2 = res.right;
            ctx.pbox[i] = Data1;
            ctx.pbox[i + 1] = Data2;
          }
          for (let i = 0; i < 4; i++) {
            for (let j2 = 0; j2 < 256; j2 += 2) {
              res = BlowFish_Encrypt(ctx, Data1, Data2);
              Data1 = res.left;
              Data2 = res.right;
              ctx.sbox[i][j2] = Data1;
              ctx.sbox[i][j2 + 1] = Data2;
            }
          }
          return true;
        }
        var Blowfish = C_algo.Blowfish = BlockCipher.extend({
          _doReset: function() {
            if (this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            BlowFishInit(BLOWFISH_CTX, keyWords, keySize);
          },
          encryptBlock: function(M4, offset) {
            var res = BlowFish_Encrypt(BLOWFISH_CTX, M4[offset], M4[offset + 1]);
            M4[offset] = res.left;
            M4[offset + 1] = res.right;
          },
          decryptBlock: function(M4, offset) {
            var res = BlowFish_Decrypt(BLOWFISH_CTX, M4[offset], M4[offset + 1]);
            M4[offset] = res.left;
            M4[offset + 1] = res.right;
          },
          blockSize: 64 / 32,
          keySize: 128 / 32,
          ivSize: 64 / 32
        });
        C3.Blowfish = BlockCipher._createHelper(Blowfish);
      })();
      return CryptoJS3.Blowfish;
    });
  }
});

// node_modules/crypto-js/index.js
var require_crypto_js = __commonJS({
  "node_modules/crypto-js/index.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_x64_core(), require_lib_typedarrays(), require_enc_utf16(), require_enc_base64(), require_enc_base64url(), require_md5(), require_sha1(), require_sha256(), require_sha224(), require_sha512(), require_sha384(), require_sha3(), require_ripemd160(), require_hmac(), require_pbkdf2(), require_evpkdf(), require_cipher_core(), require_mode_cfb(), require_mode_ctr(), require_mode_ctr_gladman(), require_mode_ofb(), require_mode_ecb(), require_pad_ansix923(), require_pad_iso10126(), require_pad_iso97971(), require_pad_zeropadding(), require_pad_nopadding(), require_format_hex(), require_aes(), require_tripledes(), require_rc4(), require_rabbit(), require_rabbit_legacy(), require_blowfish());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./enc-base64url", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy", "./blowfish"], factory);
      } else {
        root.CryptoJS = factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS3) {
      return CryptoJS3;
    });
  }
});

// node_modules/base64-js/index.js
var require_base64_js2 = __commonJS({
  "node_modules/base64-js/index.js"(exports) {
    "use strict";
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    var i;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1) validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i2;
      for (i2 = 0; i2 < len2; i2 += 4) {
        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i2 = start; i2 < end; i2 += 3) {
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// node_modules/ieee754/index.js
var require_ieee7542 = __commonJS({
  "node_modules/ieee754/index.js"(exports) {
    exports.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e, m2;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d2 = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d2;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d2, nBits -= 8) {
      }
      m2 = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m2 = m2 * 256 + buffer[offset + i], i += d2, nBits -= 8) {
      }
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m2 ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m2 = m2 + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m2 * Math.pow(2, e - mLen);
    };
    exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
      var e, m2, c2;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt2 = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d2 = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m2 = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c2 = Math.pow(2, -e)) < 1) {
          e--;
          c2 *= 2;
        }
        if (e + eBias >= 1) {
          value += rt2 / c2;
        } else {
          value += rt2 * Math.pow(2, 1 - eBias);
        }
        if (value * c2 >= 2) {
          e++;
          c2 /= 2;
        }
        if (e + eBias >= eMax) {
          m2 = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m2 = (value * c2 - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m2 = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer[offset + i] = m2 & 255, i += d2, m2 /= 256, mLen -= 8) {
      }
      e = e << mLen | m2;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 255, i += d2, e /= 256, eLen -= 8) {
      }
      buffer[offset + i - d2] |= s * 128;
    };
  }
});

// node_modules/buffer/index.js
var require_buffer2 = __commonJS({
  "node_modules/buffer/index.js"(exports) {
    "use strict";
    var base64 = require_base64_js2();
    var ieee754 = require_ieee7542();
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports.Buffer = Buffer4;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    Buffer4.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer4.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
    }
    function typedArraySupport() {
      try {
        const arr = new Uint8Array(1);
        const proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer4.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer4.isBuffer(this)) return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer4.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer4.isBuffer(this)) return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      const buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer4.prototype);
      return buf;
    }
    function Buffer4(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          );
        }
        return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
    }
    Buffer4.poolSize = 8192;
    function from(value, encodingOrOffset, length) {
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof value === "number") {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        );
      }
      const valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer4.from(valueOf, encodingOrOffset, length);
      }
      const b2 = fromObject(value);
      if (b2) return b2;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer4.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
      }
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    Buffer4.from = function(value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer4.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer4, Uint8Array);
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
    }
    function alloc(size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
      }
      return createBuffer(size);
    }
    Buffer4.alloc = function(size, fill, encoding) {
      return alloc(size, fill, encoding);
    };
    function allocUnsafe(size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0);
    }
    Buffer4.allocUnsafe = function(size) {
      return allocUnsafe(size);
    };
    Buffer4.allocUnsafeSlow = function(size) {
      return allocUnsafe(size);
    };
    function fromString(string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer4.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      const length = byteLength(string, encoding) | 0;
      let buf = createBuffer(length);
      const actual = buf.write(string, encoding);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array) {
      const length = array.length < 0 ? 0 : checked(array.length) | 0;
      const buf = createBuffer(length);
      for (let i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      let buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array);
      } else if (length === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer4.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer4.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer4.alloc(+length);
    }
    Buffer4.isBuffer = function isBuffer(b2) {
      return b2 != null && b2._isBuffer === true && b2 !== Buffer4.prototype;
    };
    Buffer4.compare = function compare(a, b2) {
      if (isInstance(a, Uint8Array)) a = Buffer4.from(a, a.offset, a.byteLength);
      if (isInstance(b2, Uint8Array)) b2 = Buffer4.from(b2, b2.offset, b2.byteLength);
      if (!Buffer4.isBuffer(a) || !Buffer4.isBuffer(b2)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        );
      }
      if (a === b2) return 0;
      let x4 = a.length;
      let y2 = b2.length;
      for (let i = 0, len = Math.min(x4, y2); i < len; ++i) {
        if (a[i] !== b2[i]) {
          x4 = a[i];
          y2 = b2[i];
          break;
        }
      }
      if (x4 < y2) return -1;
      if (y2 < x4) return 1;
      return 0;
    };
    Buffer4.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer4.concat = function concat3(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer4.alloc(0);
      }
      let i;
      if (length === void 0) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }
      const buffer = Buffer4.allocUnsafe(length);
      let pos = 0;
      for (i = 0; i < list.length; ++i) {
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer.length) {
            if (!Buffer4.isBuffer(buf)) buf = Buffer4.from(buf);
            buf.copy(buffer, pos);
          } else {
            Uint8Array.prototype.set.call(
              buffer,
              buf,
              pos
            );
          }
        } else if (!Buffer4.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer, pos);
        }
        pos += buf.length;
      }
      return buffer;
    };
    function byteLength(string, encoding) {
      if (Buffer4.isBuffer(string)) {
        return string.length;
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
        );
      }
      const len = string.length;
      const mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0) return 0;
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
            return utf8ToBytes(string).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer4.byteLength = byteLength;
    function slowToString(encoding, start, end) {
      let loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding) encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer4.prototype._isBuffer = true;
    function swap(b2, n, m2) {
      const i = b2[n];
      b2[n] = b2[m2];
      b2[m2] = i;
    }
    Buffer4.prototype.swap16 = function swap16() {
      const len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (let i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this;
    };
    Buffer4.prototype.swap32 = function swap32() {
      const len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (let i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this;
    };
    Buffer4.prototype.swap64 = function swap64() {
      const len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (let i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this;
    };
    Buffer4.prototype.toString = function toString4() {
      const length = this.length;
      if (length === 0) return "";
      if (arguments.length === 0) return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer4.prototype.toLocaleString = Buffer4.prototype.toString;
    Buffer4.prototype.equals = function equals3(b2) {
      if (!Buffer4.isBuffer(b2)) throw new TypeError("Argument must be a Buffer");
      if (this === b2) return true;
      return Buffer4.compare(this, b2) === 0;
    };
    Buffer4.prototype.inspect = function inspect() {
      let str = "";
      const max3 = exports.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max3).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max3) str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer4.prototype[customInspectSymbol] = Buffer4.prototype.inspect;
    }
    Buffer4.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer4.from(target, target.offset, target.byteLength);
      }
      if (!Buffer4.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
        );
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target) return 0;
      let x4 = thisEnd - thisStart;
      let y2 = end - start;
      const len = Math.min(x4, y2);
      const thisCopy = this.slice(thisStart, thisEnd);
      const targetCopy = target.slice(start, end);
      for (let i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x4 = thisCopy[i];
          y2 = targetCopy[i];
          break;
        }
      }
      if (x4 < y2) return -1;
      if (y2 < x4) return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
      if (buffer.length === 0) return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer.length - 1;
      }
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
      }
      if (typeof val === "string") {
        val = Buffer4.from(val, encoding);
      }
      if (Buffer4.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      let indexSize = 1;
      let arrLength = arr.length;
      let valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i2) {
        if (indexSize === 1) {
          return buf[i2];
        } else {
          return buf.readUInt16BE(i2 * indexSize);
        }
      }
      let i;
      if (dir) {
        let foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          let found = true;
          for (let j2 = 0; j2 < valLength; j2++) {
            if (read(arr, i + j2) !== read(val, j2)) {
              found = false;
              break;
            }
          }
          if (found) return i;
        }
      }
      return -1;
    }
    Buffer4.prototype.includes = function includes2(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer4.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer4.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string, offset, length) {
      offset = Number(offset) || 0;
      const remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      const strLen = string.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      let i;
      for (i = 0; i < length; ++i) {
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
      }
      return i;
    }
    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length);
    }
    function base64Write(buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length);
    }
    function ucs2Write(buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
    }
    Buffer4.prototype.write = function write(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === void 0) encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      const remaining = this.length - offset;
      if (length === void 0 || length > remaining) length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding) encoding = "utf8";
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string, offset, length);
          case "base64":
            return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset, length);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer4.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      const res = [];
      let i = start;
      while (i < end) {
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
          let secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      const len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      let res = "";
      let i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      const len = buf.length;
      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;
      let out = "";
      for (let i = start; i < end; ++i) {
        out += hexSliceLookupTable[buf[i]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      const bytes = buf.slice(start, end);
      let res = "";
      for (let i = 0; i < bytes.length - 1; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res;
    }
    Buffer4.prototype.slice = function slice3(start, end) {
      const len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start) end = start;
      const newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer4.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
      if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer4.prototype.readUintLE = Buffer4.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength2, this.length);
      let val = this[offset];
      let mul = 1;
      let i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      return val;
    };
    Buffer4.prototype.readUintBE = Buffer4.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      let val = this[offset + --byteLength2];
      let mul = 1;
      while (byteLength2 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength2] * mul;
      }
      return val;
    };
    Buffer4.prototype.readUint8 = Buffer4.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer4.prototype.readUint16LE = Buffer4.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer4.prototype.readUint16BE = Buffer4.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer4.prototype.readUint32LE = Buffer4.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer4.prototype.readUint32BE = Buffer4.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer4.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
      const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
      return BigInt(lo) + (BigInt(hi) << BigInt(32));
    });
    Buffer4.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
      return (BigInt(hi) << BigInt(32)) + BigInt(lo);
    });
    Buffer4.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength2, this.length);
      let val = this[offset];
      let mul = 1;
      let i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer4.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength2, this.length);
      let i = byteLength2;
      let mul = 1;
      let val = this[offset + --i];
      while (i > 0 && (mul *= 256)) {
        val += this[offset + --i] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer4.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128)) return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer4.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      const val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer4.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      const val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer4.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer4.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer4.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
      return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
    });
    Buffer4.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = (first << 24) + // Overflow
      this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
    });
    Buffer4.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };
    Buffer4.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };
    Buffer4.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };
    Buffer4.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max3, min) {
      if (!Buffer4.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max3 || value < min) throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
    }
    Buffer4.prototype.writeUintLE = Buffer4.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      let mul = 1;
      let i = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer4.prototype.writeUintBE = Buffer4.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      let i = byteLength2 - 1;
      let mul = 1;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer4.prototype.writeUint8 = Buffer4.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer4.prototype.writeUint16LE = Buffer4.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer4.prototype.writeUint16BE = Buffer4.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer4.prototype.writeUint32LE = Buffer4.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 255;
      return offset + 4;
    };
    Buffer4.prototype.writeUint32BE = Buffer4.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    function wrtBigUInt64LE(buf, value, offset, min, max3) {
      checkIntBI(value, min, max3, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      return offset;
    }
    function wrtBigUInt64BE(buf, value, offset, min, max3) {
      checkIntBI(value, min, max3, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset + 7] = lo;
      lo = lo >> 8;
      buf[offset + 6] = lo;
      lo = lo >> 8;
      buf[offset + 5] = lo;
      lo = lo >> 8;
      buf[offset + 4] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset + 3] = hi;
      hi = hi >> 8;
      buf[offset + 2] = hi;
      hi = hi >> 8;
      buf[offset + 1] = hi;
      hi = hi >> 8;
      buf[offset] = hi;
      return offset + 8;
    }
    Buffer4.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer4.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer4.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      let i = 0;
      let mul = 1;
      let sub = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer4.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      let i = byteLength2 - 1;
      let mul = 1;
      let sub = 0;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer4.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
      if (value < 0) value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer4.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer4.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer4.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
    };
    Buffer4.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0) value = 4294967295 + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    Buffer4.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    Buffer4.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function checkIEEE754(buf, value, offset, ext, max3, min) {
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
      if (offset < 0) throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer4.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer4.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer4.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer4.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer4.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer4.isBuffer(target)) throw new TypeError("argument should be a Buffer");
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;
      if (end === start) return 0;
      if (target.length === 0 || this.length === 0) return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
      if (end < 0) throw new RangeError("sourceEnd out of bounds");
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      const len = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }
      return len;
    };
    Buffer4.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer4.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          const code = val.charCodeAt(0);
          if (encoding === "utf8" && code < 128 || encoding === "latin1") {
            val = code;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val) val = 0;
      let i;
      if (typeof val === "number") {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        const bytes = Buffer4.isBuffer(val) ? val : Buffer4.from(val, encoding);
        const len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }
      return this;
    };
    var errors = {};
    function E4(sym, getMessage, Base) {
      errors[sym] = class NodeError extends Base {
        constructor() {
          super();
          Object.defineProperty(this, "message", {
            value: getMessage.apply(this, arguments),
            writable: true,
            configurable: true
          });
          this.name = `${this.name} [${sym}]`;
          this.stack;
          delete this.name;
        }
        get code() {
          return sym;
        }
        set code(value) {
          Object.defineProperty(this, "code", {
            configurable: true,
            enumerable: true,
            value,
            writable: true
          });
        }
        toString() {
          return `${this.name} [${sym}]: ${this.message}`;
        }
      };
    }
    E4(
      "ERR_BUFFER_OUT_OF_BOUNDS",
      function(name) {
        if (name) {
          return `${name} is outside of buffer bounds`;
        }
        return "Attempt to access memory outside buffer bounds";
      },
      RangeError
    );
    E4(
      "ERR_INVALID_ARG_TYPE",
      function(name, actual) {
        return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
      },
      TypeError
    );
    E4(
      "ERR_OUT_OF_RANGE",
      function(str, range, input) {
        let msg = `The value of "${str}" is out of range.`;
        let received = input;
        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
          received = addNumericalSeparator(String(input));
        } else if (typeof input === "bigint") {
          received = String(input);
          if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
            received = addNumericalSeparator(received);
          }
          received += "n";
        }
        msg += ` It must be ${range}. Received ${received}`;
        return msg;
      },
      RangeError
    );
    function addNumericalSeparator(val) {
      let res = "";
      let i = val.length;
      const start = val[0] === "-" ? 1 : 0;
      for (; i >= start + 4; i -= 3) {
        res = `_${val.slice(i - 3, i)}${res}`;
      }
      return `${val.slice(0, i)}${res}`;
    }
    function checkBounds(buf, offset, byteLength2) {
      validateNumber(offset, "offset");
      if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
        boundsError(offset, buf.length - (byteLength2 + 1));
      }
    }
    function checkIntBI(value, min, max3, buf, offset, byteLength2) {
      if (value > max3 || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength2 > 3) {
          if (min === 0 || min === BigInt(0)) {
            range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
          } else {
            range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
          }
        } else {
          range = `>= ${min}${n} and <= ${max3}${n}`;
        }
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
      }
      checkBounds(buf, offset, byteLength2);
    }
    function validateNumber(value, name) {
      if (typeof value !== "number") {
        throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
      }
    }
    function boundsError(value, length, type3) {
      if (Math.floor(value) !== value) {
        validateNumber(value, type3);
        throw new errors.ERR_OUT_OF_RANGE(type3 || "offset", "an integer", value);
      }
      if (length < 0) {
        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
      }
      throw new errors.ERR_OUT_OF_RANGE(
        type3 || "offset",
        `>= ${type3 ? 1 : 0} and <= ${length}`,
        value
      );
    }
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2) return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      let codePoint;
      const length = string.length;
      let leadSurrogate = null;
      const bytes = [];
      for (let i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              continue;
            } else if (i + 1 === length) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0) break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0) break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0) break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0) break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      const byteArray = [];
      for (let i = 0; i < str.length; ++i) {
        byteArray.push(str.charCodeAt(i) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      let c2, hi, lo;
      const byteArray = [];
      for (let i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break;
        c2 = str.charCodeAt(i);
        hi = c2 >> 8;
        lo = c2 % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
      let i;
      for (i = 0; i < length; ++i) {
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
      }
      return i;
    }
    function isInstance(obj, type3) {
      return obj instanceof type3 || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type3.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      const alphabet = "0123456789abcdef";
      const table = new Array(256);
      for (let i = 0; i < 16; ++i) {
        const i16 = i * 16;
        for (let j2 = 0; j2 < 16; ++j2) {
          table[i16 + j2] = alphabet[i] + alphabet[j2];
        }
      }
      return table;
    }();
    function defineBigIntMethod(fn2) {
      return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn2;
    }
    function BufferBigIntNotDefined() {
      throw new Error("BigInt not supported");
    }
  }
});

// node_modules/ar-gql/dist/queries/tx.js
var require_tx = __commonJS({
  "node_modules/ar-gql/dist/queries/tx.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = `
query($id: ID!) {
  transaction(id: $id) {
    id
    anchor
    signature
    recipient
    owner {
      address
      key
    }
    fee {
      winston
      ar
    }
    quantity {
      winston
      ar
    }
    data {
      size
      type
    }
    tags {
      name
      value
    }
    block {
      id
      timestamp
      height
      previous
    }
    parent {
      id
    }
  }
}
`;
  }
});

// node_modules/ar-gql/dist/utils/fetchRetry.js
var require_fetchRetry = __commonJS({
  "node_modules/ar-gql/dist/utils/fetchRetry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fetchRetry = void 0;
    var fetchRetry = async (input, init, opts) => {
      const { retry, retryMs } = opts;
      let tries = 0;
      while (true) {
        try {
          return await fetch(input, init);
        } catch (e) {
          if (tries++ < retry) {
            console.warn(`[ar-gql] waiting ${retryMs}ms before retrying ${tries} of ${retry}`);
            await new Promise((resolve) => setTimeout(resolve, retryMs));
            continue;
          }
          throw new TypeError(`Failed to fetch from ${input} after ${retry} retries`, { cause: e });
        }
      }
    };
    exports.fetchRetry = fetchRetry;
  }
});

// node_modules/ar-gql/dist/index.js
var require_dist = __commonJS({
  "node_modules/ar-gql/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GQLUrls = exports.arGql = void 0;
    var tx_1 = require_tx();
    var fetchRetry_1 = require_fetchRetry();
    function arGql3(options) {
      const defaultOpts = {
        endpointUrl: "https://arweave.net/graphql",
        retries: 0,
        retryMs: 1e4
      };
      const opts = { ...defaultOpts, ...options };
      if (!opts.endpointUrl.match(/^https?:\/\/.*\/graphql*/)) {
        throw new Error(`string doesn't appear to be a URL of the form <http(s)://some-domain/graphql>'. You entered "${opts.endpointUrl}"`);
      }
      const run = async (query, variables) => {
        const graphql = JSON.stringify({
          query,
          variables
        });
        const res = await (0, fetchRetry_1.fetchRetry)(opts.endpointUrl, {
          method: "POST",
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/json"
          },
          body: graphql
        }, {
          retry: opts.retries,
          retryMs: opts.retryMs
        });
        if (!res.ok) {
          throw new Error(res.statusText, { cause: res.status });
        }
        return await res.json();
      };
      const all = async (query, variables, pageCallback) => {
        let hasNextPage = true;
        let edges = [];
        let cursor = "";
        let pageCallbacks = [];
        while (hasNextPage) {
          const res = (await run(query, { ...variables, cursor })).data.transactions;
          if (res.edges && res.edges.length) {
            if (typeof pageCallback === "function") {
              pageCallbacks.push(pageCallback(res.edges));
            } else {
              edges = edges.concat(res.edges);
            }
            cursor = res.edges[res.edges.length - 1].cursor;
          }
          hasNextPage = res.pageInfo.hasNextPage;
        }
        await Promise.all(pageCallbacks);
        return edges;
      };
      const tx = async (id) => {
        const res = await run(tx_1.default, { id });
        return res.data.transaction;
      };
      const fetchTxTag = async (id, name) => {
        const res = await tx(id);
        const tag = res.tags.find((tag2) => tag2.name === name);
        if (tag)
          return tag.value;
      };
      return {
        run,
        all,
        tx,
        fetchTxTag,
        endpointUrl: opts.endpointUrl
      };
    }
    exports.arGql = arGql3;
    exports.GQLUrls = {
      goldsky: "https://arweave-search.goldsky.com/graphql",
      arweave: "https://arweave.net/graphql"
    };
  }
});

// node_modules/bignumber.js/bignumber.js
var require_bignumber = __commonJS({
  "node_modules/bignumber.js/bignumber.js"(exports, module2) {
    (function(globalObject) {
      "use strict";
      var BigNumber, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
      function clone(configObject) {
        var div, convertBase, parseNumeric, P4 = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
          prefix: "",
          groupSize: 3,
          secondaryGroupSize: 0,
          groupSeparator: ",",
          decimalSeparator: ".",
          fractionGroupSize: 0,
          fractionGroupSeparator: "\xA0",
          // non-breaking space
          suffix: ""
        }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
        function BigNumber2(v3, b2) {
          var alphabet, c2, caseChanged, e, i, isNum, len, str, x4 = this;
          if (!(x4 instanceof BigNumber2)) return new BigNumber2(v3, b2);
          if (b2 == null) {
            if (v3 && v3._isBigNumber === true) {
              x4.s = v3.s;
              if (!v3.c || v3.e > MAX_EXP) {
                x4.c = x4.e = null;
              } else if (v3.e < MIN_EXP) {
                x4.c = [x4.e = 0];
              } else {
                x4.e = v3.e;
                x4.c = v3.c.slice();
              }
              return;
            }
            if ((isNum = typeof v3 == "number") && v3 * 0 == 0) {
              x4.s = 1 / v3 < 0 ? (v3 = -v3, -1) : 1;
              if (v3 === ~~v3) {
                for (e = 0, i = v3; i >= 10; i /= 10, e++) ;
                if (e > MAX_EXP) {
                  x4.c = x4.e = null;
                } else {
                  x4.e = e;
                  x4.c = [v3];
                }
                return;
              }
              str = String(v3);
            } else {
              if (!isNumeric.test(str = String(v3))) return parseNumeric(x4, str, isNum);
              x4.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
            }
            if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
            if ((i = str.search(/e/i)) > 0) {
              if (e < 0) e = i;
              e += +str.slice(i + 1);
              str = str.substring(0, i);
            } else if (e < 0) {
              e = str.length;
            }
          } else {
            intCheck(b2, 2, ALPHABET.length, "Base");
            if (b2 == 10 && alphabetHasNormalDecimalDigits) {
              x4 = new BigNumber2(v3);
              return round(x4, DECIMAL_PLACES + x4.e + 1, ROUNDING_MODE);
            }
            str = String(v3);
            if (isNum = typeof v3 == "number") {
              if (v3 * 0 != 0) return parseNumeric(x4, str, isNum, b2);
              x4.s = 1 / v3 < 0 ? (str = str.slice(1), -1) : 1;
              if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
                throw Error(tooManyDigits + v3);
              }
            } else {
              x4.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }
            alphabet = ALPHABET.slice(0, b2);
            e = i = 0;
            for (len = str.length; i < len; i++) {
              if (alphabet.indexOf(c2 = str.charAt(i)) < 0) {
                if (c2 == ".") {
                  if (i > e) {
                    e = len;
                    continue;
                  }
                } else if (!caseChanged) {
                  if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                    caseChanged = true;
                    i = -1;
                    e = 0;
                    continue;
                  }
                }
                return parseNumeric(x4, String(v3), isNum, b2);
              }
            }
            isNum = false;
            str = convertBase(str, b2, 10, x4.s);
            if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
            else e = str.length;
          }
          for (i = 0; str.charCodeAt(i) === 48; i++) ;
          for (len = str.length; str.charCodeAt(--len) === 48; ) ;
          if (str = str.slice(i, ++len)) {
            len -= i;
            if (isNum && BigNumber2.DEBUG && len > 15 && (v3 > MAX_SAFE_INTEGER || v3 !== mathfloor(v3))) {
              throw Error(tooManyDigits + x4.s * v3);
            }
            if ((e = e - i - 1) > MAX_EXP) {
              x4.c = x4.e = null;
            } else if (e < MIN_EXP) {
              x4.c = [x4.e = 0];
            } else {
              x4.e = e;
              x4.c = [];
              i = (e + 1) % LOG_BASE;
              if (e < 0) i += LOG_BASE;
              if (i < len) {
                if (i) x4.c.push(+str.slice(0, i));
                for (len -= LOG_BASE; i < len; ) {
                  x4.c.push(+str.slice(i, i += LOG_BASE));
                }
                i = LOG_BASE - (str = str.slice(i)).length;
              } else {
                i -= len;
              }
              for (; i--; str += "0") ;
              x4.c.push(+str);
            }
          } else {
            x4.c = [x4.e = 0];
          }
        }
        BigNumber2.clone = clone;
        BigNumber2.ROUND_UP = 0;
        BigNumber2.ROUND_DOWN = 1;
        BigNumber2.ROUND_CEIL = 2;
        BigNumber2.ROUND_FLOOR = 3;
        BigNumber2.ROUND_HALF_UP = 4;
        BigNumber2.ROUND_HALF_DOWN = 5;
        BigNumber2.ROUND_HALF_EVEN = 6;
        BigNumber2.ROUND_HALF_CEIL = 7;
        BigNumber2.ROUND_HALF_FLOOR = 8;
        BigNumber2.EUCLID = 9;
        BigNumber2.config = BigNumber2.set = function(obj) {
          var p2, v3;
          if (obj != null) {
            if (typeof obj == "object") {
              if (obj.hasOwnProperty(p2 = "DECIMAL_PLACES")) {
                v3 = obj[p2];
                intCheck(v3, 0, MAX, p2);
                DECIMAL_PLACES = v3;
              }
              if (obj.hasOwnProperty(p2 = "ROUNDING_MODE")) {
                v3 = obj[p2];
                intCheck(v3, 0, 8, p2);
                ROUNDING_MODE = v3;
              }
              if (obj.hasOwnProperty(p2 = "EXPONENTIAL_AT")) {
                v3 = obj[p2];
                if (v3 && v3.pop) {
                  intCheck(v3[0], -MAX, 0, p2);
                  intCheck(v3[1], 0, MAX, p2);
                  TO_EXP_NEG = v3[0];
                  TO_EXP_POS = v3[1];
                } else {
                  intCheck(v3, -MAX, MAX, p2);
                  TO_EXP_NEG = -(TO_EXP_POS = v3 < 0 ? -v3 : v3);
                }
              }
              if (obj.hasOwnProperty(p2 = "RANGE")) {
                v3 = obj[p2];
                if (v3 && v3.pop) {
                  intCheck(v3[0], -MAX, -1, p2);
                  intCheck(v3[1], 1, MAX, p2);
                  MIN_EXP = v3[0];
                  MAX_EXP = v3[1];
                } else {
                  intCheck(v3, -MAX, MAX, p2);
                  if (v3) {
                    MIN_EXP = -(MAX_EXP = v3 < 0 ? -v3 : v3);
                  } else {
                    throw Error(bignumberError + p2 + " cannot be zero: " + v3);
                  }
                }
              }
              if (obj.hasOwnProperty(p2 = "CRYPTO")) {
                v3 = obj[p2];
                if (v3 === !!v3) {
                  if (v3) {
                    if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                      CRYPTO = v3;
                    } else {
                      CRYPTO = !v3;
                      throw Error(bignumberError + "crypto unavailable");
                    }
                  } else {
                    CRYPTO = v3;
                  }
                } else {
                  throw Error(bignumberError + p2 + " not true or false: " + v3);
                }
              }
              if (obj.hasOwnProperty(p2 = "MODULO_MODE")) {
                v3 = obj[p2];
                intCheck(v3, 0, 9, p2);
                MODULO_MODE = v3;
              }
              if (obj.hasOwnProperty(p2 = "POW_PRECISION")) {
                v3 = obj[p2];
                intCheck(v3, 0, MAX, p2);
                POW_PRECISION = v3;
              }
              if (obj.hasOwnProperty(p2 = "FORMAT")) {
                v3 = obj[p2];
                if (typeof v3 == "object") FORMAT = v3;
                else throw Error(bignumberError + p2 + " not an object: " + v3);
              }
              if (obj.hasOwnProperty(p2 = "ALPHABET")) {
                v3 = obj[p2];
                if (typeof v3 == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v3)) {
                  alphabetHasNormalDecimalDigits = v3.slice(0, 10) == "0123456789";
                  ALPHABET = v3;
                } else {
                  throw Error(bignumberError + p2 + " invalid: " + v3);
                }
              }
            } else {
              throw Error(bignumberError + "Object expected: " + obj);
            }
          }
          return {
            DECIMAL_PLACES,
            ROUNDING_MODE,
            EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
            RANGE: [MIN_EXP, MAX_EXP],
            CRYPTO,
            MODULO_MODE,
            POW_PRECISION,
            FORMAT,
            ALPHABET
          };
        };
        BigNumber2.isBigNumber = function(v3) {
          if (!v3 || v3._isBigNumber !== true) return false;
          if (!BigNumber2.DEBUG) return true;
          var i, n, c2 = v3.c, e = v3.e, s = v3.s;
          out: if ({}.toString.call(c2) == "[object Array]") {
            if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
              if (c2[0] === 0) {
                if (e === 0 && c2.length === 1) return true;
                break out;
              }
              i = (e + 1) % LOG_BASE;
              if (i < 1) i += LOG_BASE;
              if (String(c2[0]).length == i) {
                for (i = 0; i < c2.length; i++) {
                  n = c2[i];
                  if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
                }
                if (n !== 0) return true;
              }
            }
          } else if (c2 === null && e === null && (s === null || s === 1 || s === -1)) {
            return true;
          }
          throw Error(bignumberError + "Invalid BigNumber: " + v3);
        };
        BigNumber2.maximum = BigNumber2.max = function() {
          return maxOrMin(arguments, -1);
        };
        BigNumber2.minimum = BigNumber2.min = function() {
          return maxOrMin(arguments, 1);
        };
        BigNumber2.random = function() {
          var pow2_53 = 9007199254740992;
          var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
            return mathfloor(Math.random() * pow2_53);
          } : function() {
            return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
          };
          return function(dp) {
            var a, b2, e, k2, v3, i = 0, c2 = [], rand = new BigNumber2(ONE);
            if (dp == null) dp = DECIMAL_PLACES;
            else intCheck(dp, 0, MAX);
            k2 = mathceil(dp / LOG_BASE);
            if (CRYPTO) {
              if (crypto.getRandomValues) {
                a = crypto.getRandomValues(new Uint32Array(k2 *= 2));
                for (; i < k2; ) {
                  v3 = a[i] * 131072 + (a[i + 1] >>> 11);
                  if (v3 >= 9e15) {
                    b2 = crypto.getRandomValues(new Uint32Array(2));
                    a[i] = b2[0];
                    a[i + 1] = b2[1];
                  } else {
                    c2.push(v3 % 1e14);
                    i += 2;
                  }
                }
                i = k2 / 2;
              } else if (crypto.randomBytes) {
                a = crypto.randomBytes(k2 *= 7);
                for (; i < k2; ) {
                  v3 = (a[i] & 31) * 281474976710656 + a[i + 1] * 1099511627776 + a[i + 2] * 4294967296 + a[i + 3] * 16777216 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                  if (v3 >= 9e15) {
                    crypto.randomBytes(7).copy(a, i);
                  } else {
                    c2.push(v3 % 1e14);
                    i += 7;
                  }
                }
                i = k2 / 7;
              } else {
                CRYPTO = false;
                throw Error(bignumberError + "crypto unavailable");
              }
            }
            if (!CRYPTO) {
              for (; i < k2; ) {
                v3 = random53bitInt();
                if (v3 < 9e15) c2[i++] = v3 % 1e14;
              }
            }
            k2 = c2[--i];
            dp %= LOG_BASE;
            if (k2 && dp) {
              v3 = POWS_TEN[LOG_BASE - dp];
              c2[i] = mathfloor(k2 / v3) * v3;
            }
            for (; c2[i] === 0; c2.pop(), i--) ;
            if (i < 0) {
              c2 = [e = 0];
            } else {
              for (e = -1; c2[0] === 0; c2.splice(0, 1), e -= LOG_BASE) ;
              for (i = 1, v3 = c2[0]; v3 >= 10; v3 /= 10, i++) ;
              if (i < LOG_BASE) e -= LOG_BASE - i;
            }
            rand.e = e;
            rand.c = c2;
            return rand;
          };
        }();
        BigNumber2.sum = function() {
          var i = 1, args = arguments, sum = new BigNumber2(args[0]);
          for (; i < args.length; ) sum = sum.plus(args[i++]);
          return sum;
        };
        convertBase = /* @__PURE__ */ function() {
          var decimal = "0123456789";
          function toBaseOut(str, baseIn, baseOut, alphabet) {
            var j2, arr = [0], arrL, i = 0, len = str.length;
            for (; i < len; ) {
              for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) ;
              arr[0] += alphabet.indexOf(str.charAt(i++));
              for (j2 = 0; j2 < arr.length; j2++) {
                if (arr[j2] > baseOut - 1) {
                  if (arr[j2 + 1] == null) arr[j2 + 1] = 0;
                  arr[j2 + 1] += arr[j2] / baseOut | 0;
                  arr[j2] %= baseOut;
                }
              }
            }
            return arr.reverse();
          }
          return function(str, baseIn, baseOut, sign, callerIsToString) {
            var alphabet, d2, e, k2, r, x4, xc, y2, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
            if (i >= 0) {
              k2 = POW_PRECISION;
              POW_PRECISION = 0;
              str = str.replace(".", "");
              y2 = new BigNumber2(baseIn);
              x4 = y2.pow(str.length - i);
              POW_PRECISION = k2;
              y2.c = toBaseOut(
                toFixedPoint(coeffToString(x4.c), x4.e, "0"),
                10,
                baseOut,
                decimal
              );
              y2.e = y2.c.length;
            }
            xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
            e = k2 = xc.length;
            for (; xc[--k2] == 0; xc.pop()) ;
            if (!xc[0]) return alphabet.charAt(0);
            if (i < 0) {
              --e;
            } else {
              x4.c = xc;
              x4.e = e;
              x4.s = sign;
              x4 = div(x4, y2, dp, rm, baseOut);
              xc = x4.c;
              r = x4.r;
              e = x4.e;
            }
            d2 = e + dp + 1;
            i = xc[d2];
            k2 = baseOut / 2;
            r = r || d2 < 0 || xc[d2 + 1] != null;
            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x4.s < 0 ? 3 : 2)) : i > k2 || i == k2 && (rm == 4 || r || rm == 6 && xc[d2 - 1] & 1 || rm == (x4.s < 0 ? 8 : 7));
            if (d2 < 1 || !xc[0]) {
              str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
            } else {
              xc.length = d2;
              if (r) {
                for (--baseOut; ++xc[--d2] > baseOut; ) {
                  xc[d2] = 0;
                  if (!d2) {
                    ++e;
                    xc = [1].concat(xc);
                  }
                }
              }
              for (k2 = xc.length; !xc[--k2]; ) ;
              for (i = 0, str = ""; i <= k2; str += alphabet.charAt(xc[i++])) ;
              str = toFixedPoint(str, e, alphabet.charAt(0));
            }
            return str;
          };
        }();
        div = /* @__PURE__ */ function() {
          function multiply(x4, k2, base) {
            var m2, temp, xlo, xhi, carry = 0, i = x4.length, klo = k2 % SQRT_BASE, khi = k2 / SQRT_BASE | 0;
            for (x4 = x4.slice(); i--; ) {
              xlo = x4[i] % SQRT_BASE;
              xhi = x4[i] / SQRT_BASE | 0;
              m2 = khi * xlo + xhi * klo;
              temp = klo * xlo + m2 % SQRT_BASE * SQRT_BASE + carry;
              carry = (temp / base | 0) + (m2 / SQRT_BASE | 0) + khi * xhi;
              x4[i] = temp % base;
            }
            if (carry) x4 = [carry].concat(x4);
            return x4;
          }
          function compare2(a, b2, aL, bL) {
            var i, cmp;
            if (aL != bL) {
              cmp = aL > bL ? 1 : -1;
            } else {
              for (i = cmp = 0; i < aL; i++) {
                if (a[i] != b2[i]) {
                  cmp = a[i] > b2[i] ? 1 : -1;
                  break;
                }
              }
            }
            return cmp;
          }
          function subtract(a, b2, aL, base) {
            var i = 0;
            for (; aL--; ) {
              a[aL] -= i;
              i = a[aL] < b2[aL] ? 1 : 0;
              a[aL] = i * base + a[aL] - b2[aL];
            }
            for (; !a[0] && a.length > 1; a.splice(0, 1)) ;
          }
          return function(x4, y2, dp, rm, base) {
            var cmp, e, i, more, n, prod, prodL, q2, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x4.s == y2.s ? 1 : -1, xc = x4.c, yc = y2.c;
            if (!xc || !xc[0] || !yc || !yc[0]) {
              return new BigNumber2(
                // Return NaN if either NaN, or both Infinity or 0.
                !x4.s || !y2.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
                  // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                  xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                )
              );
            }
            q2 = new BigNumber2(s);
            qc = q2.c = [];
            e = x4.e - y2.e;
            s = dp + e + 1;
            if (!base) {
              base = BASE;
              e = bitFloor(x4.e / LOG_BASE) - bitFloor(y2.e / LOG_BASE);
              s = s / LOG_BASE | 0;
            }
            for (i = 0; yc[i] == (xc[i] || 0); i++) ;
            if (yc[i] > (xc[i] || 0)) e--;
            if (s < 0) {
              qc.push(1);
              more = true;
            } else {
              xL = xc.length;
              yL = yc.length;
              i = 0;
              s += 2;
              n = mathfloor(base / (yc[0] + 1));
              if (n > 1) {
                yc = multiply(yc, n, base);
                xc = multiply(xc, n, base);
                yL = yc.length;
                xL = xc.length;
              }
              xi = yL;
              rem = xc.slice(0, yL);
              remL = rem.length;
              for (; remL < yL; rem[remL++] = 0) ;
              yz = yc.slice();
              yz = [0].concat(yz);
              yc0 = yc[0];
              if (yc[1] >= base / 2) yc0++;
              do {
                n = 0;
                cmp = compare2(yc, rem, yL, remL);
                if (cmp < 0) {
                  rem0 = rem[0];
                  if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
                  n = mathfloor(rem0 / yc0);
                  if (n > 1) {
                    if (n >= base) n = base - 1;
                    prod = multiply(yc, n, base);
                    prodL = prod.length;
                    remL = rem.length;
                    while (compare2(prod, rem, prodL, remL) == 1) {
                      n--;
                      subtract(prod, yL < prodL ? yz : yc, prodL, base);
                      prodL = prod.length;
                      cmp = 1;
                    }
                  } else {
                    if (n == 0) {
                      cmp = n = 1;
                    }
                    prod = yc.slice();
                    prodL = prod.length;
                  }
                  if (prodL < remL) prod = [0].concat(prod);
                  subtract(rem, prod, remL, base);
                  remL = rem.length;
                  if (cmp == -1) {
                    while (compare2(yc, rem, yL, remL) < 1) {
                      n++;
                      subtract(rem, yL < remL ? yz : yc, remL, base);
                      remL = rem.length;
                    }
                  }
                } else if (cmp === 0) {
                  n++;
                  rem = [0];
                }
                qc[i++] = n;
                if (rem[0]) {
                  rem[remL++] = xc[xi] || 0;
                } else {
                  rem = [xc[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] != null) && s--);
              more = rem[0] != null;
              if (!qc[0]) qc.splice(0, 1);
            }
            if (base == BASE) {
              for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) ;
              round(q2, dp + (q2.e = i + e * LOG_BASE - 1) + 1, rm, more);
            } else {
              q2.e = e;
              q2.r = +more;
            }
            return q2;
          };
        }();
        function format(n, i, rm, id) {
          var c0, e, ne2, len, str;
          if (rm == null) rm = ROUNDING_MODE;
          else intCheck(rm, 0, 8);
          if (!n.c) return n.toString();
          c0 = n.c[0];
          ne2 = n.e;
          if (i == null) {
            str = coeffToString(n.c);
            str = id == 1 || id == 2 && (ne2 <= TO_EXP_NEG || ne2 >= TO_EXP_POS) ? toExponential(str, ne2) : toFixedPoint(str, ne2, "0");
          } else {
            n = round(new BigNumber2(n), i, rm);
            e = n.e;
            str = coeffToString(n.c);
            len = str.length;
            if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
              for (; len < i; str += "0", len++) ;
              str = toExponential(str, e);
            } else {
              i -= ne2;
              str = toFixedPoint(str, e, "0");
              if (e + 1 > len) {
                if (--i > 0) for (str += "."; i--; str += "0") ;
              } else {
                i += e - len;
                if (i > 0) {
                  if (e + 1 == len) str += ".";
                  for (; i--; str += "0") ;
                }
              }
            }
          }
          return n.s < 0 && c0 ? "-" + str : str;
        }
        function maxOrMin(args, n) {
          var k2, y2, i = 1, x4 = new BigNumber2(args[0]);
          for (; i < args.length; i++) {
            y2 = new BigNumber2(args[i]);
            if (!y2.s || (k2 = compare(x4, y2)) === n || k2 === 0 && x4.s === n) {
              x4 = y2;
            }
          }
          return x4;
        }
        function normalise(n, c2, e) {
          var i = 1, j2 = c2.length;
          for (; !c2[--j2]; c2.pop()) ;
          for (j2 = c2[0]; j2 >= 10; j2 /= 10, i++) ;
          if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
            n.c = n.e = null;
          } else if (e < MIN_EXP) {
            n.c = [n.e = 0];
          } else {
            n.e = e;
            n.c = c2;
          }
          return n;
        }
        parseNumeric = /* @__PURE__ */ function() {
          var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
          return function(x4, str, isNum, b2) {
            var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
            if (isInfinityOrNaN.test(s)) {
              x4.s = isNaN(s) ? null : s < 0 ? -1 : 1;
            } else {
              if (!isNum) {
                s = s.replace(basePrefix, function(m2, p1, p2) {
                  base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                  return !b2 || b2 == base ? p1 : m2;
                });
                if (b2) {
                  base = b2;
                  s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
                }
                if (str != s) return new BigNumber2(s, base);
              }
              if (BigNumber2.DEBUG) {
                throw Error(bignumberError + "Not a" + (b2 ? " base " + b2 : "") + " number: " + str);
              }
              x4.s = null;
            }
            x4.c = x4.e = null;
          };
        }();
        function round(x4, sd, rm, r) {
          var d2, i, j2, k2, n, ni, rd, xc = x4.c, pows10 = POWS_TEN;
          if (xc) {
            out: {
              for (d2 = 1, k2 = xc[0]; k2 >= 10; k2 /= 10, d2++) ;
              i = sd - d2;
              if (i < 0) {
                i += LOG_BASE;
                j2 = sd;
                n = xc[ni = 0];
                rd = mathfloor(n / pows10[d2 - j2 - 1] % 10);
              } else {
                ni = mathceil((i + 1) / LOG_BASE);
                if (ni >= xc.length) {
                  if (r) {
                    for (; xc.length <= ni; xc.push(0)) ;
                    n = rd = 0;
                    d2 = 1;
                    i %= LOG_BASE;
                    j2 = i - LOG_BASE + 1;
                  } else {
                    break out;
                  }
                } else {
                  n = k2 = xc[ni];
                  for (d2 = 1; k2 >= 10; k2 /= 10, d2++) ;
                  i %= LOG_BASE;
                  j2 = i - LOG_BASE + d2;
                  rd = j2 < 0 ? 0 : mathfloor(n / pows10[d2 - j2 - 1] % 10);
                }
              }
              r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
              // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
              // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
              xc[ni + 1] != null || (j2 < 0 ? n : n % pows10[d2 - j2 - 1]);
              r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x4.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
              (i > 0 ? j2 > 0 ? n / pows10[d2 - j2] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x4.s < 0 ? 8 : 7));
              if (sd < 1 || !xc[0]) {
                xc.length = 0;
                if (r) {
                  sd -= x4.e + 1;
                  xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                  x4.e = -sd || 0;
                } else {
                  xc[0] = x4.e = 0;
                }
                return x4;
              }
              if (i == 0) {
                xc.length = ni;
                k2 = 1;
                ni--;
              } else {
                xc.length = ni + 1;
                k2 = pows10[LOG_BASE - i];
                xc[ni] = j2 > 0 ? mathfloor(n / pows10[d2 - j2] % pows10[j2]) * k2 : 0;
              }
              if (r) {
                for (; ; ) {
                  if (ni == 0) {
                    for (i = 1, j2 = xc[0]; j2 >= 10; j2 /= 10, i++) ;
                    j2 = xc[0] += k2;
                    for (k2 = 1; j2 >= 10; j2 /= 10, k2++) ;
                    if (i != k2) {
                      x4.e++;
                      if (xc[0] == BASE) xc[0] = 1;
                    }
                    break;
                  } else {
                    xc[ni] += k2;
                    if (xc[ni] != BASE) break;
                    xc[ni--] = 0;
                    k2 = 1;
                  }
                }
              }
              for (i = xc.length; xc[--i] === 0; xc.pop()) ;
            }
            if (x4.e > MAX_EXP) {
              x4.c = x4.e = null;
            } else if (x4.e < MIN_EXP) {
              x4.c = [x4.e = 0];
            }
          }
          return x4;
        }
        function valueOf(n) {
          var str, e = n.e;
          if (e === null) return n.toString();
          str = coeffToString(n.c);
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
          return n.s < 0 ? "-" + str : str;
        }
        P4.absoluteValue = P4.abs = function() {
          var x4 = new BigNumber2(this);
          if (x4.s < 0) x4.s = 1;
          return x4;
        };
        P4.comparedTo = function(y2, b2) {
          return compare(this, new BigNumber2(y2, b2));
        };
        P4.decimalPlaces = P4.dp = function(dp, rm) {
          var c2, n, v3, x4 = this;
          if (dp != null) {
            intCheck(dp, 0, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            return round(new BigNumber2(x4), dp + x4.e + 1, rm);
          }
          if (!(c2 = x4.c)) return null;
          n = ((v3 = c2.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
          if (v3 = c2[v3]) for (; v3 % 10 == 0; v3 /= 10, n--) ;
          if (n < 0) n = 0;
          return n;
        };
        P4.dividedBy = P4.div = function(y2, b2) {
          return div(this, new BigNumber2(y2, b2), DECIMAL_PLACES, ROUNDING_MODE);
        };
        P4.dividedToIntegerBy = P4.idiv = function(y2, b2) {
          return div(this, new BigNumber2(y2, b2), 0, 1);
        };
        P4.exponentiatedBy = P4.pow = function(n, m2) {
          var half, isModExp, i, k2, more, nIsBig, nIsNeg, nIsOdd, y2, x4 = this;
          n = new BigNumber2(n);
          if (n.c && !n.isInteger()) {
            throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
          }
          if (m2 != null) m2 = new BigNumber2(m2);
          nIsBig = n.e > 14;
          if (!x4.c || !x4.c[0] || x4.c[0] == 1 && !x4.e && x4.c.length == 1 || !n.c || !n.c[0]) {
            y2 = new BigNumber2(Math.pow(+valueOf(x4), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
            return m2 ? y2.mod(m2) : y2;
          }
          nIsNeg = n.s < 0;
          if (m2) {
            if (m2.c ? !m2.c[0] : !m2.s) return new BigNumber2(NaN);
            isModExp = !nIsNeg && x4.isInteger() && m2.isInteger();
            if (isModExp) x4 = x4.mod(m2);
          } else if (n.e > 9 && (x4.e > 0 || x4.e < -1 || (x4.e == 0 ? x4.c[0] > 1 || nIsBig && x4.c[1] >= 24e7 : x4.c[0] < 8e13 || nIsBig && x4.c[0] <= 9999975e7))) {
            k2 = x4.s < 0 && isOdd(n) ? -0 : 0;
            if (x4.e > -1) k2 = 1 / k2;
            return new BigNumber2(nIsNeg ? 1 / k2 : k2);
          } else if (POW_PRECISION) {
            k2 = mathceil(POW_PRECISION / LOG_BASE + 2);
          }
          if (nIsBig) {
            half = new BigNumber2(0.5);
            if (nIsNeg) n.s = 1;
            nIsOdd = isOdd(n);
          } else {
            i = Math.abs(+valueOf(n));
            nIsOdd = i % 2;
          }
          y2 = new BigNumber2(ONE);
          for (; ; ) {
            if (nIsOdd) {
              y2 = y2.times(x4);
              if (!y2.c) break;
              if (k2) {
                if (y2.c.length > k2) y2.c.length = k2;
              } else if (isModExp) {
                y2 = y2.mod(m2);
              }
            }
            if (i) {
              i = mathfloor(i / 2);
              if (i === 0) break;
              nIsOdd = i % 2;
            } else {
              n = n.times(half);
              round(n, n.e + 1, 1);
              if (n.e > 14) {
                nIsOdd = isOdd(n);
              } else {
                i = +valueOf(n);
                if (i === 0) break;
                nIsOdd = i % 2;
              }
            }
            x4 = x4.times(x4);
            if (k2) {
              if (x4.c && x4.c.length > k2) x4.c.length = k2;
            } else if (isModExp) {
              x4 = x4.mod(m2);
            }
          }
          if (isModExp) return y2;
          if (nIsNeg) y2 = ONE.div(y2);
          return m2 ? y2.mod(m2) : k2 ? round(y2, POW_PRECISION, ROUNDING_MODE, more) : y2;
        };
        P4.integerValue = function(rm) {
          var n = new BigNumber2(this);
          if (rm == null) rm = ROUNDING_MODE;
          else intCheck(rm, 0, 8);
          return round(n, n.e + 1, rm);
        };
        P4.isEqualTo = P4.eq = function(y2, b2) {
          return compare(this, new BigNumber2(y2, b2)) === 0;
        };
        P4.isFinite = function() {
          return !!this.c;
        };
        P4.isGreaterThan = P4.gt = function(y2, b2) {
          return compare(this, new BigNumber2(y2, b2)) > 0;
        };
        P4.isGreaterThanOrEqualTo = P4.gte = function(y2, b2) {
          return (b2 = compare(this, new BigNumber2(y2, b2))) === 1 || b2 === 0;
        };
        P4.isInteger = function() {
          return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
        P4.isLessThan = P4.lt = function(y2, b2) {
          return compare(this, new BigNumber2(y2, b2)) < 0;
        };
        P4.isLessThanOrEqualTo = P4.lte = function(y2, b2) {
          return (b2 = compare(this, new BigNumber2(y2, b2))) === -1 || b2 === 0;
        };
        P4.isNaN = function() {
          return !this.s;
        };
        P4.isNegative = function() {
          return this.s < 0;
        };
        P4.isPositive = function() {
          return this.s > 0;
        };
        P4.isZero = function() {
          return !!this.c && this.c[0] == 0;
        };
        P4.minus = function(y2, b2) {
          var i, j2, t, xLTy, x4 = this, a = x4.s;
          y2 = new BigNumber2(y2, b2);
          b2 = y2.s;
          if (!a || !b2) return new BigNumber2(NaN);
          if (a != b2) {
            y2.s = -b2;
            return x4.plus(y2);
          }
          var xe2 = x4.e / LOG_BASE, ye2 = y2.e / LOG_BASE, xc = x4.c, yc = y2.c;
          if (!xe2 || !ye2) {
            if (!xc || !yc) return xc ? (y2.s = -b2, y2) : new BigNumber2(yc ? x4 : NaN);
            if (!xc[0] || !yc[0]) {
              return yc[0] ? (y2.s = -b2, y2) : new BigNumber2(xc[0] ? x4 : (
                // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                ROUNDING_MODE == 3 ? -0 : 0
              ));
            }
          }
          xe2 = bitFloor(xe2);
          ye2 = bitFloor(ye2);
          xc = xc.slice();
          if (a = xe2 - ye2) {
            if (xLTy = a < 0) {
              a = -a;
              t = xc;
            } else {
              ye2 = xe2;
              t = yc;
            }
            t.reverse();
            for (b2 = a; b2--; t.push(0)) ;
            t.reverse();
          } else {
            j2 = (xLTy = (a = xc.length) < (b2 = yc.length)) ? a : b2;
            for (a = b2 = 0; b2 < j2; b2++) {
              if (xc[b2] != yc[b2]) {
                xLTy = xc[b2] < yc[b2];
                break;
              }
            }
          }
          if (xLTy) {
            t = xc;
            xc = yc;
            yc = t;
            y2.s = -y2.s;
          }
          b2 = (j2 = yc.length) - (i = xc.length);
          if (b2 > 0) for (; b2--; xc[i++] = 0) ;
          b2 = BASE - 1;
          for (; j2 > a; ) {
            if (xc[--j2] < yc[j2]) {
              for (i = j2; i && !xc[--i]; xc[i] = b2) ;
              --xc[i];
              xc[j2] += BASE;
            }
            xc[j2] -= yc[j2];
          }
          for (; xc[0] == 0; xc.splice(0, 1), --ye2) ;
          if (!xc[0]) {
            y2.s = ROUNDING_MODE == 3 ? -1 : 1;
            y2.c = [y2.e = 0];
            return y2;
          }
          return normalise(y2, xc, ye2);
        };
        P4.modulo = P4.mod = function(y2, b2) {
          var q2, s, x4 = this;
          y2 = new BigNumber2(y2, b2);
          if (!x4.c || !y2.s || y2.c && !y2.c[0]) {
            return new BigNumber2(NaN);
          } else if (!y2.c || x4.c && !x4.c[0]) {
            return new BigNumber2(x4);
          }
          if (MODULO_MODE == 9) {
            s = y2.s;
            y2.s = 1;
            q2 = div(x4, y2, 0, 3);
            y2.s = s;
            q2.s *= s;
          } else {
            q2 = div(x4, y2, 0, MODULO_MODE);
          }
          y2 = x4.minus(q2.times(y2));
          if (!y2.c[0] && MODULO_MODE == 1) y2.s = x4.s;
          return y2;
        };
        P4.multipliedBy = P4.times = function(y2, b2) {
          var c2, e, i, j2, k2, m2, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x4 = this, xc = x4.c, yc = (y2 = new BigNumber2(y2, b2)).c;
          if (!xc || !yc || !xc[0] || !yc[0]) {
            if (!x4.s || !y2.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
              y2.c = y2.e = y2.s = null;
            } else {
              y2.s *= x4.s;
              if (!xc || !yc) {
                y2.c = y2.e = null;
              } else {
                y2.c = [0];
                y2.e = 0;
              }
            }
            return y2;
          }
          e = bitFloor(x4.e / LOG_BASE) + bitFloor(y2.e / LOG_BASE);
          y2.s *= x4.s;
          xcL = xc.length;
          ycL = yc.length;
          if (xcL < ycL) {
            zc = xc;
            xc = yc;
            yc = zc;
            i = xcL;
            xcL = ycL;
            ycL = i;
          }
          for (i = xcL + ycL, zc = []; i--; zc.push(0)) ;
          base = BASE;
          sqrtBase = SQRT_BASE;
          for (i = ycL; --i >= 0; ) {
            c2 = 0;
            ylo = yc[i] % sqrtBase;
            yhi = yc[i] / sqrtBase | 0;
            for (k2 = xcL, j2 = i + k2; j2 > i; ) {
              xlo = xc[--k2] % sqrtBase;
              xhi = xc[k2] / sqrtBase | 0;
              m2 = yhi * xlo + xhi * ylo;
              xlo = ylo * xlo + m2 % sqrtBase * sqrtBase + zc[j2] + c2;
              c2 = (xlo / base | 0) + (m2 / sqrtBase | 0) + yhi * xhi;
              zc[j2--] = xlo % base;
            }
            zc[j2] = c2;
          }
          if (c2) {
            ++e;
          } else {
            zc.splice(0, 1);
          }
          return normalise(y2, zc, e);
        };
        P4.negated = function() {
          var x4 = new BigNumber2(this);
          x4.s = -x4.s || null;
          return x4;
        };
        P4.plus = function(y2, b2) {
          var t, x4 = this, a = x4.s;
          y2 = new BigNumber2(y2, b2);
          b2 = y2.s;
          if (!a || !b2) return new BigNumber2(NaN);
          if (a != b2) {
            y2.s = -b2;
            return x4.minus(y2);
          }
          var xe2 = x4.e / LOG_BASE, ye2 = y2.e / LOG_BASE, xc = x4.c, yc = y2.c;
          if (!xe2 || !ye2) {
            if (!xc || !yc) return new BigNumber2(a / 0);
            if (!xc[0] || !yc[0]) return yc[0] ? y2 : new BigNumber2(xc[0] ? x4 : a * 0);
          }
          xe2 = bitFloor(xe2);
          ye2 = bitFloor(ye2);
          xc = xc.slice();
          if (a = xe2 - ye2) {
            if (a > 0) {
              ye2 = xe2;
              t = yc;
            } else {
              a = -a;
              t = xc;
            }
            t.reverse();
            for (; a--; t.push(0)) ;
            t.reverse();
          }
          a = xc.length;
          b2 = yc.length;
          if (a - b2 < 0) {
            t = yc;
            yc = xc;
            xc = t;
            b2 = a;
          }
          for (a = 0; b2; ) {
            a = (xc[--b2] = xc[b2] + yc[b2] + a) / BASE | 0;
            xc[b2] = BASE === xc[b2] ? 0 : xc[b2] % BASE;
          }
          if (a) {
            xc = [a].concat(xc);
            ++ye2;
          }
          return normalise(y2, xc, ye2);
        };
        P4.precision = P4.sd = function(sd, rm) {
          var c2, n, v3, x4 = this;
          if (sd != null && sd !== !!sd) {
            intCheck(sd, 1, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            return round(new BigNumber2(x4), sd, rm);
          }
          if (!(c2 = x4.c)) return null;
          v3 = c2.length - 1;
          n = v3 * LOG_BASE + 1;
          if (v3 = c2[v3]) {
            for (; v3 % 10 == 0; v3 /= 10, n--) ;
            for (v3 = c2[0]; v3 >= 10; v3 /= 10, n++) ;
          }
          if (sd && x4.e + 1 > n) n = x4.e + 1;
          return n;
        };
        P4.shiftedBy = function(k2) {
          intCheck(k2, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
          return this.times("1e" + k2);
        };
        P4.squareRoot = P4.sqrt = function() {
          var m2, n, r, rep, t, x4 = this, c2 = x4.c, s = x4.s, e = x4.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
          if (s !== 1 || !c2 || !c2[0]) {
            return new BigNumber2(!s || s < 0 && (!c2 || c2[0]) ? NaN : c2 ? x4 : 1 / 0);
          }
          s = Math.sqrt(+valueOf(x4));
          if (s == 0 || s == 1 / 0) {
            n = coeffToString(c2);
            if ((n.length + e) % 2 == 0) n += "0";
            s = Math.sqrt(+n);
            e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
            if (s == 1 / 0) {
              n = "5e" + e;
            } else {
              n = s.toExponential();
              n = n.slice(0, n.indexOf("e") + 1) + e;
            }
            r = new BigNumber2(n);
          } else {
            r = new BigNumber2(s + "");
          }
          if (r.c[0]) {
            e = r.e;
            s = e + dp;
            if (s < 3) s = 0;
            for (; ; ) {
              t = r;
              r = half.times(t.plus(div(x4, t, dp, 1)));
              if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
                if (r.e < e) --s;
                n = n.slice(s - 3, s + 1);
                if (n == "9999" || !rep && n == "4999") {
                  if (!rep) {
                    round(t, t.e + DECIMAL_PLACES + 2, 0);
                    if (t.times(t).eq(x4)) {
                      r = t;
                      break;
                    }
                  }
                  dp += 4;
                  s += 4;
                  rep = 1;
                } else {
                  if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                    round(r, r.e + DECIMAL_PLACES + 2, 1);
                    m2 = !r.times(r).eq(x4);
                  }
                  break;
                }
              }
            }
          }
          return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m2);
        };
        P4.toExponential = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp++;
          }
          return format(this, dp, rm, 1);
        };
        P4.toFixed = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp = dp + this.e + 1;
          }
          return format(this, dp, rm);
        };
        P4.toFormat = function(dp, rm, format2) {
          var str, x4 = this;
          if (format2 == null) {
            if (dp != null && rm && typeof rm == "object") {
              format2 = rm;
              rm = null;
            } else if (dp && typeof dp == "object") {
              format2 = dp;
              dp = rm = null;
            } else {
              format2 = FORMAT;
            }
          } else if (typeof format2 != "object") {
            throw Error(bignumberError + "Argument not an object: " + format2);
          }
          str = x4.toFixed(dp, rm);
          if (x4.c) {
            var i, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x4.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
            if (g2) {
              i = g1;
              g1 = g2;
              g2 = i;
              len -= i;
            }
            if (g1 > 0 && len > 0) {
              i = len % g1 || g1;
              intPart = intDigits.substr(0, i);
              for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
              if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
              if (isNeg) intPart = "-" + intPart;
            }
            str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
              new RegExp("\\d{" + g2 + "}\\B", "g"),
              "$&" + (format2.fractionGroupSeparator || "")
            ) : fractionPart) : intPart;
          }
          return (format2.prefix || "") + str + (format2.suffix || "");
        };
        P4.toFraction = function(md) {
          var d2, d0, d1, d22, e, exp, n, n0, n1, q2, r, s, x4 = this, xc = x4.c;
          if (md != null) {
            n = new BigNumber2(md);
            if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
              throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
            }
          }
          if (!xc) return new BigNumber2(x4);
          d2 = new BigNumber2(ONE);
          n1 = d0 = new BigNumber2(ONE);
          d1 = n0 = new BigNumber2(ONE);
          s = coeffToString(xc);
          e = d2.e = s.length - x4.e - 1;
          d2.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
          md = !md || n.comparedTo(d2) > 0 ? e > 0 ? d2 : n1 : n;
          exp = MAX_EXP;
          MAX_EXP = 1 / 0;
          n = new BigNumber2(s);
          n0.c[0] = 0;
          for (; ; ) {
            q2 = div(n, d2, 0, 1);
            d22 = d0.plus(q2.times(d1));
            if (d22.comparedTo(md) == 1) break;
            d0 = d1;
            d1 = d22;
            n1 = n0.plus(q2.times(d22 = n1));
            n0 = d22;
            d2 = n.minus(q2.times(d22 = d2));
            n = d22;
          }
          d22 = div(md.minus(d0), d1, 0, 1);
          n0 = n0.plus(d22.times(n1));
          d0 = d0.plus(d22.times(d1));
          n0.s = n1.s = x4.s;
          e = e * 2;
          r = div(n1, d1, e, ROUNDING_MODE).minus(x4).abs().comparedTo(
            div(n0, d0, e, ROUNDING_MODE).minus(x4).abs()
          ) < 1 ? [n1, d1] : [n0, d0];
          MAX_EXP = exp;
          return r;
        };
        P4.toNumber = function() {
          return +valueOf(this);
        };
        P4.toPrecision = function(sd, rm) {
          if (sd != null) intCheck(sd, 1, MAX);
          return format(this, sd, rm, 2);
        };
        P4.toString = function(b2) {
          var str, n = this, s = n.s, e = n.e;
          if (e === null) {
            if (s) {
              str = "Infinity";
              if (s < 0) str = "-" + str;
            } else {
              str = "NaN";
            }
          } else {
            if (b2 == null) {
              str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
            } else if (b2 === 10 && alphabetHasNormalDecimalDigits) {
              n = round(new BigNumber2(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
              str = toFixedPoint(coeffToString(n.c), n.e, "0");
            } else {
              intCheck(b2, 2, ALPHABET.length, "Base");
              str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b2, s, true);
            }
            if (s < 0 && n.c[0]) str = "-" + str;
          }
          return str;
        };
        P4.valueOf = P4.toJSON = function() {
          return valueOf(this);
        };
        P4._isBigNumber = true;
        if (configObject != null) BigNumber2.set(configObject);
        return BigNumber2;
      }
      function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
      }
      function coeffToString(a) {
        var s, z5, i = 1, j2 = a.length, r = a[0] + "";
        for (; i < j2; ) {
          s = a[i++] + "";
          z5 = LOG_BASE - s.length;
          for (; z5--; s = "0" + s) ;
          r += s;
        }
        for (j2 = r.length; r.charCodeAt(--j2) === 48; ) ;
        return r.slice(0, j2 + 1 || 1);
      }
      function compare(x4, y2) {
        var a, b2, xc = x4.c, yc = y2.c, i = x4.s, j2 = y2.s, k2 = x4.e, l = y2.e;
        if (!i || !j2) return null;
        a = xc && !xc[0];
        b2 = yc && !yc[0];
        if (a || b2) return a ? b2 ? 0 : -j2 : i;
        if (i != j2) return i;
        a = i < 0;
        b2 = k2 == l;
        if (!xc || !yc) return b2 ? 0 : !xc ^ a ? 1 : -1;
        if (!b2) return k2 > l ^ a ? 1 : -1;
        j2 = (k2 = xc.length) < (l = yc.length) ? k2 : l;
        for (i = 0; i < j2; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
        return k2 == l ? 0 : k2 > l ^ a ? 1 : -1;
      }
      function intCheck(n, min, max3, name) {
        if (n < min || n > max3 || n !== mathfloor(n)) {
          throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min || n > max3 ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
        }
      }
      function isOdd(n) {
        var k2 = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k2 && n.c[k2] % 2 != 0;
      }
      function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
      }
      function toFixedPoint(str, e, z5) {
        var len, zs2;
        if (e < 0) {
          for (zs2 = z5 + "."; ++e; zs2 += z5) ;
          str = zs2 + str;
        } else {
          len = str.length;
          if (++e > len) {
            for (zs2 = z5, e -= len; --e; zs2 += z5) ;
            str += zs2;
          } else if (e < len) {
            str = str.slice(0, e) + "." + str.slice(e);
          }
        }
        return str;
      }
      BigNumber = clone();
      BigNumber["default"] = BigNumber.BigNumber = BigNumber;
      if (typeof define == "function" && define.amd) {
        define(function() {
          return BigNumber;
        });
      } else if (typeof module2 != "undefined" && module2.exports) {
        module2.exports = BigNumber;
      } else {
        if (!globalObject) {
          globalObject = typeof self != "undefined" && self ? self : window;
        }
        globalObject.BigNumber = BigNumber;
      }
    })(exports);
  }
});

// node_modules/arweave/web/ar.js
var require_ar = __commonJS({
  "node_modules/arweave/web/ar.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var bignumber_js_1 = require_bignumber();
    var Ar4 = class {
      constructor() {
        /**
         * Method to take a string value and return a bignumber object.
         *
         * @protected
         * @type {Function}
         * @memberof Arweave
         */
        __publicField(this, "BigNum");
        this.BigNum = (value, decimals) => {
          let instance = bignumber_js_1.BigNumber.clone({ DECIMAL_PLACES: decimals });
          return new instance(value);
        };
      }
      winstonToAr(winstonString, { formatted = false, decimals = 12, trim = true } = {}) {
        let number = this.stringToBigNum(winstonString, decimals).shiftedBy(-12);
        return formatted ? number.toFormat(decimals) : number.toFixed(decimals);
      }
      arToWinston(arString, { formatted = false } = {}) {
        let number = this.stringToBigNum(arString).shiftedBy(12);
        return formatted ? number.toFormat() : number.toFixed(0);
      }
      compare(winstonStringA, winstonStringB) {
        let a = this.stringToBigNum(winstonStringA);
        let b2 = this.stringToBigNum(winstonStringB);
        return a.comparedTo(b2);
      }
      isEqual(winstonStringA, winstonStringB) {
        return this.compare(winstonStringA, winstonStringB) === 0;
      }
      isLessThan(winstonStringA, winstonStringB) {
        let a = this.stringToBigNum(winstonStringA);
        let b2 = this.stringToBigNum(winstonStringB);
        return a.isLessThan(b2);
      }
      isGreaterThan(winstonStringA, winstonStringB) {
        let a = this.stringToBigNum(winstonStringA);
        let b2 = this.stringToBigNum(winstonStringB);
        return a.isGreaterThan(b2);
      }
      add(winstonStringA, winstonStringB) {
        let a = this.stringToBigNum(winstonStringA);
        let b2 = this.stringToBigNum(winstonStringB);
        return a.plus(winstonStringB).toFixed(0);
      }
      sub(winstonStringA, winstonStringB) {
        let a = this.stringToBigNum(winstonStringA);
        let b2 = this.stringToBigNum(winstonStringB);
        return a.minus(winstonStringB).toFixed(0);
      }
      stringToBigNum(stringValue, decimalPlaces = 12) {
        return this.BigNum(stringValue, decimalPlaces);
      }
    };
    exports.default = Ar4;
  }
});

// node_modules/arweave/web/lib/api.js
var require_api = __commonJS({
  "node_modules/arweave/web/lib/api.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Api = class {
      constructor(config) {
        __publicField(this, "METHOD_GET", "GET");
        __publicField(this, "METHOD_POST", "POST");
        __publicField(this, "config");
        this.applyConfig(config);
      }
      applyConfig(config) {
        this.config = this.mergeDefaults(config);
      }
      getConfig() {
        return this.config;
      }
      mergeDefaults(config) {
        const protocol = config.protocol || "http";
        const port = config.port || (protocol === "https" ? 443 : 80);
        return {
          host: config.host || "127.0.0.1",
          protocol,
          port,
          timeout: config.timeout || 2e4,
          logging: config.logging || false,
          logger: config.logger || console.log,
          network: config.network
        };
      }
      async get(endpoint, config) {
        return await this.request(endpoint, { ...config, method: this.METHOD_GET });
      }
      async post(endpoint, body, config) {
        var _a7;
        const headers = new Headers((config == null ? void 0 : config.headers) || {});
        if (!((_a7 = headers.get("content-type")) == null ? void 0 : _a7.includes("application/json"))) {
          headers.append("content-type", "application/json");
        }
        headers.append("accept", "application/json, text/plain, */*");
        return await this.request(endpoint, {
          ...config,
          method: this.METHOD_POST,
          body: typeof body !== "string" ? JSON.stringify(body) : body,
          headers
        });
      }
      async request(endpoint, init) {
        var _a7;
        const headers = new Headers((init == null ? void 0 : init.headers) || {});
        const baseURL = `${this.config.protocol}://${this.config.host}:${this.config.port}`;
        const responseType = init == null ? void 0 : init.responseType;
        init == null ? true : delete init.responseType;
        if (endpoint.startsWith("/")) {
          endpoint = endpoint.slice(1);
        }
        if (this.config.network) {
          headers.append("x-network", this.config.network);
        }
        if (this.config.logging) {
          this.config.logger(`Requesting: ${baseURL}/${endpoint}`);
        }
        let res = await fetch(`${baseURL}/${endpoint}`, {
          ...init || {},
          headers
        });
        if (this.config.logging) {
          this.config.logger(`Response:   ${res.url} - ${res.status}`);
        }
        const contentType = res.headers.get("content-type");
        const charset = (_a7 = contentType == null ? void 0 : contentType.match(/charset=([^()<>@,;:\"/[\]?.=\s]*)/i)) == null ? void 0 : _a7[1];
        const response = res;
        const decodeText = async () => {
          if (charset) {
            try {
              response.data = new TextDecoder(charset).decode(await res.arrayBuffer());
            } catch (e) {
              response.data = await res.text();
            }
          } else {
            response.data = await res.text();
          }
        };
        if (responseType === "arraybuffer") {
          response.data = await res.arrayBuffer();
        } else if (responseType === "text") {
          await decodeText();
        } else if (responseType === "webstream") {
          response.data = addAsyncIterator(res.body);
        } else {
          try {
            let test = await res.clone().json();
            if (typeof test !== "object") {
              await decodeText();
            } else {
              response.data = await res.json();
            }
            test = null;
          } catch (e) {
            await decodeText();
          }
        }
        return response;
      }
    };
    exports.default = Api;
    var addAsyncIterator = (body) => {
      const bodyWithIter = body;
      if (typeof bodyWithIter[Symbol.asyncIterator] === "undefined") {
        bodyWithIter[Symbol.asyncIterator] = webIiterator(body);
      }
      return bodyWithIter;
    };
    var webIiterator = function(stream) {
      return async function* iteratorGenerator() {
        const reader = stream.getReader();
        try {
          while (true) {
            const { done, value } = await reader.read();
            if (done)
              return;
            yield value;
          }
        } finally {
          reader.releaseLock();
        }
      };
    };
  }
});

// node_modules/arweave/web/lib/utils.js
var require_utils = __commonJS({
  "node_modules/arweave/web/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concatBuffers = concatBuffers;
    exports.b64UrlToString = b64UrlToString;
    exports.bufferToString = bufferToString;
    exports.stringToBuffer = stringToBuffer;
    exports.stringToB64Url = stringToB64Url;
    exports.b64UrlToBuffer = b64UrlToBuffer;
    exports.bufferTob64 = bufferTob64;
    exports.bufferTob64Url = bufferTob64Url;
    exports.b64UrlEncode = b64UrlEncode;
    exports.b64UrlDecode = b64UrlDecode;
    var B64js = require_base64_js2();
    function concatBuffers(buffers) {
      let total_length = 0;
      for (let i = 0; i < buffers.length; i++) {
        total_length += buffers[i].byteLength;
      }
      let temp = new Uint8Array(total_length);
      let offset = 0;
      temp.set(new Uint8Array(buffers[0]), offset);
      offset += buffers[0].byteLength;
      for (let i = 1; i < buffers.length; i++) {
        temp.set(new Uint8Array(buffers[i]), offset);
        offset += buffers[i].byteLength;
      }
      return temp;
    }
    function b64UrlToString(b64UrlString) {
      let buffer = b64UrlToBuffer(b64UrlString);
      return bufferToString(buffer);
    }
    function bufferToString(buffer) {
      return new TextDecoder("utf-8", { fatal: true }).decode(buffer);
    }
    function stringToBuffer(string) {
      return new TextEncoder().encode(string);
    }
    function stringToB64Url(string) {
      return bufferTob64Url(stringToBuffer(string));
    }
    function b64UrlToBuffer(b64UrlString) {
      return new Uint8Array(B64js.toByteArray(b64UrlDecode(b64UrlString)));
    }
    function bufferTob64(buffer) {
      return B64js.fromByteArray(new Uint8Array(buffer));
    }
    function bufferTob64Url(buffer) {
      return b64UrlEncode(bufferTob64(buffer));
    }
    function b64UrlEncode(b64UrlString) {
      try {
        return b64UrlString.replace(/\+/g, "-").replace(/\//g, "_").replace(/\=/g, "");
      } catch (error) {
        throw new Error("Failed to encode string", { cause: error });
      }
    }
    function b64UrlDecode(b64UrlString) {
      try {
        b64UrlString = b64UrlString.replace(/\-/g, "+").replace(/\_/g, "/");
        let padding;
        b64UrlString.length % 4 == 0 ? padding = 0 : padding = 4 - b64UrlString.length % 4;
        return b64UrlString.concat("=".repeat(padding));
      } catch (error) {
        throw new Error("Failed to decode string", { cause: error });
      }
    }
  }
});

// node_modules/arweave/web/lib/crypto/webcrypto-driver.js
var require_webcrypto_driver = __commonJS({
  "node_modules/arweave/web/lib/crypto/webcrypto-driver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ArweaveUtils = require_utils();
    var WebCryptoDriver = class {
      constructor() {
        __publicField(this, "keyLength", 4096);
        __publicField(this, "publicExponent", 65537);
        __publicField(this, "hashAlgorithm", "sha256");
        __publicField(this, "driver");
        if (!this.detectWebCrypto()) {
          throw new Error("SubtleCrypto not available!");
        }
        this.driver = crypto.subtle;
      }
      async generateJWK() {
        let cryptoKey = await this.driver.generateKey({
          name: "RSA-PSS",
          modulusLength: 4096,
          publicExponent: new Uint8Array([1, 0, 1]),
          hash: {
            name: "SHA-256"
          }
        }, true, ["sign"]);
        let jwk = await this.driver.exportKey("jwk", cryptoKey.privateKey);
        return {
          kty: jwk.kty,
          e: jwk.e,
          n: jwk.n,
          d: jwk.d,
          p: jwk.p,
          q: jwk.q,
          dp: jwk.dp,
          dq: jwk.dq,
          qi: jwk.qi
        };
      }
      async sign(jwk, data, { saltLength } = {}) {
        let signature = await this.driver.sign({
          name: "RSA-PSS",
          saltLength: 32
        }, await this.jwkToCryptoKey(jwk), data);
        return new Uint8Array(signature);
      }
      async hash(data, algorithm = "SHA-256") {
        let digest = await this.driver.digest(algorithm, data);
        return new Uint8Array(digest);
      }
      async verify(publicModulus, data, signature) {
        const publicKey = {
          kty: "RSA",
          e: "AQAB",
          n: publicModulus
        };
        const key = await this.jwkToPublicCryptoKey(publicKey);
        const digest = await this.driver.digest("SHA-256", data);
        const salt0 = await this.driver.verify({
          name: "RSA-PSS",
          saltLength: 0
        }, key, signature, data);
        const salt32 = await this.driver.verify({
          name: "RSA-PSS",
          saltLength: 32
        }, key, signature, data);
        const saltLengthN = Math.ceil((key.algorithm.modulusLength - 1) / 8) - digest.byteLength - 2;
        const saltN = await this.driver.verify({
          name: "RSA-PSS",
          saltLength: saltLengthN
        }, key, signature, data);
        const result2 = salt0 || salt32 || saltN;
        if (!result2) {
          const details = {
            algorithm: key.algorithm.name,
            modulusLength: key.algorithm.modulusLength,
            keyUsages: key.usages,
            saltLengthsAttempted: `0, 32, ${saltLengthN}`
          };
          console.warn("Transaction Verification Failed! \n", `Details: ${JSON.stringify(details, null, 2)} 
`, "N.B. ArweaveJS is only guaranteed to verify txs created using ArweaveJS.");
        }
        return result2;
      }
      async jwkToCryptoKey(jwk) {
        return this.driver.importKey("jwk", jwk, {
          name: "RSA-PSS",
          hash: {
            name: "SHA-256"
          }
        }, false, ["sign"]);
      }
      async jwkToPublicCryptoKey(publicJwk) {
        return this.driver.importKey("jwk", publicJwk, {
          name: "RSA-PSS",
          hash: {
            name: "SHA-256"
          }
        }, false, ["verify"]);
      }
      detectWebCrypto() {
        if (typeof crypto === "undefined") {
          return false;
        }
        const subtle = crypto == null ? void 0 : crypto.subtle;
        if (subtle === void 0) {
          return false;
        }
        const names = [
          "generateKey",
          "importKey",
          "exportKey",
          "digest",
          "sign"
        ];
        return names.every((name) => typeof subtle[name] === "function");
      }
      async encrypt(data, key, salt) {
        const initialKey = await this.driver.importKey("raw", typeof key == "string" ? ArweaveUtils.stringToBuffer(key) : key, {
          name: "PBKDF2",
          length: 32
        }, false, ["deriveKey"]);
        const derivedkey = await this.driver.deriveKey({
          name: "PBKDF2",
          salt: salt ? ArweaveUtils.stringToBuffer(salt) : ArweaveUtils.stringToBuffer("salt"),
          iterations: 1e5,
          hash: "SHA-256"
        }, initialKey, {
          name: "AES-CBC",
          length: 256
        }, false, ["encrypt", "decrypt"]);
        const iv = new Uint8Array(16);
        crypto.getRandomValues(iv);
        const encryptedData = await this.driver.encrypt({
          name: "AES-CBC",
          iv
        }, derivedkey, data);
        return ArweaveUtils.concatBuffers([iv, encryptedData]);
      }
      async decrypt(encrypted, key, salt) {
        const initialKey = await this.driver.importKey("raw", typeof key == "string" ? ArweaveUtils.stringToBuffer(key) : key, {
          name: "PBKDF2",
          length: 32
        }, false, ["deriveKey"]);
        const derivedkey = await this.driver.deriveKey({
          name: "PBKDF2",
          salt: salt ? ArweaveUtils.stringToBuffer(salt) : ArweaveUtils.stringToBuffer("salt"),
          iterations: 1e5,
          hash: "SHA-256"
        }, initialKey, {
          name: "AES-CBC",
          length: 256
        }, false, ["encrypt", "decrypt"]);
        const iv = encrypted.slice(0, 16);
        const data = await this.driver.decrypt({
          name: "AES-CBC",
          iv
        }, derivedkey, encrypted.slice(16));
        return ArweaveUtils.concatBuffers([data]);
      }
    };
    exports.default = WebCryptoDriver;
  }
});

// node_modules/arweave/web/network.js
var require_network = __commonJS({
  "node_modules/arweave/web/network.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Network = class {
      constructor(api) {
        __publicField(this, "api");
        this.api = api;
      }
      getInfo() {
        return this.api.get(`info`).then((response) => {
          return response.data;
        });
      }
      getPeers() {
        return this.api.get(`peers`).then((response) => {
          return response.data;
        });
      }
    };
    exports.default = Network;
  }
});

// node_modules/arweave/web/lib/error.js
var require_error = __commonJS({
  "node_modules/arweave/web/lib/error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getError = getError;
    var ArweaveError = class extends Error {
      constructor(type3, optional = {}) {
        var __super = (...args) => {
          super(...args);
          __publicField(this, "type");
          __publicField(this, "response");
          return this;
        };
        if (optional.message) {
          __super(optional.message);
        } else {
          __super();
        }
        this.type = type3;
        this.response = optional.response;
      }
      getType() {
        return this.type;
      }
    };
    exports.default = ArweaveError;
    function getError(resp) {
      let data = resp.data;
      if (typeof resp.data === "string") {
        try {
          data = JSON.parse(resp.data);
        } catch (e) {
        }
      }
      if (resp.data instanceof ArrayBuffer || resp.data instanceof Uint8Array) {
        try {
          data = JSON.parse(data.toString());
        } catch (e) {
        }
      }
      return data ? data.error || data : resp.statusText || "unknown";
    }
  }
});

// node_modules/arweave/web/lib/deepHash.js
var require_deepHash = __commonJS({
  "node_modules/arweave/web/lib/deepHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = deepHash;
    var common_1 = require_common2();
    async function deepHash(data) {
      if (Array.isArray(data)) {
        const tag2 = common_1.default.utils.concatBuffers([
          common_1.default.utils.stringToBuffer("list"),
          common_1.default.utils.stringToBuffer(data.length.toString())
        ]);
        return await deepHashChunks(data, await common_1.default.crypto.hash(tag2, "SHA-384"));
      }
      const tag = common_1.default.utils.concatBuffers([
        common_1.default.utils.stringToBuffer("blob"),
        common_1.default.utils.stringToBuffer(data.byteLength.toString())
      ]);
      const taggedHash = common_1.default.utils.concatBuffers([
        await common_1.default.crypto.hash(tag, "SHA-384"),
        await common_1.default.crypto.hash(data, "SHA-384")
      ]);
      return await common_1.default.crypto.hash(taggedHash, "SHA-384");
    }
    async function deepHashChunks(chunks, acc) {
      if (chunks.length < 1) {
        return acc;
      }
      const hashPair = common_1.default.utils.concatBuffers([
        acc,
        await deepHash(chunks[0])
      ]);
      const newAcc = await common_1.default.crypto.hash(hashPair, "SHA-384");
      return await deepHashChunks(chunks.slice(1), newAcc);
    }
  }
});

// node_modules/arweave/web/lib/merkle.js
var require_merkle = __commonJS({
  "node_modules/arweave/web/lib/merkle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.arrayCompare = exports.MIN_CHUNK_SIZE = exports.MAX_CHUNK_SIZE = void 0;
    exports.chunkData = chunkData;
    exports.generateLeaves = generateLeaves;
    exports.computeRootHash = computeRootHash;
    exports.generateTree = generateTree;
    exports.generateTransactionChunks = generateTransactionChunks;
    exports.buildLayers = buildLayers;
    exports.generateProofs = generateProofs;
    exports.arrayFlatten = arrayFlatten;
    exports.intToBuffer = intToBuffer;
    exports.bufferToInt = bufferToInt;
    exports.validatePath = validatePath;
    exports.debug = debug;
    var common_1 = require_common2();
    var utils_1 = require_utils();
    exports.MAX_CHUNK_SIZE = 256 * 1024;
    exports.MIN_CHUNK_SIZE = 32 * 1024;
    var NOTE_SIZE = 32;
    var HASH_SIZE = 32;
    async function chunkData(data) {
      let chunks = [];
      let rest = data;
      let cursor = 0;
      while (rest.byteLength >= exports.MAX_CHUNK_SIZE) {
        let chunkSize = exports.MAX_CHUNK_SIZE;
        let nextChunkSize = rest.byteLength - exports.MAX_CHUNK_SIZE;
        if (nextChunkSize > 0 && nextChunkSize < exports.MIN_CHUNK_SIZE) {
          chunkSize = Math.ceil(rest.byteLength / 2);
        }
        const chunk = rest.slice(0, chunkSize);
        const dataHash = await common_1.default.crypto.hash(chunk);
        cursor += chunk.byteLength;
        chunks.push({
          dataHash,
          minByteRange: cursor - chunk.byteLength,
          maxByteRange: cursor
        });
        rest = rest.slice(chunkSize);
      }
      chunks.push({
        dataHash: await common_1.default.crypto.hash(rest),
        minByteRange: cursor,
        maxByteRange: cursor + rest.byteLength
      });
      return chunks;
    }
    async function generateLeaves(chunks) {
      return Promise.all(chunks.map(async ({ dataHash, minByteRange, maxByteRange }) => {
        return {
          type: "leaf",
          id: await hash(await Promise.all([hash(dataHash), hash(intToBuffer(maxByteRange))])),
          dataHash,
          minByteRange,
          maxByteRange
        };
      }));
    }
    async function computeRootHash(data) {
      const rootNode = await generateTree(data);
      return rootNode.id;
    }
    async function generateTree(data) {
      const rootNode = await buildLayers(await generateLeaves(await chunkData(data)));
      return rootNode;
    }
    async function generateTransactionChunks(data) {
      const chunks = await chunkData(data);
      const leaves = await generateLeaves(chunks);
      const root = await buildLayers(leaves);
      const proofs = await generateProofs(root);
      const lastChunk = chunks.slice(-1)[0];
      if (lastChunk.maxByteRange - lastChunk.minByteRange === 0) {
        chunks.splice(chunks.length - 1, 1);
        proofs.splice(proofs.length - 1, 1);
      }
      return {
        data_root: root.id,
        chunks,
        proofs
      };
    }
    async function buildLayers(nodes, level = 0) {
      if (nodes.length < 2) {
        const root = nodes[0];
        return root;
      }
      const nextLayer = [];
      for (let i = 0; i < nodes.length; i += 2) {
        nextLayer.push(await hashBranch(nodes[i], nodes[i + 1]));
      }
      return buildLayers(nextLayer, level + 1);
    }
    function generateProofs(root) {
      const proofs = resolveBranchProofs(root);
      if (!Array.isArray(proofs)) {
        return [proofs];
      }
      return arrayFlatten(proofs);
    }
    function resolveBranchProofs(node, proof = new Uint8Array(), depth = 0) {
      if (node.type == "leaf") {
        return {
          offset: node.maxByteRange - 1,
          proof: (0, utils_1.concatBuffers)([
            proof,
            node.dataHash,
            intToBuffer(node.maxByteRange)
          ])
        };
      }
      if (node.type == "branch") {
        const partialProof = (0, utils_1.concatBuffers)([
          proof,
          node.leftChild.id,
          node.rightChild.id,
          intToBuffer(node.byteRange)
        ]);
        return [
          resolveBranchProofs(node.leftChild, partialProof, depth + 1),
          resolveBranchProofs(node.rightChild, partialProof, depth + 1)
        ];
      }
      throw new Error(`Unexpected node type`);
    }
    function arrayFlatten(input) {
      const flat = [];
      input.forEach((item) => {
        if (Array.isArray(item)) {
          flat.push(...arrayFlatten(item));
        } else {
          flat.push(item);
        }
      });
      return flat;
    }
    async function hashBranch(left, right) {
      if (!right) {
        return left;
      }
      let branch = {
        type: "branch",
        id: await hash([
          await hash(left.id),
          await hash(right.id),
          await hash(intToBuffer(left.maxByteRange))
        ]),
        byteRange: left.maxByteRange,
        maxByteRange: right.maxByteRange,
        leftChild: left,
        rightChild: right
      };
      return branch;
    }
    async function hash(data) {
      if (Array.isArray(data)) {
        data = common_1.default.utils.concatBuffers(data);
      }
      return new Uint8Array(await common_1.default.crypto.hash(data));
    }
    function intToBuffer(note) {
      const buffer = new Uint8Array(NOTE_SIZE);
      for (var i = buffer.length - 1; i >= 0; i--) {
        var byte = note % 256;
        buffer[i] = byte;
        note = (note - byte) / 256;
      }
      return buffer;
    }
    function bufferToInt(buffer) {
      let value = 0;
      for (var i = 0; i < buffer.length; i++) {
        value *= 256;
        value += buffer[i];
      }
      return value;
    }
    var arrayCompare = (a, b2) => a.every((value, index) => b2[index] === value);
    exports.arrayCompare = arrayCompare;
    async function validatePath(id, dest, leftBound, rightBound, path2) {
      if (rightBound <= 0) {
        return false;
      }
      if (dest >= rightBound) {
        return validatePath(id, 0, rightBound - 1, rightBound, path2);
      }
      if (dest < 0) {
        return validatePath(id, 0, 0, rightBound, path2);
      }
      if (path2.length == HASH_SIZE + NOTE_SIZE) {
        const pathData = path2.slice(0, HASH_SIZE);
        const endOffsetBuffer = path2.slice(pathData.length, pathData.length + NOTE_SIZE);
        const pathDataHash = await hash([
          await hash(pathData),
          await hash(endOffsetBuffer)
        ]);
        let result2 = (0, exports.arrayCompare)(id, pathDataHash);
        if (result2) {
          return {
            offset: rightBound - 1,
            leftBound,
            rightBound,
            chunkSize: rightBound - leftBound
          };
        }
        return false;
      }
      const left = path2.slice(0, HASH_SIZE);
      const right = path2.slice(left.length, left.length + HASH_SIZE);
      const offsetBuffer = path2.slice(left.length + right.length, left.length + right.length + NOTE_SIZE);
      const offset = bufferToInt(offsetBuffer);
      const remainder = path2.slice(left.length + right.length + offsetBuffer.length);
      const pathHash = await hash([
        await hash(left),
        await hash(right),
        await hash(offsetBuffer)
      ]);
      if ((0, exports.arrayCompare)(id, pathHash)) {
        if (dest < offset) {
          return await validatePath(left, dest, leftBound, Math.min(rightBound, offset), remainder);
        }
        return await validatePath(right, dest, Math.max(leftBound, offset), rightBound, remainder);
      }
      return false;
    }
    async function debug(proof, output = "") {
      if (proof.byteLength < 1) {
        return output;
      }
      const left = proof.slice(0, HASH_SIZE);
      const right = proof.slice(left.length, left.length + HASH_SIZE);
      const offsetBuffer = proof.slice(left.length + right.length, left.length + right.length + NOTE_SIZE);
      const offset = bufferToInt(offsetBuffer);
      const remainder = proof.slice(left.length + right.length + offsetBuffer.length);
      const pathHash = await hash([
        await hash(left),
        await hash(right),
        await hash(offsetBuffer)
      ]);
      const updatedOutput = `${output}
${JSON.stringify(Buffer.from(left))},${JSON.stringify(Buffer.from(right))},${offset} => ${JSON.stringify(pathHash)}`;
      return debug(remainder, updatedOutput);
    }
  }
});

// node_modules/arweave/web/lib/transaction.js
var require_transaction = __commonJS({
  "node_modules/arweave/web/lib/transaction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Tag = void 0;
    var ArweaveUtils = require_utils();
    var deepHash_1 = require_deepHash();
    var merkle_1 = require_merkle();
    var BaseObject = class {
      get(field, options) {
        if (!Object.getOwnPropertyNames(this).includes(field)) {
          throw new Error(`Field "${field}" is not a property of the Arweave Transaction class.`);
        }
        if (this[field] instanceof Uint8Array) {
          if (options && options.decode && options.string) {
            return ArweaveUtils.bufferToString(this[field]);
          }
          if (options && options.decode && !options.string) {
            return this[field];
          }
          return ArweaveUtils.bufferTob64Url(this[field]);
        }
        if (this[field] instanceof Array) {
          if ((options == null ? void 0 : options.decode) !== void 0 || (options == null ? void 0 : options.string) !== void 0) {
            if (field === "tags") {
              console.warn(`Did you mean to use 'transaction["tags"]' ?`);
            }
            throw new Error(`Cannot decode or stringify an array.`);
          }
          return this[field];
        }
        if (options && options.decode == true) {
          if (options && options.string) {
            return ArweaveUtils.b64UrlToString(this[field]);
          }
          return ArweaveUtils.b64UrlToBuffer(this[field]);
        }
        return this[field];
      }
    };
    var Tag = class extends BaseObject {
      constructor(name, value, decode = false) {
        super();
        __publicField(this, "name");
        __publicField(this, "value");
        this.name = name;
        this.value = value;
      }
    };
    exports.Tag = Tag;
    var Transaction = class extends BaseObject {
      constructor(attributes = {}) {
        super();
        __publicField(this, "format", 2);
        __publicField(this, "id", "");
        __publicField(this, "last_tx", "");
        __publicField(this, "owner", "");
        __publicField(this, "tags", []);
        __publicField(this, "target", "");
        __publicField(this, "quantity", "0");
        __publicField(this, "data_size", "0");
        __publicField(this, "data", new Uint8Array());
        __publicField(this, "data_root", "");
        __publicField(this, "reward", "0");
        __publicField(this, "signature", "");
        // Computed when needed.
        __publicField(this, "chunks");
        Object.assign(this, attributes);
        if (typeof this.data === "string") {
          this.data = ArweaveUtils.b64UrlToBuffer(this.data);
        }
        if (attributes.tags) {
          this.tags = attributes.tags.map((tag) => {
            return new Tag(tag.name, tag.value);
          });
        }
      }
      addTag(name, value) {
        this.tags.push(new Tag(ArweaveUtils.stringToB64Url(name), ArweaveUtils.stringToB64Url(value)));
      }
      toJSON() {
        return {
          format: this.format,
          id: this.id,
          last_tx: this.last_tx,
          owner: this.owner,
          tags: this.tags,
          target: this.target,
          quantity: this.quantity,
          data: ArweaveUtils.bufferTob64Url(this.data),
          data_size: this.data_size,
          data_root: this.data_root,
          data_tree: this.data_tree,
          reward: this.reward,
          signature: this.signature
        };
      }
      setOwner(owner) {
        this.owner = owner;
      }
      setSignature({ id, owner, reward, tags, signature }) {
        this.id = id;
        this.owner = owner;
        if (reward)
          this.reward = reward;
        if (tags)
          this.tags = tags;
        this.signature = signature;
      }
      async prepareChunks(data) {
        if (!this.chunks && data.byteLength > 0) {
          this.chunks = await (0, merkle_1.generateTransactionChunks)(data);
          this.data_root = ArweaveUtils.bufferTob64Url(this.chunks.data_root);
        }
        if (!this.chunks && data.byteLength === 0) {
          this.chunks = {
            chunks: [],
            data_root: new Uint8Array(),
            proofs: []
          };
          this.data_root = "";
        }
      }
      // Returns a chunk in a format suitable for posting to /chunk.
      // Similar to `prepareChunks()` this does not operate `this.data`,
      // instead using the data passed in.
      getChunk(idx, data) {
        if (!this.chunks) {
          throw new Error(`Chunks have not been prepared`);
        }
        const proof = this.chunks.proofs[idx];
        const chunk = this.chunks.chunks[idx];
        return {
          data_root: this.data_root,
          data_size: this.data_size,
          data_path: ArweaveUtils.bufferTob64Url(proof.proof),
          offset: proof.offset.toString(),
          chunk: ArweaveUtils.bufferTob64Url(data.slice(chunk.minByteRange, chunk.maxByteRange))
        };
      }
      async getSignatureData() {
        switch (this.format) {
          case 1:
            let tags = this.tags.reduce((accumulator, tag) => {
              return ArweaveUtils.concatBuffers([
                accumulator,
                tag.get("name", { decode: true, string: false }),
                tag.get("value", { decode: true, string: false })
              ]);
            }, new Uint8Array());
            return ArweaveUtils.concatBuffers([
              this.get("owner", { decode: true, string: false }),
              this.get("target", { decode: true, string: false }),
              this.get("data", { decode: true, string: false }),
              ArweaveUtils.stringToBuffer(this.quantity),
              ArweaveUtils.stringToBuffer(this.reward),
              this.get("last_tx", { decode: true, string: false }),
              tags
            ]);
          case 2:
            if (!this.data_root) {
              await this.prepareChunks(this.data);
            }
            const tagList = this.tags.map((tag) => [
              tag.get("name", { decode: true, string: false }),
              tag.get("value", { decode: true, string: false })
            ]);
            return await (0, deepHash_1.default)([
              ArweaveUtils.stringToBuffer(this.format.toString()),
              this.get("owner", { decode: true, string: false }),
              this.get("target", { decode: true, string: false }),
              ArweaveUtils.stringToBuffer(this.quantity),
              ArweaveUtils.stringToBuffer(this.reward),
              this.get("last_tx", { decode: true, string: false }),
              tagList,
              ArweaveUtils.stringToBuffer(this.data_size),
              this.get("data_root", { decode: true, string: false })
            ]);
          default:
            throw new Error(`Unexpected transaction format: ${this.format}`);
        }
      }
    };
    exports.default = Transaction;
  }
});

// node_modules/arweave/web/lib/transaction-uploader.js
var require_transaction_uploader = __commonJS({
  "node_modules/arweave/web/lib/transaction-uploader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransactionUploader = void 0;
    var transaction_1 = require_transaction();
    var ArweaveUtils = require_utils();
    var error_1 = require_error();
    var merkle_1 = require_merkle();
    var MAX_CHUNKS_IN_BODY = 1;
    var FATAL_CHUNK_UPLOAD_ERRORS = [
      "invalid_json",
      "chunk_too_big",
      "data_path_too_big",
      "offset_too_big",
      "data_size_too_big",
      "chunk_proof_ratio_not_attractive",
      "invalid_proof"
    ];
    var ERROR_DELAY = 1e3 * 40;
    var TransactionUploader = class _TransactionUploader {
      constructor(api, transaction) {
        __publicField(this, "api");
        __publicField(this, "chunkIndex", 0);
        __publicField(this, "txPosted", false);
        __publicField(this, "transaction");
        __publicField(this, "lastRequestTimeEnd", 0);
        __publicField(this, "totalErrors", 0);
        // Not serialized.
        __publicField(this, "data");
        __publicField(this, "lastResponseStatus", 0);
        __publicField(this, "lastResponseError", "");
        this.api = api;
        if (!transaction.id) {
          throw new Error(`Transaction is not signed`);
        }
        if (!transaction.chunks) {
          throw new Error(`Transaction chunks not prepared`);
        }
        this.data = transaction.data;
        this.transaction = new transaction_1.default(Object.assign({}, transaction, { data: new Uint8Array(0) }));
      }
      get isComplete() {
        return this.txPosted && this.chunkIndex === this.transaction.chunks.chunks.length;
      }
      get totalChunks() {
        return this.transaction.chunks.chunks.length;
      }
      get uploadedChunks() {
        return this.chunkIndex;
      }
      get pctComplete() {
        return Math.trunc(this.uploadedChunks / this.totalChunks * 100);
      }
      /**
       * Uploads the next part of the transaction.
       * On the first call this posts the transaction
       * itself and on any subsequent calls uploads the
       * next chunk until it completes.
       */
      async uploadChunk(chunkIndex_) {
        if (this.isComplete) {
          throw new Error(`Upload is already complete`);
        }
        if (this.lastResponseError !== "") {
          this.totalErrors++;
        } else {
          this.totalErrors = 0;
        }
        if (this.totalErrors === 100) {
          throw new Error(`Unable to complete upload: ${this.lastResponseStatus}: ${this.lastResponseError}`);
        }
        let delay = this.lastResponseError === "" ? 0 : Math.max(this.lastRequestTimeEnd + ERROR_DELAY - Date.now(), ERROR_DELAY);
        if (delay > 0) {
          delay = delay - delay * Math.random() * 0.3;
          await new Promise((res) => setTimeout(res, delay));
        }
        this.lastResponseError = "";
        if (!this.txPosted) {
          await this.postTransaction();
          return;
        }
        if (chunkIndex_) {
          this.chunkIndex = chunkIndex_;
        }
        const chunk = this.transaction.getChunk(chunkIndex_ || this.chunkIndex, this.data);
        const chunkOk = await (0, merkle_1.validatePath)(this.transaction.chunks.data_root, parseInt(chunk.offset), 0, parseInt(chunk.data_size), ArweaveUtils.b64UrlToBuffer(chunk.data_path));
        if (!chunkOk) {
          throw new Error(`Unable to validate chunk ${this.chunkIndex}`);
        }
        const resp = await this.api.post(`chunk`, this.transaction.getChunk(this.chunkIndex, this.data)).catch((e) => {
          console.error(e.message);
          return { status: -1, data: { error: e.message } };
        });
        this.lastRequestTimeEnd = Date.now();
        this.lastResponseStatus = resp.status;
        if (this.lastResponseStatus == 200) {
          this.chunkIndex++;
        } else {
          this.lastResponseError = (0, error_1.getError)(resp);
          if (FATAL_CHUNK_UPLOAD_ERRORS.includes(this.lastResponseError)) {
            throw new Error(`Fatal error uploading chunk ${this.chunkIndex}: ${this.lastResponseError}`);
          }
        }
      }
      /**
       * Reconstructs an upload from its serialized state and data.
       * Checks if data matches the expected data_root.
       *
       * @param serialized
       * @param data
       */
      static async fromSerialized(api, serialized, data) {
        if (!serialized || typeof serialized.chunkIndex !== "number" || typeof serialized.transaction !== "object") {
          throw new Error(`Serialized object does not match expected format.`);
        }
        var transaction = new transaction_1.default(serialized.transaction);
        if (!transaction.chunks) {
          await transaction.prepareChunks(data);
        }
        const upload = new _TransactionUploader(api, transaction);
        upload.chunkIndex = serialized.chunkIndex;
        upload.lastRequestTimeEnd = serialized.lastRequestTimeEnd;
        upload.lastResponseError = serialized.lastResponseError;
        upload.lastResponseStatus = serialized.lastResponseStatus;
        upload.txPosted = serialized.txPosted;
        upload.data = data;
        if (upload.transaction.data_root !== serialized.transaction.data_root) {
          throw new Error(`Data mismatch: Uploader doesn't match provided data.`);
        }
        return upload;
      }
      /**
       * Reconstruct an upload from the tx metadata, ie /tx/<id>.
       *
       * @param api
       * @param id
       * @param data
       */
      static async fromTransactionId(api, id) {
        const resp = await api.get(`tx/${id}`);
        if (resp.status !== 200) {
          throw new Error(`Tx ${id} not found: ${resp.status}`);
        }
        const transaction = resp.data;
        transaction.data = new Uint8Array(0);
        const serialized = {
          txPosted: true,
          chunkIndex: 0,
          lastResponseError: "",
          lastRequestTimeEnd: 0,
          lastResponseStatus: 0,
          transaction
        };
        return serialized;
      }
      toJSON() {
        return {
          chunkIndex: this.chunkIndex,
          transaction: this.transaction,
          lastRequestTimeEnd: this.lastRequestTimeEnd,
          lastResponseStatus: this.lastResponseStatus,
          lastResponseError: this.lastResponseError,
          txPosted: this.txPosted
        };
      }
      // POST to /tx
      async postTransaction() {
        const uploadInBody = this.totalChunks <= MAX_CHUNKS_IN_BODY;
        if (uploadInBody) {
          this.transaction.data = this.data;
          const resp2 = await this.api.post(`tx`, this.transaction).catch((e) => {
            console.error(e);
            return { status: -1, data: { error: e.message } };
          });
          this.lastRequestTimeEnd = Date.now();
          this.lastResponseStatus = resp2.status;
          this.transaction.data = new Uint8Array(0);
          if (resp2.status >= 200 && resp2.status < 300) {
            this.txPosted = true;
            this.chunkIndex = MAX_CHUNKS_IN_BODY;
            return;
          }
          this.lastResponseError = (0, error_1.getError)(resp2);
          throw new Error(`Unable to upload transaction: ${resp2.status}, ${this.lastResponseError}`);
        }
        const resp = await this.api.post(`tx`, this.transaction);
        this.lastRequestTimeEnd = Date.now();
        this.lastResponseStatus = resp.status;
        if (!(resp.status >= 200 && resp.status < 300)) {
          this.lastResponseError = (0, error_1.getError)(resp);
          throw new Error(`Unable to upload transaction: ${resp.status}, ${this.lastResponseError}`);
        }
        this.txPosted = true;
      }
    };
    exports.TransactionUploader = TransactionUploader;
  }
});

// node_modules/arconnect/index.js
var require_arconnect = __commonJS({
  "node_modules/arconnect/index.js"(exports, module2) {
    module2.exports = {};
  }
});

// node_modules/arweave/web/transactions.js
var require_transactions = __commonJS({
  "node_modules/arweave/web/transactions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var error_1 = require_error();
    var transaction_1 = require_transaction();
    var ArweaveUtils = require_utils();
    var transaction_uploader_1 = require_transaction_uploader();
    require_arconnect();
    var Transactions = class {
      constructor(api, crypto2, chunks) {
        __publicField(this, "api");
        __publicField(this, "crypto");
        __publicField(this, "chunks");
        this.api = api;
        this.crypto = crypto2;
        this.chunks = chunks;
      }
      async getTransactionAnchor() {
        const res = await this.api.get(`tx_anchor`);
        if (!res.data.match(/^[a-z0-9_-]{43,}/i) || !res.ok) {
          throw new Error(`Could not getTransactionAnchor. Received: ${res.data}. Status: ${res.status}, ${res.statusText}`);
        }
        return res.data;
      }
      async getPrice(byteSize, targetAddress) {
        let endpoint = targetAddress ? `price/${byteSize}/${targetAddress}` : `price/${byteSize}`;
        const res = await this.api.get(endpoint);
        if (!/^\d+$/.test(res.data) || !res.ok) {
          throw new Error(`Could not getPrice. Received: ${res.data}. Status: ${res.status}, ${res.statusText}`);
        }
        return res.data;
      }
      async get(id) {
        const response = await this.api.get(`tx/${id}`);
        if (response.status == 200) {
          const data_size = parseInt(response.data.data_size);
          if (response.data.format >= 2 && data_size > 0 && data_size <= 1024 * 1024 * 12) {
            const data = await this.getData(id);
            return new transaction_1.default({
              ...response.data,
              data
            });
          }
          return new transaction_1.default({
            ...response.data,
            format: response.data.format || 1
          });
        }
        if (response.status == 404) {
          throw new error_1.default(
            "TX_NOT_FOUND"
            /* ArweaveErrorType.TX_NOT_FOUND */
          );
        }
        if (response.status == 410) {
          throw new error_1.default(
            "TX_FAILED"
            /* ArweaveErrorType.TX_FAILED */
          );
        }
        throw new error_1.default(
          "TX_INVALID"
          /* ArweaveErrorType.TX_INVALID */
        );
      }
      fromRaw(attributes) {
        return new transaction_1.default(attributes);
      }
      /** @deprecated use GQL https://gql-guide.arweave.net */
      async search(tagName, tagValue) {
        return this.api.post(`arql`, {
          op: "equals",
          expr1: tagName,
          expr2: tagValue
        }).then((response) => {
          if (!response.data) {
            return [];
          }
          return response.data;
        });
      }
      getStatus(id) {
        return this.api.get(`tx/${id}/status`).then((response) => {
          if (response.status == 200) {
            return {
              status: 200,
              confirmed: response.data
            };
          }
          return {
            status: response.status,
            confirmed: null
          };
        });
      }
      async getData(id, options) {
        let data = void 0;
        try {
          data = await this.chunks.downloadChunkedData(id);
        } catch (error) {
          console.error(`Error while trying to download chunked data for ${id}`);
          console.error(error);
        }
        if (!data) {
          console.warn(`Falling back to gateway cache for ${id}`);
          try {
            const { data: resData, ok, status, statusText } = await this.api.get(`/${id}`, { responseType: "arraybuffer" });
            if (!ok) {
              throw new Error(`Bad http status code`, {
                cause: { status, statusText }
              });
            }
            data = resData;
          } catch (error) {
            console.error(`Error while trying to download contiguous data from gateway cache for ${id}`);
            console.error(error);
          }
        }
        if (!data) {
          throw new Error(`${id} data was not found!`);
        }
        if (options && options.decode && !options.string) {
          return data;
        }
        if (options && options.decode && options.string) {
          return ArweaveUtils.bufferToString(data);
        }
        return ArweaveUtils.bufferTob64Url(data);
      }
      async sign(transaction, jwk, options) {
        const isJwk = (obj) => {
          let valid = true;
          ["n", "e", "d", "p", "q", "dp", "dq", "qi"].map((key) => !(key in obj) && (valid = false));
          return valid;
        };
        const validJwk = typeof jwk === "object" && isJwk(jwk);
        const externalWallet = typeof arweaveWallet === "object";
        if (!validJwk && !externalWallet) {
          throw new Error(`No valid JWK or external wallet found to sign transaction.`);
        } else if (validJwk) {
          transaction.setOwner(jwk.n);
          let dataToSign = await transaction.getSignatureData();
          let rawSignature = await this.crypto.sign(jwk, dataToSign, options);
          let id = await this.crypto.hash(rawSignature);
          transaction.setSignature({
            id: ArweaveUtils.bufferTob64Url(id),
            owner: jwk.n,
            signature: ArweaveUtils.bufferTob64Url(rawSignature)
          });
        } else if (externalWallet) {
          try {
            const existingPermissions = await arweaveWallet.getPermissions();
            if (!existingPermissions.includes("SIGN_TRANSACTION"))
              await arweaveWallet.connect(["SIGN_TRANSACTION"]);
          } catch (e) {
          }
          const signedTransaction = await arweaveWallet.sign(transaction, options);
          transaction.setSignature({
            id: signedTransaction.id,
            owner: signedTransaction.owner,
            reward: signedTransaction.reward,
            tags: signedTransaction.tags,
            signature: signedTransaction.signature
          });
        } else {
          throw new Error(`An error occurred while signing. Check wallet is valid`);
        }
      }
      async verify(transaction) {
        const signaturePayload = await transaction.getSignatureData();
        const rawSignature = transaction.get("signature", {
          decode: true,
          string: false
        });
        const expectedId = ArweaveUtils.bufferTob64Url(await this.crypto.hash(rawSignature));
        if (transaction.id !== expectedId) {
          throw new Error(`Invalid transaction signature or ID! The transaction ID doesn't match the expected SHA-256 hash of the signature.`);
        }
        return this.crypto.verify(transaction.owner, signaturePayload, rawSignature);
      }
      async post(transaction) {
        if (typeof transaction === "string") {
          transaction = new transaction_1.default(JSON.parse(transaction));
        } else if (typeof transaction.readInt32BE === "function") {
          transaction = new transaction_1.default(JSON.parse(transaction.toString()));
        } else if (typeof transaction === "object" && !(transaction instanceof transaction_1.default)) {
          transaction = new transaction_1.default(transaction);
        }
        if (!(transaction instanceof transaction_1.default)) {
          throw new Error(`Must be Transaction object`);
        }
        if (!transaction.chunks) {
          await transaction.prepareChunks(transaction.data);
        }
        const uploader = await this.getUploader(transaction, transaction.data);
        try {
          while (!uploader.isComplete) {
            await uploader.uploadChunk();
          }
        } catch (e) {
          if (uploader.lastResponseStatus > 0) {
            return {
              status: uploader.lastResponseStatus,
              statusText: uploader.lastResponseError,
              data: {
                error: uploader.lastResponseError
              }
            };
          }
          throw e;
        }
        return {
          status: 200,
          statusText: "OK",
          data: {}
        };
      }
      /**
       * Gets an uploader than can be used to upload a transaction chunk by chunk, giving progress
       * and the ability to resume.
       *
       * Usage example:
       *
       * ```
       * const uploader = arweave.transactions.getUploader(transaction);
       * while (!uploader.isComplete) {
       *   await uploader.uploadChunk();
       *   console.log(`${uploader.pctComplete}%`);
       * }
       * ```
       *
       * @param upload a Transaction object, a previously save progress object, or a transaction id.
       * @param data the data of the transaction. Required when resuming an upload.
       */
      async getUploader(upload, data) {
        let uploader;
        if (data instanceof ArrayBuffer) {
          data = new Uint8Array(data);
        }
        if (upload instanceof transaction_1.default) {
          if (!data) {
            data = upload.data;
          }
          if (!(data instanceof Uint8Array)) {
            throw new Error("Data format is invalid");
          }
          if (!upload.chunks) {
            await upload.prepareChunks(data);
          }
          uploader = new transaction_uploader_1.TransactionUploader(this.api, upload);
          if (!uploader.data || uploader.data.length === 0) {
            uploader.data = data;
          }
        } else {
          if (typeof upload === "string") {
            upload = await transaction_uploader_1.TransactionUploader.fromTransactionId(this.api, upload);
          }
          if (!data || !(data instanceof Uint8Array)) {
            throw new Error(`Must provide data when resuming upload`);
          }
          uploader = await transaction_uploader_1.TransactionUploader.fromSerialized(this.api, upload, data);
        }
        return uploader;
      }
      /**
       * Async generator version of uploader
       *
       * Usage example:
       *
       * ```
       * for await (const uploader of arweave.transactions.upload(tx)) {
       *  console.log(`${uploader.pctComplete}%`);
       * }
       * ```
       *
       * @param upload a Transaction object, a previously save uploader, or a transaction id.
       * @param data the data of the transaction. Required when resuming an upload.
       */
      async *upload(upload, data) {
        const uploader = await this.getUploader(upload, data);
        while (!uploader.isComplete) {
          await uploader.uploadChunk();
          yield uploader;
        }
        return uploader;
      }
    };
    exports.default = Transactions;
  }
});

// node_modules/arweave/web/wallets.js
var require_wallets = __commonJS({
  "node_modules/arweave/web/wallets.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ArweaveUtils = require_utils();
    require_arconnect();
    var Wallets = class {
      constructor(api, crypto2) {
        __publicField(this, "api");
        __publicField(this, "crypto");
        this.api = api;
        this.crypto = crypto2;
      }
      /**
       * Get the wallet balance for the given address.
       *
       * @param {string} address - The arweave address to get the balance for.
       *
       * @returns {Promise<string>} - Promise which resolves with a winston string balance.
       */
      getBalance(address) {
        return this.api.get(`wallet/${address}/balance`).then((response) => {
          return response.data;
        });
      }
      /**
       * Get the last transaction ID for the given wallet address.
       *
       * @param {string} address - The arweave address to get the transaction for.
       *
       * @returns {Promise<string>} - Promise which resolves with a transaction ID.
       */
      getLastTransactionID(address) {
        return this.api.get(`wallet/${address}/last_tx`).then((response) => {
          return response.data;
        });
      }
      generate() {
        return this.crypto.generateJWK();
      }
      async jwkToAddress(jwk) {
        if (!jwk || jwk === "use_wallet") {
          return this.getAddress();
        } else {
          return this.getAddress(jwk);
        }
      }
      async getAddress(jwk) {
        if (!jwk || jwk === "use_wallet") {
          try {
            await arweaveWallet.connect(["ACCESS_ADDRESS"]);
          } catch (e) {
          }
          return arweaveWallet.getActiveAddress();
        } else {
          return this.ownerToAddress(jwk.n);
        }
      }
      async ownerToAddress(owner) {
        return ArweaveUtils.bufferTob64Url(await this.crypto.hash(ArweaveUtils.b64UrlToBuffer(owner)));
      }
    };
    exports.default = Wallets;
  }
});

// node_modules/arweave/web/silo.js
var require_silo = __commonJS({
  "node_modules/arweave/web/silo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SiloResource = void 0;
    var ArweaveUtils = require_utils();
    var Silo = class {
      constructor(api, crypto2, transactions) {
        __publicField(this, "api");
        __publicField(this, "crypto");
        __publicField(this, "transactions");
        this.api = api;
        this.crypto = crypto2;
        this.transactions = transactions;
      }
      async get(siloURI) {
        if (!siloURI) {
          throw new Error(`No Silo URI specified`);
        }
        const resource = await this.parseUri(siloURI);
        const ids = await this.transactions.search("Silo-Name", resource.getAccessKey());
        if (ids.length == 0) {
          throw new Error(`No data could be found for the Silo URI: ${siloURI}`);
        }
        const transaction = await this.transactions.get(ids[0]);
        if (!transaction) {
          throw new Error(`No data could be found for the Silo URI: ${siloURI}`);
        }
        const encrypted = transaction.get("data", { decode: true, string: false });
        return this.crypto.decrypt(encrypted, resource.getEncryptionKey());
      }
      async readTransactionData(transaction, siloURI) {
        if (!siloURI) {
          throw new Error(`No Silo URI specified`);
        }
        const resource = await this.parseUri(siloURI);
        const encrypted = transaction.get("data", { decode: true, string: false });
        return this.crypto.decrypt(encrypted, resource.getEncryptionKey());
      }
      async parseUri(siloURI) {
        const parsed = siloURI.match(/^([a-z0-9-_]+)\.([0-9]+)/i);
        if (!parsed) {
          throw new Error(`Invalid Silo name, must be a name in the format of [a-z0-9]+.[0-9]+, e.g. 'bubble.7'`);
        }
        const siloName = parsed[1];
        const hashIterations = Math.pow(2, parseInt(parsed[2]));
        const digest = await this.hash(ArweaveUtils.stringToBuffer(siloName), hashIterations);
        const accessKey = ArweaveUtils.bufferTob64(digest.slice(0, 15));
        const encryptionkey = await this.hash(digest.slice(16, 31), 1);
        return new SiloResource(siloURI, accessKey, encryptionkey);
      }
      async hash(input, iterations) {
        let digest = await this.crypto.hash(input);
        for (let count = 0; count < iterations - 1; count++) {
          digest = await this.crypto.hash(digest);
        }
        return digest;
      }
    };
    exports.default = Silo;
    var SiloResource = class {
      constructor(uri, accessKey, encryptionKey) {
        __publicField(this, "uri");
        __publicField(this, "accessKey");
        __publicField(this, "encryptionKey");
        this.uri = uri;
        this.accessKey = accessKey;
        this.encryptionKey = encryptionKey;
      }
      getUri() {
        return this.uri;
      }
      getAccessKey() {
        return this.accessKey;
      }
      getEncryptionKey() {
        return this.encryptionKey;
      }
    };
    exports.SiloResource = SiloResource;
  }
});

// node_modules/arweave/web/chunks.js
var require_chunks = __commonJS({
  "node_modules/arweave/web/chunks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var error_1 = require_error();
    var ArweaveUtils = require_utils();
    var Chunks = class {
      constructor(api) {
        __publicField(this, "api");
        this.api = api;
      }
      async getTransactionOffset(id) {
        const resp = await this.api.get(`tx/${id}/offset`);
        if (resp.status === 200) {
          return resp.data;
        }
        throw new Error(`Unable to get transaction offset: ${(0, error_1.getError)(resp)}`);
      }
      async getChunk(offset) {
        const resp = await this.api.get(`chunk/${offset}`);
        if (resp.status === 200) {
          return resp.data;
        }
        throw new Error(`Unable to get chunk: ${(0, error_1.getError)(resp)}`);
      }
      async getChunkData(offset) {
        const chunk = await this.getChunk(offset);
        const buf = ArweaveUtils.b64UrlToBuffer(chunk.chunk);
        return buf;
      }
      firstChunkOffset(offsetResponse) {
        return parseInt(offsetResponse.offset) - parseInt(offsetResponse.size) + 1;
      }
      async downloadChunkedData(id) {
        const offsetResponse = await this.getTransactionOffset(id);
        const size = parseInt(offsetResponse.size);
        const endOffset = parseInt(offsetResponse.offset);
        const startOffset = endOffset - size + 1;
        const data = new Uint8Array(size);
        let byte = 0;
        while (byte < size) {
          if (this.api.config.logging) {
            console.log(`[chunk] ${byte}/${size}`);
          }
          let chunkData;
          try {
            chunkData = await this.getChunkData(startOffset + byte);
          } catch (error) {
            console.error(`[chunk] Failed to fetch chunk at offset ${startOffset + byte}`);
            console.error(`[chunk] This could indicate that the chunk wasn't uploaded or hasn't yet seeded properly to a particular gateway/node`);
          }
          if (chunkData) {
            data.set(chunkData, byte);
            byte += chunkData.length;
          } else {
            throw new Error(`Couldn't complete data download at ${byte}/${size}`);
          }
        }
        return data;
      }
    };
    exports.default = Chunks;
  }
});

// node_modules/arweave/web/blocks.js
var require_blocks = __commonJS({
  "node_modules/arweave/web/blocks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var error_1 = require_error();
    require_arconnect();
    var _Blocks = class _Blocks {
      constructor(api, network) {
        __publicField(this, "api");
        __publicField(this, "network");
        this.api = api;
        this.network = network;
      }
      /**
       * Gets a block by its "indep_hash"
       */
      async get(indepHash) {
        const response = await this.api.get(`${_Blocks.HASH_ENDPOINT}${indepHash}`);
        if (response.status === 200) {
          return response.data;
        } else {
          if (response.status === 404) {
            throw new error_1.default(
              "BLOCK_NOT_FOUND"
              /* ArweaveErrorType.BLOCK_NOT_FOUND */
            );
          } else {
            throw new Error(`Error while loading block data: ${response}`);
          }
        }
      }
      /**
       * Gets a block by its "height"
       */
      async getByHeight(height) {
        const response = await this.api.get(`${_Blocks.HEIGHT_ENDPOINT}${height}`);
        if (response.status === 200) {
          return response.data;
        } else {
          if (response.status === 404) {
            throw new error_1.default(
              "BLOCK_NOT_FOUND"
              /* ArweaveErrorType.BLOCK_NOT_FOUND */
            );
          } else {
            throw new Error(`Error while loading block data: ${response}`);
          }
        }
      }
      /**
       * Gets current block data (ie. block with indep_hash = Network.getInfo().current)
       */
      async getCurrent() {
        const { current } = await this.network.getInfo();
        return await this.get(current);
      }
    };
    __publicField(_Blocks, "HASH_ENDPOINT", "block/hash/");
    __publicField(_Blocks, "HEIGHT_ENDPOINT", "block/height/");
    var Blocks = _Blocks;
    exports.default = Blocks;
  }
});

// node_modules/arweave/web/common.js
var require_common2 = __commonJS({
  "node_modules/arweave/web/common.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ar_1 = require_ar();
    var api_1 = require_api();
    var node_driver_1 = require_webcrypto_driver();
    var network_1 = require_network();
    var transactions_1 = require_transactions();
    var wallets_1 = require_wallets();
    var transaction_1 = require_transaction();
    var ArweaveUtils = require_utils();
    var silo_1 = require_silo();
    var chunks_1 = require_chunks();
    var blocks_1 = require_blocks();
    var _Arweave = class _Arweave {
      constructor(apiConfig) {
        __publicField(this, "api");
        __publicField(this, "wallets");
        __publicField(this, "transactions");
        __publicField(this, "network");
        __publicField(this, "blocks");
        __publicField(this, "ar");
        __publicField(this, "silo");
        __publicField(this, "chunks");
        this.api = new api_1.default(apiConfig);
        this.wallets = new wallets_1.default(this.api, _Arweave.crypto);
        this.chunks = new chunks_1.default(this.api);
        this.transactions = new transactions_1.default(this.api, _Arweave.crypto, this.chunks);
        this.silo = new silo_1.default(this.api, this.crypto, this.transactions);
        this.network = new network_1.default(this.api);
        this.blocks = new blocks_1.default(this.api, this.network);
        this.ar = new ar_1.default();
      }
      /** @deprecated */
      get crypto() {
        return _Arweave.crypto;
      }
      /** @deprecated */
      get utils() {
        return _Arweave.utils;
      }
      getConfig() {
        return {
          api: this.api.getConfig(),
          crypto: null
        };
      }
      async createTransaction(attributes, jwk) {
        const transaction = {};
        Object.assign(transaction, attributes);
        if (!attributes.data && !(attributes.target && attributes.quantity)) {
          throw new Error(`A new Arweave transaction must have a 'data' value, or 'target' and 'quantity' values.`);
        }
        if (attributes.owner == void 0) {
          if (jwk && jwk !== "use_wallet") {
            transaction.owner = jwk.n;
          }
        }
        if (attributes.last_tx == void 0) {
          transaction.last_tx = await this.transactions.getTransactionAnchor();
        }
        if (typeof attributes.data === "string") {
          attributes.data = ArweaveUtils.stringToBuffer(attributes.data);
        }
        if (attributes.data instanceof ArrayBuffer) {
          attributes.data = new Uint8Array(attributes.data);
        }
        if (attributes.data && !(attributes.data instanceof Uint8Array)) {
          throw new Error("Expected data to be a string, Uint8Array or ArrayBuffer");
        }
        if (attributes.reward == void 0) {
          const length = attributes.data ? attributes.data.byteLength : 0;
          transaction.reward = await this.transactions.getPrice(length, transaction.target);
        }
        transaction.data_root = "";
        transaction.data_size = attributes.data ? attributes.data.byteLength.toString() : "0";
        transaction.data = attributes.data || new Uint8Array(0);
        const createdTransaction = new transaction_1.default(transaction);
        await createdTransaction.getSignatureData();
        return createdTransaction;
      }
      async createSiloTransaction(attributes, jwk, siloUri) {
        const transaction = {};
        Object.assign(transaction, attributes);
        if (!attributes.data) {
          throw new Error(`Silo transactions must have a 'data' value`);
        }
        if (!siloUri) {
          throw new Error(`No Silo URI specified.`);
        }
        if (attributes.target || attributes.quantity) {
          throw new Error(`Silo transactions can only be used for storing data, sending AR to other wallets isn't supported.`);
        }
        if (attributes.owner == void 0) {
          if (!jwk || !jwk.n) {
            throw new Error(`A new Arweave transaction must either have an 'owner' attribute, or you must provide the jwk parameter.`);
          }
          transaction.owner = jwk.n;
        }
        if (attributes.last_tx == void 0) {
          transaction.last_tx = await this.transactions.getTransactionAnchor();
        }
        const siloResource = await this.silo.parseUri(siloUri);
        if (typeof attributes.data == "string") {
          const encrypted = await this.crypto.encrypt(ArweaveUtils.stringToBuffer(attributes.data), siloResource.getEncryptionKey());
          transaction.reward = await this.transactions.getPrice(encrypted.byteLength);
          transaction.data = ArweaveUtils.bufferTob64Url(encrypted);
        }
        if (attributes.data instanceof Uint8Array) {
          const encrypted = await this.crypto.encrypt(attributes.data, siloResource.getEncryptionKey());
          transaction.reward = await this.transactions.getPrice(encrypted.byteLength);
          transaction.data = ArweaveUtils.bufferTob64Url(encrypted);
        }
        const siloTransaction = new transaction_1.default(transaction);
        siloTransaction.addTag("Silo-Name", siloResource.getAccessKey());
        siloTransaction.addTag("Silo-Version", `0.1.0`);
        return siloTransaction;
      }
      arql(query) {
        return this.api.post("/arql", query).then((response) => response.data || []);
      }
    };
    __publicField(_Arweave, "init");
    __publicField(_Arweave, "crypto", new node_driver_1.default());
    __publicField(_Arweave, "utils", ArweaveUtils);
    var Arweave4 = _Arweave;
    exports.default = Arweave4;
  }
});

// node_modules/arweave/web/net-config.js
var require_net_config = __commonJS({
  "node_modules/arweave/web/net-config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultConfig = void 0;
    var isLocal = (protocol, hostname) => {
      const regexLocalIp = /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/;
      const split = hostname.split(".");
      const tld = split[split.length - 1];
      const localStrings = ["localhost", "[::1]"];
      return localStrings.includes(hostname) || protocol == "file" || localStrings.includes(tld) || !!hostname.match(regexLocalIp) || !!tld.match(regexLocalIp);
    };
    var isIpAdress = (host) => {
      const isIpv6 = host.charAt(0) === "[";
      const regexMatchIpv4 = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;
      return !!host.match(regexMatchIpv4) || isIpv6;
    };
    var getDefaultConfig = (protocol, host) => {
      if (isLocal(protocol, host)) {
        return {
          protocol: "https",
          host: "arweave.net",
          port: 443
        };
      }
      if (!isIpAdress(host)) {
        let split = host.split(".");
        if (split.length >= 3) {
          split.shift();
          const parentDomain = split.join(".");
          return {
            protocol,
            host: parentDomain
          };
        }
      }
      return {
        protocol,
        host
      };
    };
    exports.getDefaultConfig = getDefaultConfig;
  }
});

// node_modules/arweave/web/index.js
var require_web = __commonJS({
  "node_modules/arweave/web/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2) if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2)) __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var common_1 = require_common2();
    var net_config_1 = require_net_config();
    common_1.default.init = function(apiConfig = {}) {
      const defaults = {
        host: "arweave.net",
        port: 443,
        protocol: "https"
      };
      if (typeof location !== "object" || !location.protocol || !location.hostname) {
        return new common_1.default({
          ...apiConfig,
          ...defaults
        });
      }
      const locationProtocol = location.protocol.replace(":", "");
      const locationHost = location.hostname;
      const locationPort = location.port ? parseInt(location.port) : locationProtocol == "https" ? 443 : 80;
      const defaultConfig = (0, net_config_1.getDefaultConfig)(locationProtocol, locationHost);
      const protocol = apiConfig.protocol || defaultConfig.protocol;
      const host = apiConfig.host || defaultConfig.host;
      const port = apiConfig.port || defaultConfig.port || locationPort;
      return new common_1.default({
        ...apiConfig,
        host,
        protocol,
        port
      });
    };
    if (typeof globalThis === "object") {
      globalThis.Arweave = common_1.default;
    } else if (typeof self === "object") {
      self.Arweave = common_1.default;
    }
    __exportStar(require_common2(), exports);
    exports.default = common_1.default;
  }
});

// node_modules/process/browser.js
var require_browser2 = __commonJS({
  "node_modules/process/browser.js"(exports, module2) {
    var process2 = module2.exports = {};
    var cachedSetTimeout;
    var cachedClearTimeout;
    function defaultSetTimout() {
      throw new Error("setTimeout has not been defined");
    }
    function defaultClearTimeout() {
      throw new Error("clearTimeout has not been defined");
    }
    (function() {
      try {
        if (typeof setTimeout === "function") {
          cachedSetTimeout = setTimeout;
        } else {
          cachedSetTimeout = defaultSetTimout;
        }
      } catch (e) {
        cachedSetTimeout = defaultSetTimout;
      }
      try {
        if (typeof clearTimeout === "function") {
          cachedClearTimeout = clearTimeout;
        } else {
          cachedClearTimeout = defaultClearTimeout;
        }
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
      }
    })();
    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
        return setTimeout(fun, 0);
      }
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
      }
      try {
        return cachedSetTimeout(fun, 0);
      } catch (e) {
        try {
          return cachedSetTimeout.call(null, fun, 0);
        } catch (e2) {
          return cachedSetTimeout.call(this, fun, 0);
        }
      }
    }
    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
        return clearTimeout(marker);
      }
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
      }
      try {
        return cachedClearTimeout(marker);
      } catch (e) {
        try {
          return cachedClearTimeout.call(null, marker);
        } catch (e2) {
          return cachedClearTimeout.call(this, marker);
        }
      }
    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;
    function cleanUpNextTick() {
      if (!draining || !currentQueue) {
        return;
      }
      draining = false;
      if (currentQueue.length) {
        queue = currentQueue.concat(queue);
      } else {
        queueIndex = -1;
      }
      if (queue.length) {
        drainQueue();
      }
    }
    function drainQueue() {
      if (draining) {
        return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;
      var len = queue.length;
      while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
          if (currentQueue) {
            currentQueue[queueIndex].run();
          }
        }
        queueIndex = -1;
        len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
    }
    process2.nextTick = function(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
          args[i - 1] = arguments[i];
        }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
      }
    };
    function Item(fun, array) {
      this.fun = fun;
      this.array = array;
    }
    Item.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    process2.title = "browser";
    process2.browser = true;
    process2.env = {};
    process2.argv = [];
    process2.version = "";
    process2.versions = {};
    function noop() {
    }
    process2.on = noop;
    process2.addListener = noop;
    process2.once = noop;
    process2.off = noop;
    process2.removeListener = noop;
    process2.removeAllListeners = noop;
    process2.emit = noop;
    process2.prependListener = noop;
    process2.prependOnceListener = noop;
    process2.listeners = function(name) {
      return [];
    };
    process2.binding = function(name) {
      throw new Error("process.binding is not supported");
    };
    process2.cwd = function() {
      return "/";
    };
    process2.chdir = function(dir) {
      throw new Error("process.chdir is not supported");
    };
    process2.umask = function() {
      return 0;
    };
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ArweaveSync
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// node_modules/@permaweb/aoconnect/dist/browser.js
var __create2 = Object.create;
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
var __getOwnPropNames2 = Object.getOwnPropertyNames;
var __getProtoOf2 = Object.getPrototypeOf;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __commonJS2 = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export2 = (target, all) => {
  for (var name in all)
    __defProp2(target, name, { get: all[name], enumerable: true });
};
var __copyProps2 = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames2(from))
      if (!__hasOwnProp2.call(to, key) && key !== except)
        __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var require_iterator = __commonJS2({
  "node_modules/obliterator/iterator.js"(exports, module2) {
    function Iterator(next) {
      if (typeof next !== "function")
        throw new Error("obliterator/iterator: expecting a function!");
      this.next = next;
    }
    if (typeof Symbol !== "undefined")
      Iterator.prototype[Symbol.iterator] = function() {
        return this;
      };
    Iterator.of = function() {
      var args = arguments, l = args.length, i = 0;
      return new Iterator(function() {
        if (i >= l) return { done: true };
        return { done: false, value: args[i++] };
      });
    };
    Iterator.empty = function() {
      var iterator = new Iterator(function() {
        return { done: true };
      });
      return iterator;
    };
    Iterator.fromSequence = function(sequence) {
      var i = 0, l = sequence.length;
      return new Iterator(function() {
        if (i >= l) return { done: true };
        return { done: false, value: sequence[i++] };
      });
    };
    Iterator.is = function(value) {
      if (value instanceof Iterator) return true;
      return typeof value === "object" && value !== null && typeof value.next === "function";
    };
    module2.exports = Iterator;
  }
});
var require_support = __commonJS2({
  "node_modules/obliterator/support.js"(exports) {
    exports.ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== "undefined";
    exports.SYMBOL_SUPPORT = typeof Symbol !== "undefined";
  }
});
var require_foreach = __commonJS2({
  "node_modules/obliterator/foreach.js"(exports, module2) {
    var support = require_support();
    var ARRAY_BUFFER_SUPPORT = support.ARRAY_BUFFER_SUPPORT;
    var SYMBOL_SUPPORT = support.SYMBOL_SUPPORT;
    module2.exports = function forEach(iterable, callback) {
      var iterator, k2, i, l, s;
      if (!iterable) throw new Error("obliterator/forEach: invalid iterable.");
      if (typeof callback !== "function")
        throw new Error("obliterator/forEach: expecting a callback.");
      if (Array.isArray(iterable) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable) || typeof iterable === "string" || iterable.toString() === "[object Arguments]") {
        for (i = 0, l = iterable.length; i < l; i++) callback(iterable[i], i);
        return;
      }
      if (typeof iterable.forEach === "function") {
        iterable.forEach(callback);
        return;
      }
      if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== "function") {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === "function") {
        iterator = iterable;
        i = 0;
        while (s = iterator.next(), s.done !== true) {
          callback(s.value, i);
          i++;
        }
        return;
      }
      for (k2 in iterable) {
        if (iterable.hasOwnProperty(k2)) {
          callback(iterable[k2], k2);
        }
      }
      return;
    };
  }
});
var require_typed_arrays = __commonJS2({
  "node_modules/mnemonist/utils/typed-arrays.js"(exports) {
    var MAX_8BIT_INTEGER = Math.pow(2, 8) - 1;
    var MAX_16BIT_INTEGER = Math.pow(2, 16) - 1;
    var MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;
    var MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1;
    var MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1;
    var MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;
    exports.getPointerArray = function(size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_8BIT_INTEGER)
        return Uint8Array;
      if (maxIndex <= MAX_16BIT_INTEGER)
        return Uint16Array;
      if (maxIndex <= MAX_32BIT_INTEGER)
        return Uint32Array;
      throw new Error("mnemonist: Pointer Array of size > 4294967295 is not supported.");
    };
    exports.getSignedPointerArray = function(size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_SIGNED_8BIT_INTEGER)
        return Int8Array;
      if (maxIndex <= MAX_SIGNED_16BIT_INTEGER)
        return Int16Array;
      if (maxIndex <= MAX_SIGNED_32BIT_INTEGER)
        return Int32Array;
      return Float64Array;
    };
    exports.getNumberType = function(value) {
      if (value === (value | 0)) {
        if (Math.sign(value) === -1) {
          if (value <= 127 && value >= -128)
            return Int8Array;
          if (value <= 32767 && value >= -32768)
            return Int16Array;
          return Int32Array;
        } else {
          if (value <= 255)
            return Uint8Array;
          if (value <= 65535)
            return Uint16Array;
          return Uint32Array;
        }
      }
      return Float64Array;
    };
    var TYPE_PRIORITY = {
      Uint8Array: 1,
      Int8Array: 2,
      Uint16Array: 3,
      Int16Array: 4,
      Uint32Array: 5,
      Int32Array: 6,
      Float32Array: 7,
      Float64Array: 8
    };
    exports.getMinimalRepresentation = function(array, getter) {
      var maxType = null, maxPriority = 0, p2, t, v22, i, l;
      for (i = 0, l = array.length; i < l; i++) {
        v22 = getter ? getter(array[i]) : array[i];
        t = exports.getNumberType(v22);
        p2 = TYPE_PRIORITY[t.name];
        if (p2 > maxPriority) {
          maxPriority = p2;
          maxType = t;
        }
      }
      return maxType;
    };
    exports.isTypedArray = function(value) {
      return typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView(value);
    };
    exports.concat = function() {
      var length = 0, i, o, l;
      for (i = 0, l = arguments.length; i < l; i++)
        length += arguments[i].length;
      var array = new arguments[0].constructor(length);
      for (i = 0, o = 0; i < l; i++) {
        array.set(arguments[i], o);
        o += arguments[i].length;
      }
      return array;
    };
    exports.indices = function(length) {
      var PointerArray = exports.getPointerArray(length);
      var array = new PointerArray(length);
      for (var i = 0; i < length; i++)
        array[i] = i;
      return array;
    };
  }
});
var require_iterables = __commonJS2({
  "node_modules/mnemonist/utils/iterables.js"(exports) {
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    function isArrayLike2(target) {
      return Array.isArray(target) || typed.isTypedArray(target);
    }
    function guessLength(target) {
      if (typeof target.length === "number")
        return target.length;
      if (typeof target.size === "number")
        return target.size;
      return;
    }
    function toArray(target) {
      var l = guessLength(target);
      var array = typeof l === "number" ? new Array(l) : [];
      var i = 0;
      forEach(target, function(value) {
        array[i++] = value;
      });
      return array;
    }
    function toArrayWithIndices(target) {
      var l = guessLength(target);
      var IndexArray = typeof l === "number" ? typed.getPointerArray(l) : Array;
      var array = typeof l === "number" ? new Array(l) : [];
      var indices = typeof l === "number" ? new IndexArray(l) : [];
      var i = 0;
      forEach(target, function(value) {
        array[i] = value;
        indices[i] = i++;
      });
      return [array, indices];
    }
    exports.isArrayLike = isArrayLike2;
    exports.guessLength = guessLength;
    exports.toArray = toArray;
    exports.toArrayWithIndices = toArrayWithIndices;
  }
});
var require_lru_cache = __commonJS2({
  "node_modules/mnemonist/lru-cache.js"(exports, module2) {
    var Iterator = require_iterator();
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    var iterables = require_iterables();
    function LRUCache(Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      this.capacity = capacity;
      if (typeof this.capacity !== "number" || this.capacity <= 0)
        throw new Error("mnemonist/lru-cache: capacity should be positive number.");
      else if (!isFinite(this.capacity) || Math.floor(this.capacity) !== this.capacity)
        throw new Error("mnemonist/lru-cache: capacity should be a finite positive integer.");
      var PointerArray = typed.getPointerArray(capacity);
      this.forward = new PointerArray(capacity);
      this.backward = new PointerArray(capacity);
      this.K = typeof Keys === "function" ? new Keys(capacity) : new Array(capacity);
      this.V = typeof Values === "function" ? new Values(capacity) : new Array(capacity);
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    }
    LRUCache.prototype.clear = function() {
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    };
    LRUCache.prototype.splayOnTop = function(pointer) {
      var oldHead = this.head;
      if (this.head === pointer)
        return this;
      var previous = this.backward[pointer], next = this.forward[pointer];
      if (this.tail === pointer) {
        this.tail = previous;
      } else {
        this.backward[next] = previous;
      }
      this.forward[previous] = next;
      this.backward[oldHead] = pointer;
      this.head = pointer;
      this.forward[pointer] = oldHead;
      return this;
    };
    LRUCache.prototype.set = function(key, value) {
      var pointer = this.items[key];
      if (typeof pointer !== "undefined") {
        this.splayOnTop(pointer);
        this.V[pointer] = value;
        return;
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
    };
    LRUCache.prototype.setpop = function(key, value) {
      var oldValue = null;
      var oldKey = null;
      var pointer = this.items[key];
      if (typeof pointer !== "undefined") {
        this.splayOnTop(pointer);
        oldValue = this.V[pointer];
        this.V[pointer] = value;
        return { evicted: false, key, value: oldValue };
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        oldValue = this.V[pointer];
        oldKey = this.K[pointer];
        delete this.items[oldKey];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
      if (oldKey) {
        return { evicted: true, key: oldKey, value: oldValue };
      } else {
        return null;
      }
    };
    LRUCache.prototype.has = function(key) {
      return key in this.items;
    };
    LRUCache.prototype.get = function(key) {
      var pointer = this.items[key];
      if (typeof pointer === "undefined")
        return;
      this.splayOnTop(pointer);
      return this.V[pointer];
    };
    LRUCache.prototype.peek = function(key) {
      var pointer = this.items[key];
      if (typeof pointer === "undefined")
        return;
      return this.V[pointer];
    };
    LRUCache.prototype.forEach = function(callback, scope) {
      scope = arguments.length > 1 ? scope : this;
      var i = 0, l = this.size;
      var pointer = this.head, keys4 = this.K, values = this.V, forward = this.forward;
      while (i < l) {
        callback.call(scope, values[pointer], keys4[pointer], this);
        pointer = forward[pointer];
        i++;
      }
    };
    LRUCache.prototype.keys = function() {
      var i = 0, l = this.size;
      var pointer = this.head, keys4 = this.K, forward = this.forward;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        var key = keys4[pointer];
        i++;
        if (i < l)
          pointer = forward[pointer];
        return {
          done: false,
          value: key
        };
      });
    };
    LRUCache.prototype.values = function() {
      var i = 0, l = this.size;
      var pointer = this.head, values = this.V, forward = this.forward;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        var value = values[pointer];
        i++;
        if (i < l)
          pointer = forward[pointer];
        return {
          done: false,
          value
        };
      });
    };
    LRUCache.prototype.entries = function() {
      var i = 0, l = this.size;
      var pointer = this.head, keys4 = this.K, values = this.V, forward = this.forward;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        var key = keys4[pointer], value = values[pointer];
        i++;
        if (i < l)
          pointer = forward[pointer];
        return {
          done: false,
          value: [key, value]
        };
      });
    };
    if (typeof Symbol !== "undefined")
      LRUCache.prototype[Symbol.iterator] = LRUCache.prototype.entries;
    LRUCache.prototype.inspect = function() {
      var proxy = /* @__PURE__ */ new Map();
      var iterator = this.entries(), step;
      while (step = iterator.next(), !step.done)
        proxy.set(step.value[0], step.value[1]);
      Object.defineProperty(proxy, "constructor", {
        value: LRUCache,
        enumerable: false
      });
      return proxy;
    };
    if (typeof Symbol !== "undefined")
      LRUCache.prototype[Symbol.for("nodejs.util.inspect.custom")] = LRUCache.prototype.inspect;
    LRUCache.from = function(iterable, Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = iterables.guessLength(iterable);
        if (typeof capacity !== "number")
          throw new Error("mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.");
      } else if (arguments.length === 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      var cache = new LRUCache(Keys, Values, capacity);
      forEach(iterable, function(value, key) {
        cache.set(key, value);
      });
      return cache;
    };
    module2.exports = LRUCache;
  }
});
var require_lru_map = __commonJS2({
  "node_modules/mnemonist/lru-map.js"(exports, module2) {
    var LRUCache = require_lru_cache();
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    var iterables = require_iterables();
    function LRUMap(Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      this.capacity = capacity;
      if (typeof this.capacity !== "number" || this.capacity <= 0)
        throw new Error("mnemonist/lru-map: capacity should be positive number.");
      else if (!isFinite(this.capacity) || Math.floor(this.capacity) !== this.capacity)
        throw new Error("mnemonist/lru-map: capacity should be a finite positive integer.");
      var PointerArray = typed.getPointerArray(capacity);
      this.forward = new PointerArray(capacity);
      this.backward = new PointerArray(capacity);
      this.K = typeof Keys === "function" ? new Keys(capacity) : new Array(capacity);
      this.V = typeof Values === "function" ? new Values(capacity) : new Array(capacity);
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = /* @__PURE__ */ new Map();
    }
    LRUMap.prototype.clear = function() {
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items.clear();
    };
    LRUMap.prototype.set = function(key, value) {
      var pointer = this.items.get(key);
      if (typeof pointer !== "undefined") {
        this.splayOnTop(pointer);
        this.V[pointer] = value;
        return;
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        this.items.delete(this.K[pointer]);
      }
      this.items.set(key, pointer);
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
    };
    LRUMap.prototype.setpop = function(key, value) {
      var oldValue = null;
      var oldKey = null;
      var pointer = this.items.get(key);
      if (typeof pointer !== "undefined") {
        this.splayOnTop(pointer);
        oldValue = this.V[pointer];
        this.V[pointer] = value;
        return { evicted: false, key, value: oldValue };
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        oldValue = this.V[pointer];
        oldKey = this.K[pointer];
        this.items.delete(oldKey);
      }
      this.items.set(key, pointer);
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
      if (oldKey) {
        return { evicted: true, key: oldKey, value: oldValue };
      } else {
        return null;
      }
    };
    LRUMap.prototype.has = function(key) {
      return this.items.has(key);
    };
    LRUMap.prototype.get = function(key) {
      var pointer = this.items.get(key);
      if (typeof pointer === "undefined")
        return;
      this.splayOnTop(pointer);
      return this.V[pointer];
    };
    LRUMap.prototype.peek = function(key) {
      var pointer = this.items.get(key);
      if (typeof pointer === "undefined")
        return;
      return this.V[pointer];
    };
    LRUMap.prototype.splayOnTop = LRUCache.prototype.splayOnTop;
    LRUMap.prototype.forEach = LRUCache.prototype.forEach;
    LRUMap.prototype.keys = LRUCache.prototype.keys;
    LRUMap.prototype.values = LRUCache.prototype.values;
    LRUMap.prototype.entries = LRUCache.prototype.entries;
    if (typeof Symbol !== "undefined")
      LRUMap.prototype[Symbol.iterator] = LRUMap.prototype.entries;
    LRUMap.prototype.inspect = LRUCache.prototype.inspect;
    LRUMap.from = function(iterable, Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = iterables.guessLength(iterable);
        if (typeof capacity !== "number")
          throw new Error("mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.");
      } else if (arguments.length === 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      var cache = new LRUMap(Keys, Values, capacity);
      forEach(iterable, function(value, key) {
        cache.set(key, value);
      });
      return cache;
    };
    module2.exports = LRUMap;
  }
});
var require_ms = __commonJS2({
  "node_modules/ms/index.js"(exports, module2) {
    var s = 1e3;
    var m2 = s * 60;
    var h = m2 * 60;
    var d2 = h * 24;
    var w32 = d2 * 7;
    var y2 = d2 * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type3 = typeof val;
      if (type3 === "string" && val.length > 0) {
        return parse(val);
      } else if (type3 === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type3 = (match[2] || "ms").toLowerCase();
      switch (type3) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y2;
        case "weeks":
        case "week":
        case "w":
          return n * w32;
        case "days":
        case "day":
        case "d":
          return n * d2;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m2;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms2) {
      var msAbs = Math.abs(ms2);
      if (msAbs >= d2) {
        return Math.round(ms2 / d2) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms2 / h) + "h";
      }
      if (msAbs >= m2) {
        return Math.round(ms2 / m2) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms2 / s) + "s";
      }
      return ms2 + "ms";
    }
    function fmtLong(ms2) {
      var msAbs = Math.abs(ms2);
      if (msAbs >= d2) {
        return plural(ms2, msAbs, d2, "day");
      }
      if (msAbs >= h) {
        return plural(ms2, msAbs, h, "hour");
      }
      if (msAbs >= m2) {
        return plural(ms2, msAbs, m2, "minute");
      }
      if (msAbs >= s) {
        return plural(ms2, msAbs, s, "second");
      }
      return ms2 + " ms";
    }
    function plural(ms2, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms2 / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});
var require_common = __commonJS2({
  "node_modules/debug/src/common.js"(exports, module2) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce2;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug2(...args) {
          if (!debug2.enabled) {
            return;
          }
          const self2 = debug2;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms2 = curr - (prevTime || curr);
          self2.diff = ms2;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug2.namespace = namespace;
        debug2.useColors = createDebug.useColors();
        debug2.color = createDebug.selectColor(namespace);
        debug2.extend = extend;
        debug2.destroy = createDebug.destroy;
        Object.defineProperty(debug2, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v22) => {
            enableOverride = v22;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug2);
        }
        return debug2;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce2(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  }
});
var require_browser = __commonJS2({
  "node_modules/debug/src/browser.js"(exports, module2) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      let m2;
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && (m2 = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m2[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c2 = "color: " + this.color;
      args.splice(1, 0, c2, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c2);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r18;
      try {
        r18 = exports.storage.getItem("debug");
      } catch (error) {
      }
      if (!r18 && typeof process !== "undefined" && "env" in process) {
        r18 = process.env.DEBUG;
      }
      return r18;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module2.exports = require_common()(exports);
    var { formatters } = module2.exports;
    formatters.j = function(v22) {
      try {
        return JSON.stringify(v22);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});
var require_base64_js = __commonJS2({
  "node_modules/base64-js/index.js"(exports) {
    "use strict";
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    var i;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1) validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i2;
      for (i2 = 0; i2 < len2; i2 += 4) {
        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i2 = start; i2 < end; i2 += 3) {
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});
var require_ieee754 = __commonJS2({
  "node_modules/ieee754/index.js"(exports) {
    exports.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e, m2;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d2 = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d2;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d2, nBits -= 8) {
      }
      m2 = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m2 = m2 * 256 + buffer[offset + i], i += d2, nBits -= 8) {
      }
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m2 ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m2 = m2 + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m2 * Math.pow(2, e - mLen);
    };
    exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
      var e, m2, c2;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt2 = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d2 = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m2 = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c2 = Math.pow(2, -e)) < 1) {
          e--;
          c2 *= 2;
        }
        if (e + eBias >= 1) {
          value += rt2 / c2;
        } else {
          value += rt2 * Math.pow(2, 1 - eBias);
        }
        if (value * c2 >= 2) {
          e++;
          c2 /= 2;
        }
        if (e + eBias >= eMax) {
          m2 = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m2 = (value * c2 - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m2 = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer[offset + i] = m2 & 255, i += d2, m2 /= 256, mLen -= 8) {
      }
      e = e << mLen | m2;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 255, i += d2, e /= 256, eLen -= 8) {
      }
      buffer[offset + i - d2] |= s * 128;
    };
  }
});
var require_buffer = __commonJS2({
  "node_modules/buffer/index.js"(exports) {
    "use strict";
    var base64 = require_base64_js();
    var ieee754 = require_ieee754();
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports.Buffer = Buffer32;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    Buffer32.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer32.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
    }
    function typedArraySupport() {
      try {
        const arr = new Uint8Array(1);
        const proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer32.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer32.isBuffer(this)) return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer32.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer32.isBuffer(this)) return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      const buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer32.prototype);
      return buf;
    }
    function Buffer32(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          );
        }
        return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
    }
    Buffer32.poolSize = 8192;
    function from(value, encodingOrOffset, length) {
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof value === "number") {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        );
      }
      const valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer32.from(valueOf, encodingOrOffset, length);
      }
      const b2 = fromObject(value);
      if (b2) return b2;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer32.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
      }
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    Buffer32.from = function(value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer32.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer32, Uint8Array);
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
    }
    function alloc(size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
      }
      return createBuffer(size);
    }
    Buffer32.alloc = function(size, fill, encoding) {
      return alloc(size, fill, encoding);
    };
    function allocUnsafe(size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0);
    }
    Buffer32.allocUnsafe = function(size) {
      return allocUnsafe(size);
    };
    Buffer32.allocUnsafeSlow = function(size) {
      return allocUnsafe(size);
    };
    function fromString(string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer32.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      const length = byteLength(string, encoding) | 0;
      let buf = createBuffer(length);
      const actual = buf.write(string, encoding);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array) {
      const length = array.length < 0 ? 0 : checked(array.length) | 0;
      const buf = createBuffer(length);
      for (let i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      let buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array);
      } else if (length === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer32.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer32.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer32.alloc(+length);
    }
    Buffer32.isBuffer = function isBuffer(b2) {
      return b2 != null && b2._isBuffer === true && b2 !== Buffer32.prototype;
    };
    Buffer32.compare = function compare(a, b2) {
      if (isInstance(a, Uint8Array)) a = Buffer32.from(a, a.offset, a.byteLength);
      if (isInstance(b2, Uint8Array)) b2 = Buffer32.from(b2, b2.offset, b2.byteLength);
      if (!Buffer32.isBuffer(a) || !Buffer32.isBuffer(b2)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        );
      }
      if (a === b2) return 0;
      let x32 = a.length;
      let y2 = b2.length;
      for (let i = 0, len = Math.min(x32, y2); i < len; ++i) {
        if (a[i] !== b2[i]) {
          x32 = a[i];
          y2 = b2[i];
          break;
        }
      }
      if (x32 < y2) return -1;
      if (y2 < x32) return 1;
      return 0;
    };
    Buffer32.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer32.concat = function concat3(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer32.alloc(0);
      }
      let i;
      if (length === void 0) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }
      const buffer = Buffer32.allocUnsafe(length);
      let pos = 0;
      for (i = 0; i < list.length; ++i) {
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer.length) {
            if (!Buffer32.isBuffer(buf)) buf = Buffer32.from(buf);
            buf.copy(buffer, pos);
          } else {
            Uint8Array.prototype.set.call(
              buffer,
              buf,
              pos
            );
          }
        } else if (!Buffer32.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer, pos);
        }
        pos += buf.length;
      }
      return buffer;
    };
    function byteLength(string, encoding) {
      if (Buffer32.isBuffer(string)) {
        return string.length;
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
        );
      }
      const len = string.length;
      const mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0) return 0;
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
            return utf8ToBytes(string).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer32.byteLength = byteLength;
    function slowToString(encoding, start, end) {
      let loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding) encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer32.prototype._isBuffer = true;
    function swap(b2, n, m2) {
      const i = b2[n];
      b2[n] = b2[m2];
      b2[m2] = i;
    }
    Buffer32.prototype.swap16 = function swap16() {
      const len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (let i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this;
    };
    Buffer32.prototype.swap32 = function swap32() {
      const len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (let i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this;
    };
    Buffer32.prototype.swap64 = function swap64() {
      const len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (let i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this;
    };
    Buffer32.prototype.toString = function toString4() {
      const length = this.length;
      if (length === 0) return "";
      if (arguments.length === 0) return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer32.prototype.toLocaleString = Buffer32.prototype.toString;
    Buffer32.prototype.equals = function equals3(b2) {
      if (!Buffer32.isBuffer(b2)) throw new TypeError("Argument must be a Buffer");
      if (this === b2) return true;
      return Buffer32.compare(this, b2) === 0;
    };
    Buffer32.prototype.inspect = function inspect() {
      let str = "";
      const max3 = exports.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max3).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max3) str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer32.prototype[customInspectSymbol] = Buffer32.prototype.inspect;
    }
    Buffer32.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer32.from(target, target.offset, target.byteLength);
      }
      if (!Buffer32.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
        );
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target) return 0;
      let x32 = thisEnd - thisStart;
      let y2 = end - start;
      const len = Math.min(x32, y2);
      const thisCopy = this.slice(thisStart, thisEnd);
      const targetCopy = target.slice(start, end);
      for (let i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x32 = thisCopy[i];
          y2 = targetCopy[i];
          break;
        }
      }
      if (x32 < y2) return -1;
      if (y2 < x32) return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
      if (buffer.length === 0) return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer.length - 1;
      }
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
      }
      if (typeof val === "string") {
        val = Buffer32.from(val, encoding);
      }
      if (Buffer32.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      let indexSize = 1;
      let arrLength = arr.length;
      let valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i2) {
        if (indexSize === 1) {
          return buf[i2];
        } else {
          return buf.readUInt16BE(i2 * indexSize);
        }
      }
      let i;
      if (dir) {
        let foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          let found = true;
          for (let j2 = 0; j2 < valLength; j2++) {
            if (read(arr, i + j2) !== read(val, j2)) {
              found = false;
              break;
            }
          }
          if (found) return i;
        }
      }
      return -1;
    }
    Buffer32.prototype.includes = function includes2(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer32.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer32.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string, offset, length) {
      offset = Number(offset) || 0;
      const remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      const strLen = string.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      let i;
      for (i = 0; i < length; ++i) {
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
      }
      return i;
    }
    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length);
    }
    function base64Write(buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length);
    }
    function ucs2Write(buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
    }
    Buffer32.prototype.write = function write(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === void 0) encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      const remaining = this.length - offset;
      if (length === void 0 || length > remaining) length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding) encoding = "utf8";
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string, offset, length);
          case "base64":
            return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset, length);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer32.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      const res = [];
      let i = start;
      while (i < end) {
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
          let secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      const len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      let res = "";
      let i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      const len = buf.length;
      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;
      let out = "";
      for (let i = start; i < end; ++i) {
        out += hexSliceLookupTable[buf[i]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      const bytes = buf.slice(start, end);
      let res = "";
      for (let i = 0; i < bytes.length - 1; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res;
    }
    Buffer32.prototype.slice = function slice3(start, end) {
      const len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start) end = start;
      const newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer32.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
      if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer32.prototype.readUintLE = Buffer32.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength2, this.length);
      let val = this[offset];
      let mul = 1;
      let i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      return val;
    };
    Buffer32.prototype.readUintBE = Buffer32.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      let val = this[offset + --byteLength2];
      let mul = 1;
      while (byteLength2 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength2] * mul;
      }
      return val;
    };
    Buffer32.prototype.readUint8 = Buffer32.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer32.prototype.readUint16LE = Buffer32.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer32.prototype.readUint16BE = Buffer32.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer32.prototype.readUint32LE = Buffer32.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer32.prototype.readUint32BE = Buffer32.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer32.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
      const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
      return BigInt(lo) + (BigInt(hi) << BigInt(32));
    });
    Buffer32.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
      return (BigInt(hi) << BigInt(32)) + BigInt(lo);
    });
    Buffer32.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength2, this.length);
      let val = this[offset];
      let mul = 1;
      let i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer32.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength2, this.length);
      let i = byteLength2;
      let mul = 1;
      let val = this[offset + --i];
      while (i > 0 && (mul *= 256)) {
        val += this[offset + --i] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer32.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128)) return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer32.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      const val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer32.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      const val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer32.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer32.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer32.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
      return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
    });
    Buffer32.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = (first << 24) + // Overflow
      this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
    });
    Buffer32.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };
    Buffer32.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };
    Buffer32.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };
    Buffer32.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max3, min) {
      if (!Buffer32.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max3 || value < min) throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
    }
    Buffer32.prototype.writeUintLE = Buffer32.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      let mul = 1;
      let i = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer32.prototype.writeUintBE = Buffer32.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      let i = byteLength2 - 1;
      let mul = 1;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer32.prototype.writeUint8 = Buffer32.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer32.prototype.writeUint16LE = Buffer32.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer32.prototype.writeUint16BE = Buffer32.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer32.prototype.writeUint32LE = Buffer32.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 255;
      return offset + 4;
    };
    Buffer32.prototype.writeUint32BE = Buffer32.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    function wrtBigUInt64LE(buf, value, offset, min, max3) {
      checkIntBI(value, min, max3, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      return offset;
    }
    function wrtBigUInt64BE(buf, value, offset, min, max3) {
      checkIntBI(value, min, max3, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset + 7] = lo;
      lo = lo >> 8;
      buf[offset + 6] = lo;
      lo = lo >> 8;
      buf[offset + 5] = lo;
      lo = lo >> 8;
      buf[offset + 4] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset + 3] = hi;
      hi = hi >> 8;
      buf[offset + 2] = hi;
      hi = hi >> 8;
      buf[offset + 1] = hi;
      hi = hi >> 8;
      buf[offset] = hi;
      return offset + 8;
    }
    Buffer32.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer32.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer32.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      let i = 0;
      let mul = 1;
      let sub = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer32.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      let i = byteLength2 - 1;
      let mul = 1;
      let sub = 0;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer32.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
      if (value < 0) value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer32.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer32.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer32.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
    };
    Buffer32.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0) value = 4294967295 + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    Buffer32.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    Buffer32.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function checkIEEE754(buf, value, offset, ext, max3, min) {
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
      if (offset < 0) throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer32.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer32.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer32.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer32.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer32.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer32.isBuffer(target)) throw new TypeError("argument should be a Buffer");
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;
      if (end === start) return 0;
      if (target.length === 0 || this.length === 0) return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
      if (end < 0) throw new RangeError("sourceEnd out of bounds");
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      const len = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }
      return len;
    };
    Buffer32.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer32.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          const code = val.charCodeAt(0);
          if (encoding === "utf8" && code < 128 || encoding === "latin1") {
            val = code;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val) val = 0;
      let i;
      if (typeof val === "number") {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        const bytes = Buffer32.isBuffer(val) ? val : Buffer32.from(val, encoding);
        const len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }
      return this;
    };
    var errors = {};
    function E32(sym, getMessage, Base) {
      errors[sym] = class NodeError extends Base {
        constructor() {
          super();
          Object.defineProperty(this, "message", {
            value: getMessage.apply(this, arguments),
            writable: true,
            configurable: true
          });
          this.name = `${this.name} [${sym}]`;
          this.stack;
          delete this.name;
        }
        get code() {
          return sym;
        }
        set code(value) {
          Object.defineProperty(this, "code", {
            configurable: true,
            enumerable: true,
            value,
            writable: true
          });
        }
        toString() {
          return `${this.name} [${sym}]: ${this.message}`;
        }
      };
    }
    E32(
      "ERR_BUFFER_OUT_OF_BOUNDS",
      function(name) {
        if (name) {
          return `${name} is outside of buffer bounds`;
        }
        return "Attempt to access memory outside buffer bounds";
      },
      RangeError
    );
    E32(
      "ERR_INVALID_ARG_TYPE",
      function(name, actual) {
        return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
      },
      TypeError
    );
    E32(
      "ERR_OUT_OF_RANGE",
      function(str, range, input) {
        let msg = `The value of "${str}" is out of range.`;
        let received = input;
        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
          received = addNumericalSeparator(String(input));
        } else if (typeof input === "bigint") {
          received = String(input);
          if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
            received = addNumericalSeparator(received);
          }
          received += "n";
        }
        msg += ` It must be ${range}. Received ${received}`;
        return msg;
      },
      RangeError
    );
    function addNumericalSeparator(val) {
      let res = "";
      let i = val.length;
      const start = val[0] === "-" ? 1 : 0;
      for (; i >= start + 4; i -= 3) {
        res = `_${val.slice(i - 3, i)}${res}`;
      }
      return `${val.slice(0, i)}${res}`;
    }
    function checkBounds(buf, offset, byteLength2) {
      validateNumber(offset, "offset");
      if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
        boundsError(offset, buf.length - (byteLength2 + 1));
      }
    }
    function checkIntBI(value, min, max3, buf, offset, byteLength2) {
      if (value > max3 || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength2 > 3) {
          if (min === 0 || min === BigInt(0)) {
            range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
          } else {
            range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
          }
        } else {
          range = `>= ${min}${n} and <= ${max3}${n}`;
        }
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
      }
      checkBounds(buf, offset, byteLength2);
    }
    function validateNumber(value, name) {
      if (typeof value !== "number") {
        throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
      }
    }
    function boundsError(value, length, type3) {
      if (Math.floor(value) !== value) {
        validateNumber(value, type3);
        throw new errors.ERR_OUT_OF_RANGE(type3 || "offset", "an integer", value);
      }
      if (length < 0) {
        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
      }
      throw new errors.ERR_OUT_OF_RANGE(
        type3 || "offset",
        `>= ${type3 ? 1 : 0} and <= ${length}`,
        value
      );
    }
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2) return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      let codePoint;
      const length = string.length;
      let leadSurrogate = null;
      const bytes = [];
      for (let i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              continue;
            } else if (i + 1 === length) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0) break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0) break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0) break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0) break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      const byteArray = [];
      for (let i = 0; i < str.length; ++i) {
        byteArray.push(str.charCodeAt(i) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      let c2, hi, lo;
      const byteArray = [];
      for (let i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break;
        c2 = str.charCodeAt(i);
        hi = c2 >> 8;
        lo = c2 % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
      let i;
      for (i = 0; i < length; ++i) {
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
      }
      return i;
    }
    function isInstance(obj, type3) {
      return obj instanceof type3 || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type3.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      const alphabet = "0123456789abcdef";
      const table = new Array(256);
      for (let i = 0; i < 16; ++i) {
        const i16 = i * 16;
        for (let j2 = 0; j2 < 16; ++j2) {
          table[i16 + j2] = alphabet[i] + alphabet[j2];
        }
      }
      return table;
    }();
    function defineBigIntMethod(fn2) {
      return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn2;
    }
    function BufferBigIntNotDefined() {
      throw new Error("BigInt not supported");
    }
  }
});
var Qt = { "@@functional/placeholder": true };
function k(r18) {
  return r18 === Qt;
}
function E(r18) {
  return function e(t) {
    return arguments.length === 0 || k(t) ? e : r18.apply(this, arguments);
  };
}
function x(r18) {
  return function e(t, n) {
    switch (arguments.length) {
      case 0:
        return e;
      case 1:
        return k(t) ? e : E(function(s) {
          return r18(t, s);
        });
      default:
        return k(t) && k(n) ? e : k(t) ? E(function(s) {
          return r18(s, n);
        }) : k(n) ? E(function(s) {
          return r18(t, s);
        }) : r18(t, n);
    }
  };
}
function q(r18, e) {
  switch (r18) {
    case 0:
      return function() {
        return e.apply(this, arguments);
      };
    case 1:
      return function(t) {
        return e.apply(this, arguments);
      };
    case 2:
      return function(t, n) {
        return e.apply(this, arguments);
      };
    case 3:
      return function(t, n, s) {
        return e.apply(this, arguments);
      };
    case 4:
      return function(t, n, s, a) {
        return e.apply(this, arguments);
      };
    case 5:
      return function(t, n, s, a, i) {
        return e.apply(this, arguments);
      };
    case 6:
      return function(t, n, s, a, i, o) {
        return e.apply(this, arguments);
      };
    case 7:
      return function(t, n, s, a, i, o, u) {
        return e.apply(this, arguments);
      };
    case 8:
      return function(t, n, s, a, i, o, u, l) {
        return e.apply(this, arguments);
      };
    case 9:
      return function(t, n, s, a, i, o, u, l, h) {
        return e.apply(this, arguments);
      };
    case 10:
      return function(t, n, s, a, i, o, u, l, h, v22) {
        return e.apply(this, arguments);
      };
    default:
      throw new Error("First argument to _arity must be a non-negative integer no greater than ten");
  }
}
function et(r18, e, t) {
  return function() {
    for (var n = [], s = 0, a = r18, i = 0, o = false; i < e.length || s < arguments.length; ) {
      var u;
      i < e.length && (!k(e[i]) || s >= arguments.length) ? u = e[i] : (u = arguments[s], s += 1), n[i] = u, k(u) ? o = true : a -= 1, i += 1;
    }
    return !o && a <= 0 ? t.apply(this, n) : q(Math.max(0, a), et(r18, n, t));
  };
}
var rn = x(function(e, t) {
  return e === 1 ? E(t) : q(e, et(e, [], t));
});
var tt = rn;
function ue(r18) {
  return function e(t, n, s) {
    switch (arguments.length) {
      case 0:
        return e;
      case 1:
        return k(t) ? e : x(function(a, i) {
          return r18(t, a, i);
        });
      case 2:
        return k(t) && k(n) ? e : k(t) ? x(function(a, i) {
          return r18(a, n, i);
        }) : k(n) ? x(function(a, i) {
          return r18(t, a, i);
        }) : E(function(a) {
          return r18(t, n, a);
        });
      default:
        return k(t) && k(n) && k(s) ? e : k(t) && k(n) ? x(function(a, i) {
          return r18(a, i, s);
        }) : k(t) && k(s) ? x(function(a, i) {
          return r18(a, n, i);
        }) : k(n) && k(s) ? x(function(a, i) {
          return r18(t, a, i);
        }) : k(t) ? E(function(a) {
          return r18(a, n, s);
        }) : k(n) ? E(function(a) {
          return r18(t, a, s);
        }) : k(s) ? E(function(a) {
          return r18(t, n, a);
        }) : r18(t, n, s);
    }
  };
}
var Oe = Array.isArray || function(e) {
  return e != null && e.length >= 0 && Object.prototype.toString.call(e) === "[object Array]";
};
function wt(r18) {
  return r18 != null && typeof r18["@@transducer/step"] == "function";
}
function le(r18, e, t) {
  return function() {
    if (arguments.length === 0) return t();
    var n = arguments[arguments.length - 1];
    if (!Oe(n)) {
      for (var s = 0; s < r18.length; ) {
        if (typeof n[r18[s]] == "function") return n[r18[s]].apply(n, Array.prototype.slice.call(arguments, 0, -1));
        s += 1;
      }
      if (wt(n)) {
        var a = e.apply(null, Array.prototype.slice.call(arguments, 0, -1));
        return a(n);
      }
    }
    return t.apply(this, arguments);
  };
}
function bt(r18) {
  return r18 && r18["@@transducer/reduced"] ? r18 : { "@@transducer/value": r18, "@@transducer/reduced": true };
}
var K = { init: function() {
  return this.xf["@@transducer/init"]();
}, result: function(r18) {
  return this.xf["@@transducer/result"](r18);
} };
function rt(r18) {
  for (var e = [], t; !(t = r18.next()).done; ) e.push(t.value);
  return e;
}
function nt(r18, e, t) {
  for (var n = 0, s = t.length; n < s; ) {
    if (r18(e, t[n])) return true;
    n += 1;
  }
  return false;
}
function St(r18) {
  var e = String(r18).match(/^function (\w*)/);
  return e == null ? "" : e[1];
}
function ee(r18, e) {
  return Object.prototype.hasOwnProperty.call(e, r18);
}
function nn(r18, e) {
  return r18 === e ? r18 !== 0 || 1 / r18 === 1 / e : r18 !== r18 && e !== e;
}
var st = typeof Object.is == "function" ? Object.is : nn;
var Kt = Object.prototype.toString;
var sn = function() {
  return Kt.call(arguments) === "[object Arguments]" ? function(e) {
    return Kt.call(e) === "[object Arguments]";
  } : function(e) {
    return ee("callee", e);
  };
}();
var er = sn;
var an = !{ toString: null }.propertyIsEnumerable("toString");
var tr = ["constructor", "valueOf", "isPrototypeOf", "toString", "propertyIsEnumerable", "hasOwnProperty", "toLocaleString"];
var rr = function() {
  "use strict";
  return arguments.propertyIsEnumerable("length");
}();
var on = function(e, t) {
  for (var n = 0; n < e.length; ) {
    if (e[n] === t) return true;
    n += 1;
  }
  return false;
};
var un = typeof Object.keys == "function" && !rr ? E(function(e) {
  return Object(e) !== e ? [] : Object.keys(e);
}) : E(function(e) {
  if (Object(e) !== e) return [];
  var t, n, s = [], a = rr && er(e);
  for (t in e) ee(t, e) && (!a || t !== "length") && (s[s.length] = t);
  if (an) for (n = tr.length - 1; n >= 0; ) t = tr[n], ee(t, e) && !on(s, t) && (s[s.length] = t), n -= 1;
  return s;
});
var F = un;
var ln = E(function(e) {
  return e === null ? "Null" : e === void 0 ? "Undefined" : Object.prototype.toString.call(e).slice(8, -1);
});
var kt = ln;
function nr(r18, e, t, n) {
  var s = rt(r18), a = rt(e);
  function i(o, u) {
    return Me(o, u, t.slice(), n.slice());
  }
  return !nt(function(o, u) {
    return !nt(i, u, o);
  }, a, s);
}
function Me(r18, e, t, n) {
  if (st(r18, e)) return true;
  var s = kt(r18);
  if (s !== kt(e)) return false;
  if (typeof r18["fantasy-land/equals"] == "function" || typeof e["fantasy-land/equals"] == "function") return typeof r18["fantasy-land/equals"] == "function" && r18["fantasy-land/equals"](e) && typeof e["fantasy-land/equals"] == "function" && e["fantasy-land/equals"](r18);
  if (typeof r18.equals == "function" || typeof e.equals == "function") return typeof r18.equals == "function" && r18.equals(e) && typeof e.equals == "function" && e.equals(r18);
  switch (s) {
    case "Arguments":
    case "Array":
    case "Object":
      if (typeof r18.constructor == "function" && St(r18.constructor) === "Promise") return r18 === e;
      break;
    case "Boolean":
    case "Number":
    case "String":
      if (!(typeof r18 == typeof e && st(r18.valueOf(), e.valueOf()))) return false;
      break;
    case "Date":
      if (!st(r18.valueOf(), e.valueOf())) return false;
      break;
    case "Error":
      return r18.name === e.name && r18.message === e.message;
    case "RegExp":
      if (!(r18.source === e.source && r18.global === e.global && r18.ignoreCase === e.ignoreCase && r18.multiline === e.multiline && r18.sticky === e.sticky && r18.unicode === e.unicode)) return false;
      break;
  }
  for (var a = t.length - 1; a >= 0; ) {
    if (t[a] === r18) return n[a] === e;
    a -= 1;
  }
  switch (s) {
    case "Map":
      return r18.size !== e.size ? false : nr(r18.entries(), e.entries(), t.concat([r18]), n.concat([e]));
    case "Set":
      return r18.size !== e.size ? false : nr(r18.values(), e.values(), t.concat([r18]), n.concat([e]));
    case "Arguments":
    case "Array":
    case "Object":
    case "Boolean":
    case "Number":
    case "String":
    case "Date":
    case "Error":
    case "RegExp":
    case "Int8Array":
    case "Uint8Array":
    case "Uint8ClampedArray":
    case "Int16Array":
    case "Uint16Array":
    case "Int32Array":
    case "Uint32Array":
    case "Float32Array":
    case "Float64Array":
    case "ArrayBuffer":
      break;
    default:
      return false;
  }
  var i = F(r18);
  if (i.length !== F(e).length) return false;
  var o = t.concat([r18]), u = n.concat([e]);
  for (a = i.length - 1; a >= 0; ) {
    var l = i[a];
    if (!(ee(l, e) && Me(e[l], r18[l], o, u))) return false;
    a -= 1;
  }
  return true;
}
var cn = x(function(e, t) {
  return Me(e, t, [], []);
});
var at = cn;
function Tt(r18, e, t) {
  var n, s;
  if (typeof r18.indexOf == "function") switch (typeof e) {
    case "number":
      if (e === 0) {
        for (n = 1 / e; t < r18.length; ) {
          if (s = r18[t], s === 0 && 1 / s === n) return t;
          t += 1;
        }
        return -1;
      } else if (e !== e) {
        for (; t < r18.length; ) {
          if (s = r18[t], typeof s == "number" && s !== s) return t;
          t += 1;
        }
        return -1;
      }
      return r18.indexOf(e, t);
    case "string":
    case "boolean":
    case "function":
    case "undefined":
      return r18.indexOf(e, t);
    case "object":
      if (e === null) return r18.indexOf(e, t);
  }
  for (; t < r18.length; ) {
    if (at(r18[t], e)) return t;
    t += 1;
  }
  return -1;
}
function Ot(r18, e) {
  return Tt(e, r18, 0) >= 0;
}
function G(r18, e) {
  for (var t = 0, n = e.length, s = Array(n); t < n; ) s[t] = r18(e[t]), t += 1;
  return s;
}
function De(r18) {
  var e = r18.replace(/\\/g, "\\\\").replace(/[\b]/g, "\\b").replace(/\f/g, "\\f").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t").replace(/\v/g, "\\v").replace(/\0/g, "\\0");
  return '"' + e.replace(/"/g, '\\"') + '"';
}
var Be = function(e) {
  return (e < 10 ? "0" : "") + e;
};
var fn = typeof Date.prototype.toISOString == "function" ? function(e) {
  return e.toISOString();
} : function(e) {
  return e.getUTCFullYear() + "-" + Be(e.getUTCMonth() + 1) + "-" + Be(e.getUTCDate()) + "T" + Be(e.getUTCHours()) + ":" + Be(e.getUTCMinutes()) + ":" + Be(e.getUTCSeconds()) + "." + (e.getUTCMilliseconds() / 1e3).toFixed(3).slice(2, 5) + "Z";
};
var sr = fn;
function Et(r18) {
  return function() {
    return !r18.apply(this, arguments);
  };
}
function Fe(r18, e, t) {
  for (var n = 0, s = t.length; n < s; ) e = r18(e, t[n]), n += 1;
  return e;
}
function At(r18, e) {
  for (var t = 0, n = e.length, s = []; t < n; ) r18(e[t]) && (s[s.length] = e[t]), t += 1;
  return s;
}
function Ct(r18) {
  return Object.prototype.toString.call(r18) === "[object Object]";
}
var dn = function() {
  function r18(e, t) {
    this.xf = t, this.f = e;
  }
  return r18.prototype["@@transducer/init"] = K.init, r18.prototype["@@transducer/result"] = K.result, r18.prototype["@@transducer/step"] = function(e, t) {
    return this.f(t) ? this.xf["@@transducer/step"](e, t) : e;
  }, r18;
}();
function Rt(r18) {
  return function(e) {
    return new dn(r18, e);
  };
}
var hn = x(le(["fantasy-land/filter", "filter"], Rt, function(r18, e) {
  return Ct(e) ? Fe(function(t, n) {
    return r18(e[n]) && (t[n] = e[n]), t;
  }, {}, F(e)) : At(r18, e);
}));
var ar = hn;
var pn = x(function(e, t) {
  return ar(Et(e), t);
});
var ir = pn;
function it(r18, e) {
  var t = function(i) {
    var o = e.concat([r18]);
    return Ot(i, o) ? "<Circular>" : it(i, o);
  }, n = function(a, i) {
    return G(function(o) {
      return De(o) + ": " + t(a[o]);
    }, i.slice().sort());
  };
  switch (Object.prototype.toString.call(r18)) {
    case "[object Arguments]":
      return "(function() { return arguments; }(" + G(t, r18).join(", ") + "))";
    case "[object Array]":
      return "[" + G(t, r18).concat(n(r18, ir(function(a) {
        return /^\d+$/.test(a);
      }, F(r18)))).join(", ") + "]";
    case "[object Boolean]":
      return typeof r18 == "object" ? "new Boolean(" + t(r18.valueOf()) + ")" : r18.toString();
    case "[object Date]":
      return "new Date(" + (isNaN(r18.valueOf()) ? t(NaN) : De(sr(r18))) + ")";
    case "[object Map]":
      return "new Map(" + t(Array.from(r18)) + ")";
    case "[object Null]":
      return "null";
    case "[object Number]":
      return typeof r18 == "object" ? "new Number(" + t(r18.valueOf()) + ")" : 1 / r18 === -1 / 0 ? "-0" : r18.toString(10);
    case "[object Set]":
      return "new Set(" + t(Array.from(r18).sort()) + ")";
    case "[object String]":
      return typeof r18 == "object" ? "new String(" + t(r18.valueOf()) + ")" : De(r18);
    case "[object Undefined]":
      return "undefined";
    default:
      if (typeof r18.toString == "function") {
        var s = r18.toString();
        if (s !== "[object Object]") return s;
      }
      return "{" + n(r18, F(r18)).join(", ") + "}";
  }
}
var mn = E(function(e) {
  return it(e, []);
});
var jt = mn;
var yn = x(function(e, t) {
  if (e === t) return t;
  function n(u, l) {
    if (u > l != l > u) return l > u ? l : u;
  }
  var s = n(e, t);
  if (s !== void 0) return s;
  var a = n(typeof e, typeof t);
  if (a !== void 0) return a === typeof e ? e : t;
  var i = jt(e), o = n(i, jt(t));
  return o !== void 0 && o === i ? e : t;
});
var or = yn;
var gn = function() {
  function r18(e, t) {
    this.xf = t, this.f = e;
  }
  return r18.prototype["@@transducer/init"] = K.init, r18.prototype["@@transducer/result"] = K.result, r18.prototype["@@transducer/step"] = function(e, t) {
    return this.xf["@@transducer/step"](e, this.f(t));
  }, r18;
}();
var _n = function(e) {
  return function(t) {
    return new gn(e, t);
  };
};
var ur = _n;
var vn = x(le(["fantasy-land/map", "map"], ur, function(e, t) {
  switch (Object.prototype.toString.call(t)) {
    case "[object Function]":
      return tt(t.length, function() {
        return e.call(this, t.apply(this, arguments));
      });
    case "[object Object]":
      return Fe(function(n, s) {
        return n[s] = e(t[s]), n;
      }, {}, F(t));
    default:
      return G(e, t);
  }
}));
var lr = vn;
var ot = Number.isInteger || function(e) {
  return e << 0 === e;
};
function Ue(r18) {
  return Object.prototype.toString.call(r18) === "[object String]";
}
function $e(r18, e) {
  var t = r18 < 0 ? e.length + r18 : r18;
  return Ue(e) ? e.charAt(t) : e[t];
}
var xn = x(function(e, t) {
  if (t != null) return ot(e) ? $e(e, t) : t[e];
});
var te = xn;
var wn = x(function(e, t) {
  return lr(te(e), t);
});
var cr = wn;
var bn = E(function(e) {
  return Oe(e) ? true : !e || typeof e != "object" || Ue(e) ? false : e.length === 0 ? true : e.length > 0 ? e.hasOwnProperty(0) && e.hasOwnProperty(e.length - 1) : false;
});
var fr = bn;
var dr = typeof Symbol < "u" ? Symbol.iterator : "@@iterator";
function It(r18, e, t) {
  return function(s, a, i) {
    if (fr(i)) return r18(s, a, i);
    if (i == null) return a;
    if (typeof i["fantasy-land/reduce"] == "function") return e(s, a, i, "fantasy-land/reduce");
    if (i[dr] != null) return t(s, a, i[dr]());
    if (typeof i.next == "function") return t(s, a, i);
    if (typeof i.reduce == "function") return e(s, a, i, "reduce");
    throw new TypeError("reduce: list must be array or iterable");
  };
}
function Nt(r18, e, t) {
  for (var n = 0, s = t.length; n < s; ) {
    if (e = r18["@@transducer/step"](e, t[n]), e && e["@@transducer/reduced"]) {
      e = e["@@transducer/value"];
      break;
    }
    n += 1;
  }
  return r18["@@transducer/result"](e);
}
var Sn = x(function(e, t) {
  return q(e.length, function() {
    return e.apply(t, arguments);
  });
});
var hr = Sn;
function kn(r18, e, t) {
  for (var n = t.next(); !n.done; ) {
    if (e = r18["@@transducer/step"](e, n.value), e && e["@@transducer/reduced"]) {
      e = e["@@transducer/value"];
      break;
    }
    n = t.next();
  }
  return r18["@@transducer/result"](e);
}
function Tn(r18, e, t, n) {
  return r18["@@transducer/result"](t[n](hr(r18["@@transducer/step"], r18), e));
}
var On = It(Nt, Tn, kn);
var pr = On;
var En = function() {
  function r18(e) {
    this.f = e;
  }
  return r18.prototype["@@transducer/init"] = function() {
    throw new Error("init not implemented on XWrap");
  }, r18.prototype["@@transducer/result"] = function(e) {
    return e;
  }, r18.prototype["@@transducer/step"] = function(e, t) {
    return this.f(e, t);
  }, r18;
}();
function Lt(r18) {
  return new En(r18);
}
var An = ue(function(r18, e, t) {
  return pr(typeof r18 == "function" ? Lt(r18) : r18, e, t);
});
var ut = An;
function Pt(r18, e) {
  return function() {
    return e.call(this, r18.apply(this, arguments));
  };
}
function Ve(r18, e) {
  return function() {
    var t = arguments.length;
    if (t === 0) return e();
    var n = arguments[t - 1];
    return Oe(n) || typeof n[r18] != "function" ? e.apply(this, arguments) : n[r18].apply(n, Array.prototype.slice.call(arguments, 0, t - 1));
  };
}
var Cn = ue(Ve("slice", function(e, t, n) {
  return Array.prototype.slice.call(n, e, t);
}));
var mr = Cn;
var Rn = E(Ve("tail", mr(1, 1 / 0)));
var yr = Rn;
function qe() {
  if (arguments.length === 0) throw new Error("pipe requires at least one argument");
  return q(arguments[0].length, ut(Pt, arguments[0], yr(arguments)));
}
var jn = x(function(e, t) {
  return tt(ut(or, 0, cr("length", t)), function() {
    var n = arguments, s = this;
    return e.apply(s, G(function(a) {
      return a.apply(s, n);
    }, t));
  });
});
var gr = jn;
var In = x(function(e, t) {
  return t == null || t !== t ? e : t;
});
var Ge = In;
var Nn = function() {
  function r18(e, t) {
    this.xf = t, this.f = e, this.found = false;
  }
  return r18.prototype["@@transducer/init"] = K.init, r18.prototype["@@transducer/result"] = function(e) {
    return this.found || (e = this.xf["@@transducer/step"](e, void 0)), this.xf["@@transducer/result"](e);
  }, r18.prototype["@@transducer/step"] = function(e, t) {
    return this.f(t) && (this.found = true, e = bt(this.xf["@@transducer/step"](e, t))), e;
  }, r18;
}();
function Zt(r18) {
  return function(e) {
    return new Nn(r18, e);
  };
}
var Ln = x(le(["find"], Zt, function(e, t) {
  for (var n = 0, s = t.length; n < s; ) {
    if (e(t[n])) return t[n];
    n += 1;
  }
}));
var Wt = Ln;
var Pn = E(function(e) {
  return gr(function() {
    return Array.prototype.slice.call(arguments, 0);
  }, e);
});
var zt = Pn;
function Mt(r18, e) {
  for (var t = e, n = 0; n < r18.length; n += 1) {
    if (t == null) return;
    var s = r18[n];
    ot(s) ? t = $e(s, t) : t = t[s];
  }
  return t;
}
var Zn = x(Mt);
var lt = Zn;
var Wn = ue(function(e, t, n) {
  return at(e, te(t, n));
});
var Dt = Wn;
var H = class extends Error {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "InvalidSchedulerLocation");
  }
};
var ct = class extends Error {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "SchedulerTagNotFound");
  }
};
var ft = class extends Error {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "TransactionNotFound");
  }
};
function He(r18 = "") {
  return r18 = r18.trim(), r18.endsWith("/") ? He(r18.slice(0, -1)) : r18;
}
var _r = (r18, { maxRetries: e = 0, delay: t = 300 }) => {
  let n = (s, a) => Promise.resolve().then(r18).catch((i) => {
    if (s >= e) return Promise.reject(i);
    let o = s + 1, u = a + a;
    return new Promise((l) => setTimeout(l, a)).then(() => n(o, u));
  });
  return n(0, t);
};
var vr = (r18) => {
  if (r18.ok) return r18;
  throw r18;
};
var zn = "Url";
var Mn = "Time-To-Live";
var Dn = "Scheduler";
var Bt = (r18) => qe(Ge([]), Wt(Dt(r18, "name")), Ge({}), te("value"));
var xr = (r18) => qe((e) => {
  if (!e) throw new ft(r18);
  return e;
}, te("tags"), Ge([]));
function wr({ fetch: r18, GRAPHQL_URL: e, GRAPHQL_MAX_RETRIES: t = 0, GRAPHQL_RETRY_BACKOFF: n = 300 }) {
  return async ({ query: s, variables: a }) => _r(() => r18(e, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ query: s, variables: a }) }).then(vr).then((i) => i.json()), { maxRetries: t, delay: n });
}
function br({ fetch: r18, GRAPHQL_URL: e, GRAPHQL_MAX_RETRIES: t, GRAPHQL_RETRY_BACKOFF: n }) {
  let s = wr({ fetch: r18, GRAPHQL_URL: e, GRAPHQL_MAX_RETRIES: t, GRAPHQL_RETRY_BACKOFF: n }), a = Ft({ fetch: r18, GRAPHQL_URL: e, GRAPHQL_MAX_RETRIES: t, GRAPHQL_RETRY_BACKOFF: n }), i = `
    query GetTransactions ($transactionIds: [ID!]!) {
      transactions(ids: $transactionIds) {
        edges {
          node {
            tags {
              name
              value
            }
          }
        }
      }
    }
  `;
  return async (o) => s({ query: i, variables: { transactionIds: [o] } }).then(lt(["data", "transactions", "edges", "0", "node"])).then(xr(`Process ${o} was not found on gateway`)).then(Bt(Dn)).then((u) => {
    if (!u) throw new ct('No "Scheduler" tag found on process');
    return a(u);
  });
}
function Ft({ fetch: r18, GRAPHQL_URL: e, GRAPHQL_MAX_RETRIES: t, GRAPHQL_RETRY_BACKOFF: n }) {
  let s = wr({ fetch: r18, GRAPHQL_URL: e, GRAPHQL_MAX_RETRIES: t, GRAPHQL_RETRY_BACKOFF: n }), a = `
    query GetSchedulerLocation ($owner: String!) {
      transactions (
        owners: [$owner]
        tags: [
          { name: "Data-Protocol", values: ["ao"] },
          { name: "Type", values: ["Scheduler-Location"] }
        ]
        # Only need the most recent Scheduler-Location
        sort: HEIGHT_DESC
        first: 1
      ) {
        edges {
          node {
            tags {
              name
              value
            }
          }
        }
      }
    }
  `;
  return async (i) => s({ query: a, variables: { owner: i } }).then(lt(["data", "transactions", "edges", "0", "node"])).then(xr(`Could not find 'Scheduler-Location' owner by wallet ${i}`)).then(zt([Bt(zn), Bt(Mn)])).then(([o, u]) => {
    if (!o) throw new H('No "Url" tag found on Scheduler-Location');
    if (!u) throw new H('No "Time-To-Live" tag found on Scheduler-Location');
    return { url: o, ttl: u, address: i };
  });
}
var Ee = typeof performance == "object" && performance && typeof performance.now == "function" ? performance : Date;
var kr = /* @__PURE__ */ new Set();
var Ut = typeof process == "object" && process ? process : {};
var Tr = (r18, e, t, n) => {
  typeof Ut.emitWarning == "function" ? Ut.emitWarning(r18, e, t, n) : console.error(`[${t}] ${e}: ${r18}`);
};
var dt = globalThis.AbortController;
var Sr = globalThis.AbortSignal;
var _a;
if (typeof dt > "u") {
  Sr = class {
    constructor() {
      __publicField(this, "onabort");
      __publicField(this, "_onabort", []);
      __publicField(this, "reason");
      __publicField(this, "aborted", false);
    }
    addEventListener(n, s) {
      this._onabort.push(s);
    }
  }, dt = class {
    constructor() {
      __publicField(this, "signal", new Sr());
      e();
    }
    abort(n) {
      var _a7, _b2;
      if (!this.signal.aborted) {
        this.signal.reason = n, this.signal.aborted = true;
        for (let s of this.signal._onabort) s(n);
        (_b2 = (_a7 = this.signal).onabort) == null ? void 0 : _b2.call(_a7, n);
      }
    }
  };
  let r18 = ((_a = Ut.env) == null ? void 0 : _a.LRU_CACHE_IGNORE_AC_WARNING) !== "1", e = () => {
    r18 && (r18 = false, Tr("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", "NO_ABORT_CONTROLLER", "ENOTSUP", e));
  };
}
var Fn = (r18) => !kr.has(r18);
var Iu = Symbol("type");
var re = (r18) => r18 && r18 === Math.floor(r18) && r18 > 0 && isFinite(r18);
var Or = (r18) => re(r18) ? r18 <= Math.pow(2, 8) ? Uint8Array : r18 <= Math.pow(2, 16) ? Uint16Array : r18 <= Math.pow(2, 32) ? Uint32Array : r18 <= Number.MAX_SAFE_INTEGER ? Ae : null : null;
var Ae = class extends Array {
  constructor(e) {
    super(e), this.fill(0);
  }
};
var _a2, _u;
var $t = (_a2 = class {
  constructor(e, t) {
    __publicField(this, "heap");
    __publicField(this, "length");
    if (!__privateGet(_a2, _u)) throw new TypeError("instantiate Stack using Stack.create(n)");
    this.heap = new t(e), this.length = 0;
  }
  static create(e) {
    let t = Or(e);
    if (!t) return [];
    __privateSet(_a2, _u, true);
    let n = new _a2(e, t);
    return __privateSet(_a2, _u, false), n;
  }
  push(e) {
    this.heap[this.length++] = e;
  }
  pop() {
    return this.heap[--this.length];
  }
}, _u = new WeakMap(), __privateAdd(_a2, _u, false), _a2);
var _a3, _b, _u2, _f, _m, _y, _C, _s, _g, _n2, _r2, _e, _l, _d, _o, _a4, __, _i, _v, _x, _h, _w, _T, _c2, _r2_instances, N_fn, _O, _k, _L, _p, z_fn, _E, _R, _P, b_fn, S_fn, Z_fn, j_fn, I_fn, t_fn, W_fn, A_fn, _c;
var ht = (_c = class {
  constructor(e) {
    __privateAdd(this, _r2_instances);
    __privateAdd(this, _u2);
    __privateAdd(this, _f);
    __privateAdd(this, _m);
    __privateAdd(this, _y);
    __privateAdd(this, _C);
    __publicField(this, "ttl");
    __publicField(this, "ttlResolution");
    __publicField(this, "ttlAutopurge");
    __publicField(this, "updateAgeOnGet");
    __publicField(this, "updateAgeOnHas");
    __publicField(this, "allowStale");
    __publicField(this, "noDisposeOnSet");
    __publicField(this, "noUpdateTTL");
    __publicField(this, "maxEntrySize");
    __publicField(this, "sizeCalculation");
    __publicField(this, "noDeleteOnFetchRejection");
    __publicField(this, "noDeleteOnStaleGet");
    __publicField(this, "allowStaleOnFetchAbort");
    __publicField(this, "allowStaleOnFetchRejection");
    __publicField(this, "ignoreFetchAbort");
    __privateAdd(this, _s);
    __privateAdd(this, _g);
    __privateAdd(this, _n2);
    __privateAdd(this, _r2);
    __privateAdd(this, _e);
    __privateAdd(this, _l);
    __privateAdd(this, _d);
    __privateAdd(this, _o);
    __privateAdd(this, _a4);
    __privateAdd(this, __);
    __privateAdd(this, _i);
    __privateAdd(this, _v);
    __privateAdd(this, _x);
    __privateAdd(this, _h);
    __privateAdd(this, _w);
    __privateAdd(this, _T);
    __privateAdd(this, _c2);
    __privateAdd(this, _O, () => {
    });
    __privateAdd(this, _k, () => {
    });
    __privateAdd(this, _L, () => {
    });
    __privateAdd(this, _p, () => false);
    __privateAdd(this, _E, (e) => {
    });
    __privateAdd(this, _R, (e, t, n) => {
    });
    __privateAdd(this, _P, (e, t, n, s) => {
      if (n || s) throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
      return 0;
    });
    __publicField(this, _a3, "LRUCache");
    let { max: t = 0, ttl: n, ttlResolution: s = 1, ttlAutopurge: a, updateAgeOnGet: i, updateAgeOnHas: o, allowStale: u, dispose: l, disposeAfter: h, noDisposeOnSet: v22, noUpdateTTL: T32, maxSize: S = 0, maxEntrySize: B22 = 0, sizeCalculation: A, fetchMethod: L, noDeleteOnFetchRejection: O, noDeleteOnStaleGet: I22, allowStaleOnFetchRejection: V, allowStaleOnFetchAbort: C22, ignoreFetchAbort: W } = e;
    if (t !== 0 && !re(t)) throw new TypeError("max option must be a nonnegative integer");
    let oe = t ? Or(t) : Array;
    if (!oe) throw new Error("invalid max value: " + t);
    if (__privateSet(this, _u2, t), __privateSet(this, _f, S), this.maxEntrySize = B22 || __privateGet(this, _f), this.sizeCalculation = A, this.sizeCalculation) {
      if (!__privateGet(this, _f) && !this.maxEntrySize) throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
      if (typeof this.sizeCalculation != "function") throw new TypeError("sizeCalculation set to non-function");
    }
    if (L !== void 0 && typeof L != "function") throw new TypeError("fetchMethod must be a function if specified");
    if (__privateSet(this, _C, L), __privateSet(this, _T, !!L), __privateSet(this, _n2, /* @__PURE__ */ new Map()), __privateSet(this, _r2, new Array(t).fill(void 0)), __privateSet(this, _e, new Array(t).fill(void 0)), __privateSet(this, _l, new oe(t)), __privateSet(this, _d, new oe(t)), __privateSet(this, _o, 0), __privateSet(this, _a4, 0), __privateSet(this, __, $t.create(t)), __privateSet(this, _s, 0), __privateSet(this, _g, 0), typeof l == "function" && __privateSet(this, _m, l), typeof h == "function" ? (__privateSet(this, _y, h), __privateSet(this, _i, [])) : (__privateSet(this, _y, void 0), __privateSet(this, _i, void 0)), __privateSet(this, _w, !!__privateGet(this, _m)), __privateSet(this, _c2, !!__privateGet(this, _y)), this.noDisposeOnSet = !!v22, this.noUpdateTTL = !!T32, this.noDeleteOnFetchRejection = !!O, this.allowStaleOnFetchRejection = !!V, this.allowStaleOnFetchAbort = !!C22, this.ignoreFetchAbort = !!W, this.maxEntrySize !== 0) {
      if (__privateGet(this, _f) !== 0 && !re(__privateGet(this, _f))) throw new TypeError("maxSize must be a positive integer if specified");
      if (!re(this.maxEntrySize)) throw new TypeError("maxEntrySize must be a positive integer if specified");
      __privateMethod(this, _r2_instances, z_fn).call(this);
    }
    if (this.allowStale = !!u, this.noDeleteOnStaleGet = !!I22, this.updateAgeOnGet = !!i, this.updateAgeOnHas = !!o, this.ttlResolution = re(s) || s === 0 ? s : 1, this.ttlAutopurge = !!a, this.ttl = n || 0, this.ttl) {
      if (!re(this.ttl)) throw new TypeError("ttl must be a positive integer if specified");
      __privateMethod(this, _r2_instances, N_fn).call(this);
    }
    if (__privateGet(this, _u2) === 0 && this.ttl === 0 && __privateGet(this, _f) === 0) throw new TypeError("At least one of max, maxSize, or ttl is required");
    if (!this.ttlAutopurge && !__privateGet(this, _u2) && !__privateGet(this, _f)) {
      let Q22 = "LRU_CACHE_UNBOUNDED";
      Fn(Q22) && (kr.add(Q22), Tr("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.", "UnboundedCacheWarning", Q22, _c));
    }
  }
  static unsafeExposeInternals(e) {
    return { starts: __privateGet(e, _x), ttls: __privateGet(e, _h), sizes: __privateGet(e, _v), keyMap: __privateGet(e, _n2), keyList: __privateGet(e, _r2), valList: __privateGet(e, _e), next: __privateGet(e, _l), prev: __privateGet(e, _d), get head() {
      return __privateGet(e, _o);
    }, get tail() {
      return __privateGet(e, _a4);
    }, free: __privateGet(e, __), isBackgroundFetch: (t) => {
      var _a7;
      return __privateMethod(_a7 = e, _r2_instances, t_fn).call(_a7, t);
    }, backgroundFetch: (t, n, s, a) => {
      var _a7;
      return __privateMethod(_a7 = e, _r2_instances, I_fn).call(_a7, t, n, s, a);
    }, moveToTail: (t) => {
      var _a7;
      return __privateMethod(_a7 = e, _r2_instances, A_fn).call(_a7, t);
    }, indexes: (t) => {
      var _a7;
      return __privateMethod(_a7 = e, _r2_instances, b_fn).call(_a7, t);
    }, rindexes: (t) => {
      var _a7;
      return __privateMethod(_a7 = e, _r2_instances, S_fn).call(_a7, t);
    }, isStale: (t) => {
      var _a7;
      return __privateGet(_a7 = e, _p).call(_a7, t);
    } };
  }
  get max() {
    return __privateGet(this, _u2);
  }
  get maxSize() {
    return __privateGet(this, _f);
  }
  get calculatedSize() {
    return __privateGet(this, _g);
  }
  get size() {
    return __privateGet(this, _s);
  }
  get fetchMethod() {
    return __privateGet(this, _C);
  }
  get dispose() {
    return __privateGet(this, _m);
  }
  get disposeAfter() {
    return __privateGet(this, _y);
  }
  getRemainingTTL(e) {
    return __privateGet(this, _n2).has(e) ? 1 / 0 : 0;
  }
  *entries() {
    for (let e of __privateMethod(this, _r2_instances, b_fn).call(this)) __privateGet(this, _e)[e] !== void 0 && __privateGet(this, _r2)[e] !== void 0 && !__privateMethod(this, _r2_instances, t_fn).call(this, __privateGet(this, _e)[e]) && (yield [__privateGet(this, _r2)[e], __privateGet(this, _e)[e]]);
  }
  *rentries() {
    for (let e of __privateMethod(this, _r2_instances, S_fn).call(this)) __privateGet(this, _e)[e] !== void 0 && __privateGet(this, _r2)[e] !== void 0 && !__privateMethod(this, _r2_instances, t_fn).call(this, __privateGet(this, _e)[e]) && (yield [__privateGet(this, _r2)[e], __privateGet(this, _e)[e]]);
  }
  *keys() {
    for (let e of __privateMethod(this, _r2_instances, b_fn).call(this)) {
      let t = __privateGet(this, _r2)[e];
      t !== void 0 && !__privateMethod(this, _r2_instances, t_fn).call(this, __privateGet(this, _e)[e]) && (yield t);
    }
  }
  *rkeys() {
    for (let e of __privateMethod(this, _r2_instances, S_fn).call(this)) {
      let t = __privateGet(this, _r2)[e];
      t !== void 0 && !__privateMethod(this, _r2_instances, t_fn).call(this, __privateGet(this, _e)[e]) && (yield t);
    }
  }
  *values() {
    for (let e of __privateMethod(this, _r2_instances, b_fn).call(this)) __privateGet(this, _e)[e] !== void 0 && !__privateMethod(this, _r2_instances, t_fn).call(this, __privateGet(this, _e)[e]) && (yield __privateGet(this, _e)[e]);
  }
  *rvalues() {
    for (let e of __privateMethod(this, _r2_instances, S_fn).call(this)) __privateGet(this, _e)[e] !== void 0 && !__privateMethod(this, _r2_instances, t_fn).call(this, __privateGet(this, _e)[e]) && (yield __privateGet(this, _e)[e]);
  }
  [(_b = Symbol.iterator, _a3 = Symbol.toStringTag, _b)]() {
    return this.entries();
  }
  find(e, t = {}) {
    for (let n of __privateMethod(this, _r2_instances, b_fn).call(this)) {
      let s = __privateGet(this, _e)[n], a = __privateMethod(this, _r2_instances, t_fn).call(this, s) ? s.__staleWhileFetching : s;
      if (a !== void 0 && e(a, __privateGet(this, _r2)[n], this)) return this.get(__privateGet(this, _r2)[n], t);
    }
  }
  forEach(e, t = this) {
    for (let n of __privateMethod(this, _r2_instances, b_fn).call(this)) {
      let s = __privateGet(this, _e)[n], a = __privateMethod(this, _r2_instances, t_fn).call(this, s) ? s.__staleWhileFetching : s;
      a !== void 0 && e.call(t, a, __privateGet(this, _r2)[n], this);
    }
  }
  rforEach(e, t = this) {
    for (let n of __privateMethod(this, _r2_instances, S_fn).call(this)) {
      let s = __privateGet(this, _e)[n], a = __privateMethod(this, _r2_instances, t_fn).call(this, s) ? s.__staleWhileFetching : s;
      a !== void 0 && e.call(t, a, __privateGet(this, _r2)[n], this);
    }
  }
  purgeStale() {
    let e = false;
    for (let t of __privateMethod(this, _r2_instances, S_fn).call(this, { allowStale: true })) __privateGet(this, _p).call(this, t) && (this.delete(__privateGet(this, _r2)[t]), e = true);
    return e;
  }
  info(e) {
    let t = __privateGet(this, _n2).get(e);
    if (t === void 0) return;
    let n = __privateGet(this, _e)[t], s = __privateMethod(this, _r2_instances, t_fn).call(this, n) ? n.__staleWhileFetching : n;
    if (s === void 0) return;
    let a = { value: s };
    if (__privateGet(this, _h) && __privateGet(this, _x)) {
      let i = __privateGet(this, _h)[t], o = __privateGet(this, _x)[t];
      if (i && o) {
        let u = i - (Ee.now() - o);
        a.ttl = u, a.start = Date.now();
      }
    }
    return __privateGet(this, _v) && (a.size = __privateGet(this, _v)[t]), a;
  }
  dump() {
    let e = [];
    for (let t of __privateMethod(this, _r2_instances, b_fn).call(this, { allowStale: true })) {
      let n = __privateGet(this, _r2)[t], s = __privateGet(this, _e)[t], a = __privateMethod(this, _r2_instances, t_fn).call(this, s) ? s.__staleWhileFetching : s;
      if (a === void 0 || n === void 0) continue;
      let i = { value: a };
      if (__privateGet(this, _h) && __privateGet(this, _x)) {
        i.ttl = __privateGet(this, _h)[t];
        let o = Ee.now() - __privateGet(this, _x)[t];
        i.start = Math.floor(Date.now() - o);
      }
      __privateGet(this, _v) && (i.size = __privateGet(this, _v)[t]), e.unshift([n, i]);
    }
    return e;
  }
  load(e) {
    this.clear();
    for (let [t, n] of e) {
      if (n.start) {
        let s = Date.now() - n.start;
        n.start = Ee.now() - s;
      }
      this.set(t, n.value, n);
    }
  }
  set(e, t, n = {}) {
    var _a7, _b2, _c3, _d2, _e3;
    if (t === void 0) return this.delete(e), this;
    let { ttl: s = this.ttl, start: a, noDisposeOnSet: i = this.noDisposeOnSet, sizeCalculation: o = this.sizeCalculation, status: u } = n, { noUpdateTTL: l = this.noUpdateTTL } = n, h = __privateGet(this, _P).call(this, e, t, n.size || 0, o);
    if (this.maxEntrySize && h > this.maxEntrySize) return u && (u.set = "miss", u.maxEntrySizeExceeded = true), this.delete(e), this;
    let v22 = __privateGet(this, _s) === 0 ? void 0 : __privateGet(this, _n2).get(e);
    if (v22 === void 0) v22 = __privateGet(this, _s) === 0 ? __privateGet(this, _a4) : __privateGet(this, __).length !== 0 ? __privateGet(this, __).pop() : __privateGet(this, _s) === __privateGet(this, _u2) ? __privateMethod(this, _r2_instances, j_fn).call(this, false) : __privateGet(this, _s), __privateGet(this, _r2)[v22] = e, __privateGet(this, _e)[v22] = t, __privateGet(this, _n2).set(e, v22), __privateGet(this, _l)[__privateGet(this, _a4)] = v22, __privateGet(this, _d)[v22] = __privateGet(this, _a4), __privateSet(this, _a4, v22), __privateWrapper(this, _s)._++, __privateGet(this, _R).call(this, v22, h, u), u && (u.set = "add"), l = false;
    else {
      __privateMethod(this, _r2_instances, A_fn).call(this, v22);
      let T32 = __privateGet(this, _e)[v22];
      if (t !== T32) {
        if (__privateGet(this, _T) && __privateMethod(this, _r2_instances, t_fn).call(this, T32)) {
          T32.__abortController.abort(new Error("replaced"));
          let { __staleWhileFetching: S } = T32;
          S !== void 0 && !i && (__privateGet(this, _w) && ((_a7 = __privateGet(this, _m)) == null ? void 0 : _a7.call(this, S, e, "set")), __privateGet(this, _c2) && ((_b2 = __privateGet(this, _i)) == null ? void 0 : _b2.push([S, e, "set"])));
        } else i || (__privateGet(this, _w) && ((_c3 = __privateGet(this, _m)) == null ? void 0 : _c3.call(this, T32, e, "set")), __privateGet(this, _c2) && ((_d2 = __privateGet(this, _i)) == null ? void 0 : _d2.push([T32, e, "set"])));
        if (__privateGet(this, _E).call(this, v22), __privateGet(this, _R).call(this, v22, h, u), __privateGet(this, _e)[v22] = t, u) {
          u.set = "replace";
          let S = T32 && __privateMethod(this, _r2_instances, t_fn).call(this, T32) ? T32.__staleWhileFetching : T32;
          S !== void 0 && (u.oldValue = S);
        }
      } else u && (u.set = "update");
    }
    if (s !== 0 && !__privateGet(this, _h) && __privateMethod(this, _r2_instances, N_fn).call(this), __privateGet(this, _h) && (l || __privateGet(this, _L).call(this, v22, s, a), u && __privateGet(this, _k).call(this, u, v22)), !i && __privateGet(this, _c2) && __privateGet(this, _i)) {
      let T32 = __privateGet(this, _i), S;
      for (; S = T32 == null ? void 0 : T32.shift(); ) (_e3 = __privateGet(this, _y)) == null ? void 0 : _e3.call(this, ...S);
    }
    return this;
  }
  pop() {
    var _a7;
    try {
      for (; __privateGet(this, _s); ) {
        let e = __privateGet(this, _e)[__privateGet(this, _o)];
        if (__privateMethod(this, _r2_instances, j_fn).call(this, true), __privateMethod(this, _r2_instances, t_fn).call(this, e)) {
          if (e.__staleWhileFetching) return e.__staleWhileFetching;
        } else if (e !== void 0) return e;
      }
    } finally {
      if (__privateGet(this, _c2) && __privateGet(this, _i)) {
        let e = __privateGet(this, _i), t;
        for (; t = e == null ? void 0 : e.shift(); ) (_a7 = __privateGet(this, _y)) == null ? void 0 : _a7.call(this, ...t);
      }
    }
  }
  has(e, t = {}) {
    let { updateAgeOnHas: n = this.updateAgeOnHas, status: s } = t, a = __privateGet(this, _n2).get(e);
    if (a !== void 0) {
      let i = __privateGet(this, _e)[a];
      if (__privateMethod(this, _r2_instances, t_fn).call(this, i) && i.__staleWhileFetching === void 0) return false;
      if (__privateGet(this, _p).call(this, a)) s && (s.has = "stale", __privateGet(this, _k).call(this, s, a));
      else return n && __privateGet(this, _O).call(this, a), s && (s.has = "hit", __privateGet(this, _k).call(this, s, a)), true;
    } else s && (s.has = "miss");
    return false;
  }
  peek(e, t = {}) {
    let { allowStale: n = this.allowStale } = t, s = __privateGet(this, _n2).get(e);
    if (s === void 0 || !n && __privateGet(this, _p).call(this, s)) return;
    let a = __privateGet(this, _e)[s];
    return __privateMethod(this, _r2_instances, t_fn).call(this, a) ? a.__staleWhileFetching : a;
  }
  async fetch(e, t = {}) {
    let { allowStale: n = this.allowStale, updateAgeOnGet: s = this.updateAgeOnGet, noDeleteOnStaleGet: a = this.noDeleteOnStaleGet, ttl: i = this.ttl, noDisposeOnSet: o = this.noDisposeOnSet, size: u = 0, sizeCalculation: l = this.sizeCalculation, noUpdateTTL: h = this.noUpdateTTL, noDeleteOnFetchRejection: v22 = this.noDeleteOnFetchRejection, allowStaleOnFetchRejection: T32 = this.allowStaleOnFetchRejection, ignoreFetchAbort: S = this.ignoreFetchAbort, allowStaleOnFetchAbort: B22 = this.allowStaleOnFetchAbort, context: A, forceRefresh: L = false, status: O, signal: I22 } = t;
    if (!__privateGet(this, _T)) return O && (O.fetch = "get"), this.get(e, { allowStale: n, updateAgeOnGet: s, noDeleteOnStaleGet: a, status: O });
    let V = { allowStale: n, updateAgeOnGet: s, noDeleteOnStaleGet: a, ttl: i, noDisposeOnSet: o, size: u, sizeCalculation: l, noUpdateTTL: h, noDeleteOnFetchRejection: v22, allowStaleOnFetchRejection: T32, allowStaleOnFetchAbort: B22, ignoreFetchAbort: S, status: O, signal: I22 }, C22 = __privateGet(this, _n2).get(e);
    if (C22 === void 0) {
      O && (O.fetch = "miss");
      let W = __privateMethod(this, _r2_instances, I_fn).call(this, e, C22, V, A);
      return W.__returned = W;
    } else {
      let W = __privateGet(this, _e)[C22];
      if (__privateMethod(this, _r2_instances, t_fn).call(this, W)) {
        let Jt = n && W.__staleWhileFetching !== void 0;
        return O && (O.fetch = "inflight", Jt && (O.returnedStale = true)), Jt ? W.__staleWhileFetching : W.__returned = W;
      }
      let oe = __privateGet(this, _p).call(this, C22);
      if (!L && !oe) return O && (O.fetch = "hit"), __privateMethod(this, _r2_instances, A_fn).call(this, C22), s && __privateGet(this, _O).call(this, C22), O && __privateGet(this, _k).call(this, O, C22), W;
      let Q22 = __privateMethod(this, _r2_instances, I_fn).call(this, e, C22, V, A), Yt22 = Q22.__staleWhileFetching !== void 0 && n;
      return O && (O.fetch = oe ? "stale" : "refresh", Yt22 && oe && (O.returnedStale = true)), Yt22 ? Q22.__staleWhileFetching : Q22.__returned = Q22;
    }
  }
  get(e, t = {}) {
    let { allowStale: n = this.allowStale, updateAgeOnGet: s = this.updateAgeOnGet, noDeleteOnStaleGet: a = this.noDeleteOnStaleGet, status: i } = t, o = __privateGet(this, _n2).get(e);
    if (o !== void 0) {
      let u = __privateGet(this, _e)[o], l = __privateMethod(this, _r2_instances, t_fn).call(this, u);
      return i && __privateGet(this, _k).call(this, i, o), __privateGet(this, _p).call(this, o) ? (i && (i.get = "stale"), l ? (i && n && u.__staleWhileFetching !== void 0 && (i.returnedStale = true), n ? u.__staleWhileFetching : void 0) : (a || this.delete(e), i && n && (i.returnedStale = true), n ? u : void 0)) : (i && (i.get = "hit"), l ? u.__staleWhileFetching : (__privateMethod(this, _r2_instances, A_fn).call(this, o), s && __privateGet(this, _O).call(this, o), u));
    } else i && (i.get = "miss");
  }
  delete(e) {
    var _a7, _b2, _c3, _d2;
    let t = false;
    if (__privateGet(this, _s) !== 0) {
      let n = __privateGet(this, _n2).get(e);
      if (n !== void 0) if (t = true, __privateGet(this, _s) === 1) this.clear();
      else {
        __privateGet(this, _E).call(this, n);
        let s = __privateGet(this, _e)[n];
        if (__privateMethod(this, _r2_instances, t_fn).call(this, s) ? s.__abortController.abort(new Error("deleted")) : (__privateGet(this, _w) || __privateGet(this, _c2)) && (__privateGet(this, _w) && ((_a7 = __privateGet(this, _m)) == null ? void 0 : _a7.call(this, s, e, "delete")), __privateGet(this, _c2) && ((_b2 = __privateGet(this, _i)) == null ? void 0 : _b2.push([s, e, "delete"]))), __privateGet(this, _n2).delete(e), __privateGet(this, _r2)[n] = void 0, __privateGet(this, _e)[n] = void 0, n === __privateGet(this, _a4)) __privateSet(this, _a4, __privateGet(this, _d)[n]);
        else if (n === __privateGet(this, _o)) __privateSet(this, _o, __privateGet(this, _l)[n]);
        else {
          let a = __privateGet(this, _d)[n];
          __privateGet(this, _l)[a] = __privateGet(this, _l)[n];
          let i = __privateGet(this, _l)[n];
          __privateGet(this, _d)[i] = __privateGet(this, _d)[n];
        }
        __privateWrapper(this, _s)._--, __privateGet(this, __).push(n);
      }
    }
    if (__privateGet(this, _c2) && ((_c3 = __privateGet(this, _i)) == null ? void 0 : _c3.length)) {
      let n = __privateGet(this, _i), s;
      for (; s = n == null ? void 0 : n.shift(); ) (_d2 = __privateGet(this, _y)) == null ? void 0 : _d2.call(this, ...s);
    }
    return t;
  }
  clear() {
    var _a7, _b2, _c3;
    for (let e of __privateMethod(this, _r2_instances, S_fn).call(this, { allowStale: true })) {
      let t = __privateGet(this, _e)[e];
      if (__privateMethod(this, _r2_instances, t_fn).call(this, t)) t.__abortController.abort(new Error("deleted"));
      else {
        let n = __privateGet(this, _r2)[e];
        __privateGet(this, _w) && ((_a7 = __privateGet(this, _m)) == null ? void 0 : _a7.call(this, t, n, "delete")), __privateGet(this, _c2) && ((_b2 = __privateGet(this, _i)) == null ? void 0 : _b2.push([t, n, "delete"]));
      }
    }
    if (__privateGet(this, _n2).clear(), __privateGet(this, _e).fill(void 0), __privateGet(this, _r2).fill(void 0), __privateGet(this, _h) && __privateGet(this, _x) && (__privateGet(this, _h).fill(0), __privateGet(this, _x).fill(0)), __privateGet(this, _v) && __privateGet(this, _v).fill(0), __privateSet(this, _o, 0), __privateSet(this, _a4, 0), __privateGet(this, __).length = 0, __privateSet(this, _g, 0), __privateSet(this, _s, 0), __privateGet(this, _c2) && __privateGet(this, _i)) {
      let e = __privateGet(this, _i), t;
      for (; t = e == null ? void 0 : e.shift(); ) (_c3 = __privateGet(this, _y)) == null ? void 0 : _c3.call(this, ...t);
    }
  }
}, _u2 = new WeakMap(), _f = new WeakMap(), _m = new WeakMap(), _y = new WeakMap(), _C = new WeakMap(), _s = new WeakMap(), _g = new WeakMap(), _n2 = new WeakMap(), _r2 = new WeakMap(), _e = new WeakMap(), _l = new WeakMap(), _d = new WeakMap(), _o = new WeakMap(), _a4 = new WeakMap(), __ = new WeakMap(), _i = new WeakMap(), _v = new WeakMap(), _x = new WeakMap(), _h = new WeakMap(), _w = new WeakMap(), _T = new WeakMap(), _c2 = new WeakMap(), _r2_instances = new WeakSet(), N_fn = function() {
  let e = new Ae(__privateGet(this, _u2)), t = new Ae(__privateGet(this, _u2));
  __privateSet(this, _h, e), __privateSet(this, _x, t), __privateSet(this, _L, (a, i, o = Ee.now()) => {
    if (t[a] = i !== 0 ? o : 0, e[a] = i, i !== 0 && this.ttlAutopurge) {
      let u = setTimeout(() => {
        __privateGet(this, _p).call(this, a) && this.delete(__privateGet(this, _r2)[a]);
      }, i + 1);
      u.unref && u.unref();
    }
  }), __privateSet(this, _O, (a) => {
    t[a] = e[a] !== 0 ? Ee.now() : 0;
  }), __privateSet(this, _k, (a, i) => {
    if (e[i]) {
      let o = e[i], u = t[i];
      if (!o || !u) return;
      a.ttl = o, a.start = u, a.now = n || s();
      let l = a.now - u;
      a.remainingTTL = o - l;
    }
  });
  let n = 0, s = () => {
    let a = Ee.now();
    if (this.ttlResolution > 0) {
      n = a;
      let i = setTimeout(() => n = 0, this.ttlResolution);
      i.unref && i.unref();
    }
    return a;
  };
  this.getRemainingTTL = (a) => {
    let i = __privateGet(this, _n2).get(a);
    if (i === void 0) return 0;
    let o = e[i], u = t[i];
    if (!o || !u) return 1 / 0;
    let l = (n || s()) - u;
    return o - l;
  }, __privateSet(this, _p, (a) => {
    let i = t[a], o = e[a];
    return !!o && !!i && (n || s()) - i > o;
  });
}, _O = new WeakMap(), _k = new WeakMap(), _L = new WeakMap(), _p = new WeakMap(), z_fn = function() {
  let e = new Ae(__privateGet(this, _u2));
  __privateSet(this, _g, 0), __privateSet(this, _v, e), __privateSet(this, _E, (t) => {
    __privateSet(this, _g, __privateGet(this, _g) - e[t]), e[t] = 0;
  }), __privateSet(this, _P, (t, n, s, a) => {
    if (__privateMethod(this, _r2_instances, t_fn).call(this, n)) return 0;
    if (!re(s)) if (a) {
      if (typeof a != "function") throw new TypeError("sizeCalculation must be a function");
      if (s = a(n, t), !re(s)) throw new TypeError("sizeCalculation return invalid (expect positive integer)");
    } else throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
    return s;
  }), __privateSet(this, _R, (t, n, s) => {
    if (e[t] = n, __privateGet(this, _f)) {
      let a = __privateGet(this, _f) - e[t];
      for (; __privateGet(this, _g) > a; ) __privateMethod(this, _r2_instances, j_fn).call(this, true);
    }
    __privateSet(this, _g, __privateGet(this, _g) + e[t]), s && (s.entrySize = n, s.totalCalculatedSize = __privateGet(this, _g));
  });
}, _E = new WeakMap(), _R = new WeakMap(), _P = new WeakMap(), b_fn = function* ({ allowStale: e = this.allowStale } = {}) {
  if (__privateGet(this, _s)) for (let t = __privateGet(this, _a4); !(!__privateMethod(this, _r2_instances, Z_fn).call(this, t) || ((e || !__privateGet(this, _p).call(this, t)) && (yield t), t === __privateGet(this, _o))); ) t = __privateGet(this, _d)[t];
}, S_fn = function* ({ allowStale: e = this.allowStale } = {}) {
  if (__privateGet(this, _s)) for (let t = __privateGet(this, _o); !(!__privateMethod(this, _r2_instances, Z_fn).call(this, t) || ((e || !__privateGet(this, _p).call(this, t)) && (yield t), t === __privateGet(this, _a4))); ) t = __privateGet(this, _l)[t];
}, Z_fn = function(e) {
  return e !== void 0 && __privateGet(this, _n2).get(__privateGet(this, _r2)[e]) === e;
}, j_fn = function(e) {
  var _a7, _b2;
  let t = __privateGet(this, _o), n = __privateGet(this, _r2)[t], s = __privateGet(this, _e)[t];
  return __privateGet(this, _T) && __privateMethod(this, _r2_instances, t_fn).call(this, s) ? s.__abortController.abort(new Error("evicted")) : (__privateGet(this, _w) || __privateGet(this, _c2)) && (__privateGet(this, _w) && ((_a7 = __privateGet(this, _m)) == null ? void 0 : _a7.call(this, s, n, "evict")), __privateGet(this, _c2) && ((_b2 = __privateGet(this, _i)) == null ? void 0 : _b2.push([s, n, "evict"]))), __privateGet(this, _E).call(this, t), e && (__privateGet(this, _r2)[t] = void 0, __privateGet(this, _e)[t] = void 0, __privateGet(this, __).push(t)), __privateGet(this, _s) === 1 ? (__privateSet(this, _o, __privateSet(this, _a4, 0)), __privateGet(this, __).length = 0) : __privateSet(this, _o, __privateGet(this, _l)[t]), __privateGet(this, _n2).delete(n), __privateWrapper(this, _s)._--, t;
}, I_fn = function(e, t, n, s) {
  let a = t === void 0 ? void 0 : __privateGet(this, _e)[t];
  if (__privateMethod(this, _r2_instances, t_fn).call(this, a)) return a;
  let i = new dt(), { signal: o } = n;
  o == null ? void 0 : o.addEventListener("abort", () => i.abort(o.reason), { signal: i.signal });
  let u = { signal: i.signal, options: n, context: s }, l = (A, L = false) => {
    let { aborted: O } = i.signal, I22 = n.ignoreFetchAbort && A !== void 0;
    if (n.status && (O && !L ? (n.status.fetchAborted = true, n.status.fetchError = i.signal.reason, I22 && (n.status.fetchAbortIgnored = true)) : n.status.fetchResolved = true), O && !I22 && !L) return v22(i.signal.reason);
    let V = S;
    return __privateGet(this, _e)[t] === S && (A === void 0 ? V.__staleWhileFetching ? __privateGet(this, _e)[t] = V.__staleWhileFetching : this.delete(e) : (n.status && (n.status.fetchUpdated = true), this.set(e, A, u.options))), A;
  }, h = (A) => (n.status && (n.status.fetchRejected = true, n.status.fetchError = A), v22(A)), v22 = (A) => {
    let { aborted: L } = i.signal, O = L && n.allowStaleOnFetchAbort, I22 = O || n.allowStaleOnFetchRejection, V = I22 || n.noDeleteOnFetchRejection, C22 = S;
    if (__privateGet(this, _e)[t] === S && (!V || C22.__staleWhileFetching === void 0 ? this.delete(e) : O || (__privateGet(this, _e)[t] = C22.__staleWhileFetching)), I22) return n.status && C22.__staleWhileFetching !== void 0 && (n.status.returnedStale = true), C22.__staleWhileFetching;
    if (C22.__returned === C22) throw A;
  }, T32 = (A, L) => {
    var _a7;
    let O = (_a7 = __privateGet(this, _C)) == null ? void 0 : _a7.call(this, e, a, u);
    O && O instanceof Promise && O.then((I22) => A(I22 === void 0 ? void 0 : I22), L), i.signal.addEventListener("abort", () => {
      (!n.ignoreFetchAbort || n.allowStaleOnFetchAbort) && (A(void 0), n.allowStaleOnFetchAbort && (A = (I22) => l(I22, true)));
    });
  };
  n.status && (n.status.fetchDispatched = true);
  let S = new Promise(T32).then(l, h), B22 = Object.assign(S, { __abortController: i, __staleWhileFetching: a, __returned: void 0 });
  return t === void 0 ? (this.set(e, B22, { ...u.options, status: void 0 }), t = __privateGet(this, _n2).get(e)) : __privateGet(this, _e)[t] = B22, B22;
}, t_fn = function(e) {
  if (!__privateGet(this, _T)) return false;
  let t = e;
  return !!t && t instanceof Promise && t.hasOwnProperty("__staleWhileFetching") && t.__abortController instanceof dt;
}, W_fn = function(e, t) {
  __privateGet(this, _d)[t] = e, __privateGet(this, _l)[e] = t;
}, A_fn = function(e) {
  e !== __privateGet(this, _a4) && (e === __privateGet(this, _o) ? __privateSet(this, _o, __privateGet(this, _l)[e]) : __privateMethod(this, _r2_instances, W_fn).call(this, __privateGet(this, _d)[e], __privateGet(this, _l)[e]), __privateMethod(this, _r2_instances, W_fn).call(this, __privateGet(this, _a4), e), __privateSet(this, _a4, e));
}, _c);
function Er({ size: r18 }) {
  return new ht({ max: r18, maxSize: 5e6, sizeCalculation: (t) => JSON.stringify(t).length, allowStale: true });
}
function Ar({ cache: r18 }) {
  return async (e) => {
    if (r18.max) return r18.get(e);
  };
}
function Cr({ cache: r18 }) {
  return async (e, { url: t, address: n }, s) => {
    if (r18.max) return r18.set(e, { url: t, address: n }, { ttl: s });
  };
}
function Rr({ cache: r18 }) {
  return async (e) => {
    if (r18.max) return r18.get(e);
  };
}
function jr({ cache: r18 }) {
  return async (e, t, n) => {
    if (r18.max) return r18.set(e, { url: t, address: e, ttl: n }, { ttl: n });
  };
}
function Ir({ fetch: r18 }) {
  return async (e, t) => {
    let n = await r18(`${e}?process-id=${t}`, { method: "GET", redirect: "manual" });
    return [301, 302, 307, 308].includes(n.status) ? new URL(n.headers.get("Location")).origin : e;
  };
}
var w;
(function(r18) {
  r18.assertEqual = (s) => s;
  function e(s) {
  }
  r18.assertIs = e;
  function t(s) {
    throw new Error();
  }
  r18.assertNever = t, r18.arrayToEnum = (s) => {
    let a = {};
    for (let i of s) a[i] = i;
    return a;
  }, r18.getValidEnumValues = (s) => {
    let a = r18.objectKeys(s).filter((o) => typeof s[s[o]] != "number"), i = {};
    for (let o of a) i[o] = s[o];
    return r18.objectValues(i);
  }, r18.objectValues = (s) => r18.objectKeys(s).map(function(a) {
    return s[a];
  }), r18.objectKeys = typeof Object.keys == "function" ? (s) => Object.keys(s) : (s) => {
    let a = [];
    for (let i in s) Object.prototype.hasOwnProperty.call(s, i) && a.push(i);
    return a;
  }, r18.find = (s, a) => {
    for (let i of s) if (a(i)) return i;
  }, r18.isInteger = typeof Number.isInteger == "function" ? (s) => Number.isInteger(s) : (s) => typeof s == "number" && isFinite(s) && Math.floor(s) === s;
  function n(s, a = " | ") {
    return s.map((i) => typeof i == "string" ? `'${i}'` : i).join(a);
  }
  r18.joinValues = n, r18.jsonStringifyReplacer = (s, a) => typeof a == "bigint" ? a.toString() : a;
})(w || (w = {}));
var qt;
(function(r18) {
  r18.mergeShapes = (e, t) => ({ ...e, ...t });
})(qt || (qt = {}));
var d = w.arrayToEnum(["string", "nan", "number", "integer", "float", "boolean", "date", "bigint", "symbol", "function", "undefined", "null", "array", "object", "unknown", "promise", "void", "never", "map", "set"]);
var ne = (r18) => {
  switch (typeof r18) {
    case "undefined":
      return d.undefined;
    case "string":
      return d.string;
    case "number":
      return isNaN(r18) ? d.nan : d.number;
    case "boolean":
      return d.boolean;
    case "function":
      return d.function;
    case "bigint":
      return d.bigint;
    case "symbol":
      return d.symbol;
    case "object":
      return Array.isArray(r18) ? d.array : r18 === null ? d.null : r18.then && typeof r18.then == "function" && r18.catch && typeof r18.catch == "function" ? d.promise : typeof Map < "u" && r18 instanceof Map ? d.map : typeof Set < "u" && r18 instanceof Set ? d.set : typeof Date < "u" && r18 instanceof Date ? d.date : d.object;
    default:
      return d.unknown;
  }
};
var c = w.arrayToEnum(["invalid_type", "invalid_literal", "custom", "invalid_union", "invalid_union_discriminator", "invalid_enum_value", "unrecognized_keys", "invalid_arguments", "invalid_return_type", "invalid_date", "invalid_string", "too_small", "too_big", "invalid_intersection_types", "not_multiple_of", "not_finite"]);
var Vn = (r18) => JSON.stringify(r18, null, 2).replace(/"([^"]+)":/g, "$1:");
var P = class r3 extends Error {
  constructor(e) {
    super(), this.issues = [], this.addIssue = (n) => {
      this.issues = [...this.issues, n];
    }, this.addIssues = (n = []) => {
      this.issues = [...this.issues, ...n];
    };
    let t = new.target.prototype;
    Object.setPrototypeOf ? Object.setPrototypeOf(this, t) : this.__proto__ = t, this.name = "ZodError", this.issues = e;
  }
  get errors() {
    return this.issues;
  }
  format(e) {
    let t = e || function(a) {
      return a.message;
    }, n = { _errors: [] }, s = (a) => {
      for (let i of a.issues) if (i.code === "invalid_union") i.unionErrors.map(s);
      else if (i.code === "invalid_return_type") s(i.returnTypeError);
      else if (i.code === "invalid_arguments") s(i.argumentsError);
      else if (i.path.length === 0) n._errors.push(t(i));
      else {
        let o = n, u = 0;
        for (; u < i.path.length; ) {
          let l = i.path[u];
          u === i.path.length - 1 ? (o[l] = o[l] || { _errors: [] }, o[l]._errors.push(t(i))) : o[l] = o[l] || { _errors: [] }, o = o[l], u++;
        }
      }
    };
    return s(this), n;
  }
  static assert(e) {
    if (!(e instanceof r3)) throw new Error(`Not a ZodError: ${e}`);
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, w.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(e = (t) => t.message) {
    let t = {}, n = [];
    for (let s of this.issues) s.path.length > 0 ? (t[s.path[0]] = t[s.path[0]] || [], t[s.path[0]].push(e(s))) : n.push(e(s));
    return { formErrors: n, fieldErrors: t };
  }
  get formErrors() {
    return this.flatten();
  }
};
P.create = (r18) => new P(r18);
var je = (r18, e) => {
  let t;
  switch (r18.code) {
    case c.invalid_type:
      r18.received === d.undefined ? t = "Required" : t = `Expected ${r18.expected}, received ${r18.received}`;
      break;
    case c.invalid_literal:
      t = `Invalid literal value, expected ${JSON.stringify(r18.expected, w.jsonStringifyReplacer)}`;
      break;
    case c.unrecognized_keys:
      t = `Unrecognized key(s) in object: ${w.joinValues(r18.keys, ", ")}`;
      break;
    case c.invalid_union:
      t = "Invalid input";
      break;
    case c.invalid_union_discriminator:
      t = `Invalid discriminator value. Expected ${w.joinValues(r18.options)}`;
      break;
    case c.invalid_enum_value:
      t = `Invalid enum value. Expected ${w.joinValues(r18.options)}, received '${r18.received}'`;
      break;
    case c.invalid_arguments:
      t = "Invalid function arguments";
      break;
    case c.invalid_return_type:
      t = "Invalid function return type";
      break;
    case c.invalid_date:
      t = "Invalid date";
      break;
    case c.invalid_string:
      typeof r18.validation == "object" ? "includes" in r18.validation ? (t = `Invalid input: must include "${r18.validation.includes}"`, typeof r18.validation.position == "number" && (t = `${t} at one or more positions greater than or equal to ${r18.validation.position}`)) : "startsWith" in r18.validation ? t = `Invalid input: must start with "${r18.validation.startsWith}"` : "endsWith" in r18.validation ? t = `Invalid input: must end with "${r18.validation.endsWith}"` : w.assertNever(r18.validation) : r18.validation !== "regex" ? t = `Invalid ${r18.validation}` : t = "Invalid";
      break;
    case c.too_small:
      r18.type === "array" ? t = `Array must contain ${r18.exact ? "exactly" : r18.inclusive ? "at least" : "more than"} ${r18.minimum} element(s)` : r18.type === "string" ? t = `String must contain ${r18.exact ? "exactly" : r18.inclusive ? "at least" : "over"} ${r18.minimum} character(s)` : r18.type === "number" ? t = `Number must be ${r18.exact ? "exactly equal to " : r18.inclusive ? "greater than or equal to " : "greater than "}${r18.minimum}` : r18.type === "date" ? t = `Date must be ${r18.exact ? "exactly equal to " : r18.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(r18.minimum))}` : t = "Invalid input";
      break;
    case c.too_big:
      r18.type === "array" ? t = `Array must contain ${r18.exact ? "exactly" : r18.inclusive ? "at most" : "less than"} ${r18.maximum} element(s)` : r18.type === "string" ? t = `String must contain ${r18.exact ? "exactly" : r18.inclusive ? "at most" : "under"} ${r18.maximum} character(s)` : r18.type === "number" ? t = `Number must be ${r18.exact ? "exactly" : r18.inclusive ? "less than or equal to" : "less than"} ${r18.maximum}` : r18.type === "bigint" ? t = `BigInt must be ${r18.exact ? "exactly" : r18.inclusive ? "less than or equal to" : "less than"} ${r18.maximum}` : r18.type === "date" ? t = `Date must be ${r18.exact ? "exactly" : r18.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(r18.maximum))}` : t = "Invalid input";
      break;
    case c.custom:
      t = "Invalid input";
      break;
    case c.invalid_intersection_types:
      t = "Intersection results could not be merged";
      break;
    case c.not_multiple_of:
      t = `Number must be a multiple of ${r18.multipleOf}`;
      break;
    case c.not_finite:
      t = "Number must be finite";
      break;
    default:
      t = e.defaultError, w.assertNever(r18);
  }
  return { message: t };
};
var Pr = je;
function qn(r18) {
  Pr = r18;
}
function pt() {
  return Pr;
}
var mt = (r18) => {
  let { data: e, path: t, errorMaps: n, issueData: s } = r18, a = [...t, ...s.path || []], i = { ...s, path: a };
  if (s.message !== void 0) return { ...s, path: a, message: s.message };
  let o = "", u = n.filter((l) => !!l).slice().reverse();
  for (let l of u) o = l(i, { data: e, defaultError: o }).message;
  return { ...s, path: a, message: o };
};
var Gn = [];
function f(r18, e) {
  let t = pt(), n = mt({ issueData: e, data: r18.data, path: r18.path, errorMaps: [r18.common.contextualErrorMap, r18.schemaErrorMap, t, t === je ? void 0 : je].filter((s) => !!s) });
  r18.common.issues.push(n);
}
var R = class r4 {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    this.value === "valid" && (this.value = "dirty");
  }
  abort() {
    this.value !== "aborted" && (this.value = "aborted");
  }
  static mergeArray(e, t) {
    let n = [];
    for (let s of t) {
      if (s.status === "aborted") return y;
      s.status === "dirty" && e.dirty(), n.push(s.value);
    }
    return { status: e.value, value: n };
  }
  static async mergeObjectAsync(e, t) {
    let n = [];
    for (let s of t) {
      let a = await s.key, i = await s.value;
      n.push({ key: a, value: i });
    }
    return r4.mergeObjectSync(e, n);
  }
  static mergeObjectSync(e, t) {
    let n = {};
    for (let s of t) {
      let { key: a, value: i } = s;
      if (a.status === "aborted" || i.status === "aborted") return y;
      a.status === "dirty" && e.dirty(), i.status === "dirty" && e.dirty(), a.value !== "__proto__" && (typeof i.value < "u" || s.alwaysSet) && (n[a.value] = i.value);
    }
    return { status: e.value, value: n };
  }
};
var y = Object.freeze({ status: "aborted" });
var Re = (r18) => ({ status: "dirty", value: r18 });
var j = (r18) => ({ status: "valid", value: r18 });
var Gt = (r18) => r18.status === "aborted";
var Ht = (r18) => r18.status === "dirty";
var Je = (r18) => r18.status === "valid";
var yt = (r18) => typeof Promise < "u" && r18 instanceof Promise;
function gt(r18, e, t, n) {
  if (t === "a" && !n) throw new TypeError("Private accessor was defined without a getter");
  if (typeof e == "function" ? r18 !== e || !n : !e.has(r18)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return t === "m" ? n : t === "a" ? n.call(r18) : n ? n.value : e.get(r18);
}
function Zr(r18, e, t, n, s) {
  if (n === "m") throw new TypeError("Private method is not writable");
  if (n === "a" && !s) throw new TypeError("Private accessor was defined without a setter");
  if (typeof e == "function" ? r18 !== e || !s : !e.has(r18)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return n === "a" ? s.call(r18, t) : s ? s.value = t : e.set(r18, t), t;
}
var p;
(function(r18) {
  r18.errToObj = (e) => typeof e == "string" ? { message: e } : e || {}, r18.toString = (e) => typeof e == "string" ? e : e == null ? void 0 : e.message;
})(p || (p = {}));
var Xe;
var Ye;
var M = class {
  constructor(e, t, n, s) {
    this._cachedPath = [], this.parent = e, this.data = t, this._path = n, this._key = s;
  }
  get path() {
    return this._cachedPath.length || (this._key instanceof Array ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)), this._cachedPath;
  }
};
var Nr = (r18, e) => {
  if (Je(e)) return { success: true, data: e.value };
  if (!r18.common.issues.length) throw new Error("Validation failed but no issues detected.");
  return { success: false, get error() {
    if (this._error) return this._error;
    let t = new P(r18.common.issues);
    return this._error = t, this._error;
  } };
};
function g(r18) {
  if (!r18) return {};
  let { errorMap: e, invalid_type_error: t, required_error: n, description: s } = r18;
  if (e && (t || n)) throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  return e ? { errorMap: e, description: s } : { errorMap: (i, o) => {
    var u, l;
    let { message: h } = r18;
    return i.code === "invalid_enum_value" ? { message: h != null ? h : o.defaultError } : typeof o.data > "u" ? { message: (u = h != null ? h : n) !== null && u !== void 0 ? u : o.defaultError } : i.code !== "invalid_type" ? { message: o.defaultError } : { message: (l = h != null ? h : t) !== null && l !== void 0 ? l : o.defaultError };
  }, description: s };
}
var _ = class {
  constructor(e) {
    this.spa = this.safeParseAsync, this._def = e, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.readonly = this.readonly.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this);
  }
  get description() {
    return this._def.description;
  }
  _getType(e) {
    return ne(e.data);
  }
  _getOrReturnCtx(e, t) {
    return t || { common: e.parent.common, data: e.data, parsedType: ne(e.data), schemaErrorMap: this._def.errorMap, path: e.path, parent: e.parent };
  }
  _processInputParams(e) {
    return { status: new R(), ctx: { common: e.parent.common, data: e.data, parsedType: ne(e.data), schemaErrorMap: this._def.errorMap, path: e.path, parent: e.parent } };
  }
  _parseSync(e) {
    let t = this._parse(e);
    if (yt(t)) throw new Error("Synchronous parse encountered promise.");
    return t;
  }
  _parseAsync(e) {
    let t = this._parse(e);
    return Promise.resolve(t);
  }
  parse(e, t) {
    let n = this.safeParse(e, t);
    if (n.success) return n.data;
    throw n.error;
  }
  safeParse(e, t) {
    var n;
    let s = { common: { issues: [], async: (n = t == null ? void 0 : t.async) !== null && n !== void 0 ? n : false, contextualErrorMap: t == null ? void 0 : t.errorMap }, path: (t == null ? void 0 : t.path) || [], schemaErrorMap: this._def.errorMap, parent: null, data: e, parsedType: ne(e) }, a = this._parseSync({ data: e, path: s.path, parent: s });
    return Nr(s, a);
  }
  async parseAsync(e, t) {
    let n = await this.safeParseAsync(e, t);
    if (n.success) return n.data;
    throw n.error;
  }
  async safeParseAsync(e, t) {
    let n = { common: { issues: [], contextualErrorMap: t == null ? void 0 : t.errorMap, async: true }, path: (t == null ? void 0 : t.path) || [], schemaErrorMap: this._def.errorMap, parent: null, data: e, parsedType: ne(e) }, s = this._parse({ data: e, path: n.path, parent: n }), a = await (yt(s) ? s : Promise.resolve(s));
    return Nr(n, a);
  }
  refine(e, t) {
    let n = (s) => typeof t == "string" || typeof t > "u" ? { message: t } : typeof t == "function" ? t(s) : t;
    return this._refinement((s, a) => {
      let i = e(s), o = () => a.addIssue({ code: c.custom, ...n(s) });
      return typeof Promise < "u" && i instanceof Promise ? i.then((u) => u ? true : (o(), false)) : i ? true : (o(), false);
    });
  }
  refinement(e, t) {
    return this._refinement((n, s) => e(n) ? true : (s.addIssue(typeof t == "function" ? t(n, s) : t), false));
  }
  _refinement(e) {
    return new Z({ schema: this, typeName: m.ZodEffects, effect: { type: "refinement", refinement: e } });
  }
  superRefine(e) {
    return this._refinement(e);
  }
  optional() {
    return z.create(this, this._def);
  }
  nullable() {
    return $.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return J.create(this, this._def);
  }
  promise() {
    return ie.create(this, this._def);
  }
  or(e) {
    return ye.create([this, e], this._def);
  }
  and(e) {
    return ge.create(this, e, this._def);
  }
  transform(e) {
    return new Z({ ...g(this._def), schema: this, typeName: m.ZodEffects, effect: { type: "transform", transform: e } });
  }
  default(e) {
    let t = typeof e == "function" ? e : () => e;
    return new be({ ...g(this._def), innerType: this, defaultValue: t, typeName: m.ZodDefault });
  }
  brand() {
    return new Qe({ typeName: m.ZodBranded, type: this, ...g(this._def) });
  }
  catch(e) {
    let t = typeof e == "function" ? e : () => e;
    return new Se({ ...g(this._def), innerType: this, catchValue: t, typeName: m.ZodCatch });
  }
  describe(e) {
    let t = this.constructor;
    return new t({ ...this._def, description: e });
  }
  pipe(e) {
    return Ke.create(this, e);
  }
  readonly() {
    return ke.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
};
var Hn = /^c[^\s-]{8,}$/i;
var Xn = /^[0-9a-z]+$/;
var Yn = /^[0-9A-HJKMNP-TV-Z]{26}$/;
var Jn = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
var Qn = /^[a-z0-9_-]{21}$/i;
var Kn = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
var es = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
var ts = "^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";
var Vt;
var rs = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
var ns = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
var ss = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
var Wr = "((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))";
var as = new RegExp(`^${Wr}$`);
function zr(r18) {
  let e = "([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d";
  return r18.precision ? e = `${e}\\.\\d{${r18.precision}}` : r18.precision == null && (e = `${e}(\\.\\d+)?`), e;
}
function is(r18) {
  return new RegExp(`^${zr(r18)}$`);
}
function Mr(r18) {
  let e = `${Wr}T${zr(r18)}`, t = [];
  return t.push(r18.local ? "Z?" : "Z"), r18.offset && t.push("([+-]\\d{2}:?\\d{2})"), e = `${e}(${t.join("|")})`, new RegExp(`^${e}$`);
}
function os(r18, e) {
  return !!((e === "v4" || !e) && rs.test(r18) || (e === "v6" || !e) && ns.test(r18));
}
var se = class r5 extends _ {
  _parse(e) {
    if (this._def.coerce && (e.data = String(e.data)), this._getType(e) !== d.string) {
      let a = this._getOrReturnCtx(e);
      return f(a, { code: c.invalid_type, expected: d.string, received: a.parsedType }), y;
    }
    let n = new R(), s;
    for (let a of this._def.checks) if (a.kind === "min") e.data.length < a.value && (s = this._getOrReturnCtx(e, s), f(s, { code: c.too_small, minimum: a.value, type: "string", inclusive: true, exact: false, message: a.message }), n.dirty());
    else if (a.kind === "max") e.data.length > a.value && (s = this._getOrReturnCtx(e, s), f(s, { code: c.too_big, maximum: a.value, type: "string", inclusive: true, exact: false, message: a.message }), n.dirty());
    else if (a.kind === "length") {
      let i = e.data.length > a.value, o = e.data.length < a.value;
      (i || o) && (s = this._getOrReturnCtx(e, s), i ? f(s, { code: c.too_big, maximum: a.value, type: "string", inclusive: true, exact: true, message: a.message }) : o && f(s, { code: c.too_small, minimum: a.value, type: "string", inclusive: true, exact: true, message: a.message }), n.dirty());
    } else if (a.kind === "email") es.test(e.data) || (s = this._getOrReturnCtx(e, s), f(s, { validation: "email", code: c.invalid_string, message: a.message }), n.dirty());
    else if (a.kind === "emoji") Vt || (Vt = new RegExp(ts, "u")), Vt.test(e.data) || (s = this._getOrReturnCtx(e, s), f(s, { validation: "emoji", code: c.invalid_string, message: a.message }), n.dirty());
    else if (a.kind === "uuid") Jn.test(e.data) || (s = this._getOrReturnCtx(e, s), f(s, { validation: "uuid", code: c.invalid_string, message: a.message }), n.dirty());
    else if (a.kind === "nanoid") Qn.test(e.data) || (s = this._getOrReturnCtx(e, s), f(s, { validation: "nanoid", code: c.invalid_string, message: a.message }), n.dirty());
    else if (a.kind === "cuid") Hn.test(e.data) || (s = this._getOrReturnCtx(e, s), f(s, { validation: "cuid", code: c.invalid_string, message: a.message }), n.dirty());
    else if (a.kind === "cuid2") Xn.test(e.data) || (s = this._getOrReturnCtx(e, s), f(s, { validation: "cuid2", code: c.invalid_string, message: a.message }), n.dirty());
    else if (a.kind === "ulid") Yn.test(e.data) || (s = this._getOrReturnCtx(e, s), f(s, { validation: "ulid", code: c.invalid_string, message: a.message }), n.dirty());
    else if (a.kind === "url") try {
      new URL(e.data);
    } catch (e2) {
      s = this._getOrReturnCtx(e, s), f(s, { validation: "url", code: c.invalid_string, message: a.message }), n.dirty();
    }
    else a.kind === "regex" ? (a.regex.lastIndex = 0, a.regex.test(e.data) || (s = this._getOrReturnCtx(e, s), f(s, { validation: "regex", code: c.invalid_string, message: a.message }), n.dirty())) : a.kind === "trim" ? e.data = e.data.trim() : a.kind === "includes" ? e.data.includes(a.value, a.position) || (s = this._getOrReturnCtx(e, s), f(s, { code: c.invalid_string, validation: { includes: a.value, position: a.position }, message: a.message }), n.dirty()) : a.kind === "toLowerCase" ? e.data = e.data.toLowerCase() : a.kind === "toUpperCase" ? e.data = e.data.toUpperCase() : a.kind === "startsWith" ? e.data.startsWith(a.value) || (s = this._getOrReturnCtx(e, s), f(s, { code: c.invalid_string, validation: { startsWith: a.value }, message: a.message }), n.dirty()) : a.kind === "endsWith" ? e.data.endsWith(a.value) || (s = this._getOrReturnCtx(e, s), f(s, { code: c.invalid_string, validation: { endsWith: a.value }, message: a.message }), n.dirty()) : a.kind === "datetime" ? Mr(a).test(e.data) || (s = this._getOrReturnCtx(e, s), f(s, { code: c.invalid_string, validation: "datetime", message: a.message }), n.dirty()) : a.kind === "date" ? as.test(e.data) || (s = this._getOrReturnCtx(e, s), f(s, { code: c.invalid_string, validation: "date", message: a.message }), n.dirty()) : a.kind === "time" ? is(a).test(e.data) || (s = this._getOrReturnCtx(e, s), f(s, { code: c.invalid_string, validation: "time", message: a.message }), n.dirty()) : a.kind === "duration" ? Kn.test(e.data) || (s = this._getOrReturnCtx(e, s), f(s, { validation: "duration", code: c.invalid_string, message: a.message }), n.dirty()) : a.kind === "ip" ? os(e.data, a.version) || (s = this._getOrReturnCtx(e, s), f(s, { validation: "ip", code: c.invalid_string, message: a.message }), n.dirty()) : a.kind === "base64" ? ss.test(e.data) || (s = this._getOrReturnCtx(e, s), f(s, { validation: "base64", code: c.invalid_string, message: a.message }), n.dirty()) : w.assertNever(a);
    return { status: n.value, value: e.data };
  }
  _regex(e, t, n) {
    return this.refinement((s) => e.test(s), { validation: t, code: c.invalid_string, ...p.errToObj(n) });
  }
  _addCheck(e) {
    return new r5({ ...this._def, checks: [...this._def.checks, e] });
  }
  email(e) {
    return this._addCheck({ kind: "email", ...p.errToObj(e) });
  }
  url(e) {
    return this._addCheck({ kind: "url", ...p.errToObj(e) });
  }
  emoji(e) {
    return this._addCheck({ kind: "emoji", ...p.errToObj(e) });
  }
  uuid(e) {
    return this._addCheck({ kind: "uuid", ...p.errToObj(e) });
  }
  nanoid(e) {
    return this._addCheck({ kind: "nanoid", ...p.errToObj(e) });
  }
  cuid(e) {
    return this._addCheck({ kind: "cuid", ...p.errToObj(e) });
  }
  cuid2(e) {
    return this._addCheck({ kind: "cuid2", ...p.errToObj(e) });
  }
  ulid(e) {
    return this._addCheck({ kind: "ulid", ...p.errToObj(e) });
  }
  base64(e) {
    return this._addCheck({ kind: "base64", ...p.errToObj(e) });
  }
  ip(e) {
    return this._addCheck({ kind: "ip", ...p.errToObj(e) });
  }
  datetime(e) {
    var t, n;
    return typeof e == "string" ? this._addCheck({ kind: "datetime", precision: null, offset: false, local: false, message: e }) : this._addCheck({ kind: "datetime", precision: typeof (e == null ? void 0 : e.precision) > "u" ? null : e == null ? void 0 : e.precision, offset: (t = e == null ? void 0 : e.offset) !== null && t !== void 0 ? t : false, local: (n = e == null ? void 0 : e.local) !== null && n !== void 0 ? n : false, ...p.errToObj(e == null ? void 0 : e.message) });
  }
  date(e) {
    return this._addCheck({ kind: "date", message: e });
  }
  time(e) {
    return typeof e == "string" ? this._addCheck({ kind: "time", precision: null, message: e }) : this._addCheck({ kind: "time", precision: typeof (e == null ? void 0 : e.precision) > "u" ? null : e == null ? void 0 : e.precision, ...p.errToObj(e == null ? void 0 : e.message) });
  }
  duration(e) {
    return this._addCheck({ kind: "duration", ...p.errToObj(e) });
  }
  regex(e, t) {
    return this._addCheck({ kind: "regex", regex: e, ...p.errToObj(t) });
  }
  includes(e, t) {
    return this._addCheck({ kind: "includes", value: e, position: t == null ? void 0 : t.position, ...p.errToObj(t == null ? void 0 : t.message) });
  }
  startsWith(e, t) {
    return this._addCheck({ kind: "startsWith", value: e, ...p.errToObj(t) });
  }
  endsWith(e, t) {
    return this._addCheck({ kind: "endsWith", value: e, ...p.errToObj(t) });
  }
  min(e, t) {
    return this._addCheck({ kind: "min", value: e, ...p.errToObj(t) });
  }
  max(e, t) {
    return this._addCheck({ kind: "max", value: e, ...p.errToObj(t) });
  }
  length(e, t) {
    return this._addCheck({ kind: "length", value: e, ...p.errToObj(t) });
  }
  nonempty(e) {
    return this.min(1, p.errToObj(e));
  }
  trim() {
    return new r5({ ...this._def, checks: [...this._def.checks, { kind: "trim" }] });
  }
  toLowerCase() {
    return new r5({ ...this._def, checks: [...this._def.checks, { kind: "toLowerCase" }] });
  }
  toUpperCase() {
    return new r5({ ...this._def, checks: [...this._def.checks, { kind: "toUpperCase" }] });
  }
  get isDatetime() {
    return !!this._def.checks.find((e) => e.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((e) => e.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((e) => e.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((e) => e.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((e) => e.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((e) => e.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((e) => e.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((e) => e.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((e) => e.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((e) => e.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((e) => e.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((e) => e.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((e) => e.kind === "ip");
  }
  get isBase64() {
    return !!this._def.checks.find((e) => e.kind === "base64");
  }
  get minLength() {
    let e = null;
    for (let t of this._def.checks) t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxLength() {
    let e = null;
    for (let t of this._def.checks) t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
};
se.create = (r18) => {
  var e;
  return new se({ checks: [], typeName: m.ZodString, coerce: (e = r18 == null ? void 0 : r18.coerce) !== null && e !== void 0 ? e : false, ...g(r18) });
};
function us(r18, e) {
  let t = (r18.toString().split(".")[1] || "").length, n = (e.toString().split(".")[1] || "").length, s = t > n ? t : n, a = parseInt(r18.toFixed(s).replace(".", "")), i = parseInt(e.toFixed(s).replace(".", ""));
  return a % i / Math.pow(10, s);
}
var ce = class r6 extends _ {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;
  }
  _parse(e) {
    if (this._def.coerce && (e.data = Number(e.data)), this._getType(e) !== d.number) {
      let a = this._getOrReturnCtx(e);
      return f(a, { code: c.invalid_type, expected: d.number, received: a.parsedType }), y;
    }
    let n, s = new R();
    for (let a of this._def.checks) a.kind === "int" ? w.isInteger(e.data) || (n = this._getOrReturnCtx(e, n), f(n, { code: c.invalid_type, expected: "integer", received: "float", message: a.message }), s.dirty()) : a.kind === "min" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (n = this._getOrReturnCtx(e, n), f(n, { code: c.too_small, minimum: a.value, type: "number", inclusive: a.inclusive, exact: false, message: a.message }), s.dirty()) : a.kind === "max" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (n = this._getOrReturnCtx(e, n), f(n, { code: c.too_big, maximum: a.value, type: "number", inclusive: a.inclusive, exact: false, message: a.message }), s.dirty()) : a.kind === "multipleOf" ? us(e.data, a.value) !== 0 && (n = this._getOrReturnCtx(e, n), f(n, { code: c.not_multiple_of, multipleOf: a.value, message: a.message }), s.dirty()) : a.kind === "finite" ? Number.isFinite(e.data) || (n = this._getOrReturnCtx(e, n), f(n, { code: c.not_finite, message: a.message }), s.dirty()) : w.assertNever(a);
    return { status: s.value, value: e.data };
  }
  gte(e, t) {
    return this.setLimit("min", e, true, p.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, false, p.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, true, p.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, false, p.toString(t));
  }
  setLimit(e, t, n, s) {
    return new r6({ ...this._def, checks: [...this._def.checks, { kind: e, value: t, inclusive: n, message: p.toString(s) }] });
  }
  _addCheck(e) {
    return new r6({ ...this._def, checks: [...this._def.checks, e] });
  }
  int(e) {
    return this._addCheck({ kind: "int", message: p.toString(e) });
  }
  positive(e) {
    return this._addCheck({ kind: "min", value: 0, inclusive: false, message: p.toString(e) });
  }
  negative(e) {
    return this._addCheck({ kind: "max", value: 0, inclusive: false, message: p.toString(e) });
  }
  nonpositive(e) {
    return this._addCheck({ kind: "max", value: 0, inclusive: true, message: p.toString(e) });
  }
  nonnegative(e) {
    return this._addCheck({ kind: "min", value: 0, inclusive: true, message: p.toString(e) });
  }
  multipleOf(e, t) {
    return this._addCheck({ kind: "multipleOf", value: e, message: p.toString(t) });
  }
  finite(e) {
    return this._addCheck({ kind: "finite", message: p.toString(e) });
  }
  safe(e) {
    return this._addCheck({ kind: "min", inclusive: true, value: Number.MIN_SAFE_INTEGER, message: p.toString(e) })._addCheck({ kind: "max", inclusive: true, value: Number.MAX_SAFE_INTEGER, message: p.toString(e) });
  }
  get minValue() {
    let e = null;
    for (let t of this._def.checks) t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (let t of this._def.checks) t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
  get isInt() {
    return !!this._def.checks.find((e) => e.kind === "int" || e.kind === "multipleOf" && w.isInteger(e.value));
  }
  get isFinite() {
    let e = null, t = null;
    for (let n of this._def.checks) {
      if (n.kind === "finite" || n.kind === "int" || n.kind === "multipleOf") return true;
      n.kind === "min" ? (t === null || n.value > t) && (t = n.value) : n.kind === "max" && (e === null || n.value < e) && (e = n.value);
    }
    return Number.isFinite(t) && Number.isFinite(e);
  }
};
ce.create = (r18) => new ce({ checks: [], typeName: m.ZodNumber, coerce: (r18 == null ? void 0 : r18.coerce) || false, ...g(r18) });
var fe = class r7 extends _ {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte;
  }
  _parse(e) {
    if (this._def.coerce && (e.data = BigInt(e.data)), this._getType(e) !== d.bigint) {
      let a = this._getOrReturnCtx(e);
      return f(a, { code: c.invalid_type, expected: d.bigint, received: a.parsedType }), y;
    }
    let n, s = new R();
    for (let a of this._def.checks) a.kind === "min" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (n = this._getOrReturnCtx(e, n), f(n, { code: c.too_small, type: "bigint", minimum: a.value, inclusive: a.inclusive, message: a.message }), s.dirty()) : a.kind === "max" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (n = this._getOrReturnCtx(e, n), f(n, { code: c.too_big, type: "bigint", maximum: a.value, inclusive: a.inclusive, message: a.message }), s.dirty()) : a.kind === "multipleOf" ? e.data % a.value !== BigInt(0) && (n = this._getOrReturnCtx(e, n), f(n, { code: c.not_multiple_of, multipleOf: a.value, message: a.message }), s.dirty()) : w.assertNever(a);
    return { status: s.value, value: e.data };
  }
  gte(e, t) {
    return this.setLimit("min", e, true, p.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, false, p.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, true, p.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, false, p.toString(t));
  }
  setLimit(e, t, n, s) {
    return new r7({ ...this._def, checks: [...this._def.checks, { kind: e, value: t, inclusive: n, message: p.toString(s) }] });
  }
  _addCheck(e) {
    return new r7({ ...this._def, checks: [...this._def.checks, e] });
  }
  positive(e) {
    return this._addCheck({ kind: "min", value: BigInt(0), inclusive: false, message: p.toString(e) });
  }
  negative(e) {
    return this._addCheck({ kind: "max", value: BigInt(0), inclusive: false, message: p.toString(e) });
  }
  nonpositive(e) {
    return this._addCheck({ kind: "max", value: BigInt(0), inclusive: true, message: p.toString(e) });
  }
  nonnegative(e) {
    return this._addCheck({ kind: "min", value: BigInt(0), inclusive: true, message: p.toString(e) });
  }
  multipleOf(e, t) {
    return this._addCheck({ kind: "multipleOf", value: e, message: p.toString(t) });
  }
  get minValue() {
    let e = null;
    for (let t of this._def.checks) t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (let t of this._def.checks) t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
};
fe.create = (r18) => {
  var e;
  return new fe({ checks: [], typeName: m.ZodBigInt, coerce: (e = r18 == null ? void 0 : r18.coerce) !== null && e !== void 0 ? e : false, ...g(r18) });
};
var de = class extends _ {
  _parse(e) {
    if (this._def.coerce && (e.data = !!e.data), this._getType(e) !== d.boolean) {
      let n = this._getOrReturnCtx(e);
      return f(n, { code: c.invalid_type, expected: d.boolean, received: n.parsedType }), y;
    }
    return j(e.data);
  }
};
de.create = (r18) => new de({ typeName: m.ZodBoolean, coerce: (r18 == null ? void 0 : r18.coerce) || false, ...g(r18) });
var he = class r8 extends _ {
  _parse(e) {
    if (this._def.coerce && (e.data = new Date(e.data)), this._getType(e) !== d.date) {
      let a = this._getOrReturnCtx(e);
      return f(a, { code: c.invalid_type, expected: d.date, received: a.parsedType }), y;
    }
    if (isNaN(e.data.getTime())) {
      let a = this._getOrReturnCtx(e);
      return f(a, { code: c.invalid_date }), y;
    }
    let n = new R(), s;
    for (let a of this._def.checks) a.kind === "min" ? e.data.getTime() < a.value && (s = this._getOrReturnCtx(e, s), f(s, { code: c.too_small, message: a.message, inclusive: true, exact: false, minimum: a.value, type: "date" }), n.dirty()) : a.kind === "max" ? e.data.getTime() > a.value && (s = this._getOrReturnCtx(e, s), f(s, { code: c.too_big, message: a.message, inclusive: true, exact: false, maximum: a.value, type: "date" }), n.dirty()) : w.assertNever(a);
    return { status: n.value, value: new Date(e.data.getTime()) };
  }
  _addCheck(e) {
    return new r8({ ...this._def, checks: [...this._def.checks, e] });
  }
  min(e, t) {
    return this._addCheck({ kind: "min", value: e.getTime(), message: p.toString(t) });
  }
  max(e, t) {
    return this._addCheck({ kind: "max", value: e.getTime(), message: p.toString(t) });
  }
  get minDate() {
    let e = null;
    for (let t of this._def.checks) t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
  get maxDate() {
    let e = null;
    for (let t of this._def.checks) t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
};
he.create = (r18) => new he({ checks: [], coerce: (r18 == null ? void 0 : r18.coerce) || false, typeName: m.ZodDate, ...g(r18) });
var Ie = class extends _ {
  _parse(e) {
    if (this._getType(e) !== d.symbol) {
      let n = this._getOrReturnCtx(e);
      return f(n, { code: c.invalid_type, expected: d.symbol, received: n.parsedType }), y;
    }
    return j(e.data);
  }
};
Ie.create = (r18) => new Ie({ typeName: m.ZodSymbol, ...g(r18) });
var pe = class extends _ {
  _parse(e) {
    if (this._getType(e) !== d.undefined) {
      let n = this._getOrReturnCtx(e);
      return f(n, { code: c.invalid_type, expected: d.undefined, received: n.parsedType }), y;
    }
    return j(e.data);
  }
};
pe.create = (r18) => new pe({ typeName: m.ZodUndefined, ...g(r18) });
var me = class extends _ {
  _parse(e) {
    if (this._getType(e) !== d.null) {
      let n = this._getOrReturnCtx(e);
      return f(n, { code: c.invalid_type, expected: d.null, received: n.parsedType }), y;
    }
    return j(e.data);
  }
};
me.create = (r18) => new me({ typeName: m.ZodNull, ...g(r18) });
var ae = class extends _ {
  constructor() {
    super(...arguments), this._any = true;
  }
  _parse(e) {
    return j(e.data);
  }
};
ae.create = (r18) => new ae({ typeName: m.ZodAny, ...g(r18) });
var Y = class extends _ {
  constructor() {
    super(...arguments), this._unknown = true;
  }
  _parse(e) {
    return j(e.data);
  }
};
Y.create = (r18) => new Y({ typeName: m.ZodUnknown, ...g(r18) });
var D = class extends _ {
  _parse(e) {
    let t = this._getOrReturnCtx(e);
    return f(t, { code: c.invalid_type, expected: d.never, received: t.parsedType }), y;
  }
};
D.create = (r18) => new D({ typeName: m.ZodNever, ...g(r18) });
var Ne = class extends _ {
  _parse(e) {
    if (this._getType(e) !== d.undefined) {
      let n = this._getOrReturnCtx(e);
      return f(n, { code: c.invalid_type, expected: d.void, received: n.parsedType }), y;
    }
    return j(e.data);
  }
};
Ne.create = (r18) => new Ne({ typeName: m.ZodVoid, ...g(r18) });
var J = class r9 extends _ {
  _parse(e) {
    let { ctx: t, status: n } = this._processInputParams(e), s = this._def;
    if (t.parsedType !== d.array) return f(t, { code: c.invalid_type, expected: d.array, received: t.parsedType }), y;
    if (s.exactLength !== null) {
      let i = t.data.length > s.exactLength.value, o = t.data.length < s.exactLength.value;
      (i || o) && (f(t, { code: i ? c.too_big : c.too_small, minimum: o ? s.exactLength.value : void 0, maximum: i ? s.exactLength.value : void 0, type: "array", inclusive: true, exact: true, message: s.exactLength.message }), n.dirty());
    }
    if (s.minLength !== null && t.data.length < s.minLength.value && (f(t, { code: c.too_small, minimum: s.minLength.value, type: "array", inclusive: true, exact: false, message: s.minLength.message }), n.dirty()), s.maxLength !== null && t.data.length > s.maxLength.value && (f(t, { code: c.too_big, maximum: s.maxLength.value, type: "array", inclusive: true, exact: false, message: s.maxLength.message }), n.dirty()), t.common.async) return Promise.all([...t.data].map((i, o) => s.type._parseAsync(new M(t, i, t.path, o)))).then((i) => R.mergeArray(n, i));
    let a = [...t.data].map((i, o) => s.type._parseSync(new M(t, i, t.path, o)));
    return R.mergeArray(n, a);
  }
  get element() {
    return this._def.type;
  }
  min(e, t) {
    return new r9({ ...this._def, minLength: { value: e, message: p.toString(t) } });
  }
  max(e, t) {
    return new r9({ ...this._def, maxLength: { value: e, message: p.toString(t) } });
  }
  length(e, t) {
    return new r9({ ...this._def, exactLength: { value: e, message: p.toString(t) } });
  }
  nonempty(e) {
    return this.min(1, e);
  }
};
J.create = (r18, e) => new J({ type: r18, minLength: null, maxLength: null, exactLength: null, typeName: m.ZodArray, ...g(e) });
function Ce(r18) {
  if (r18 instanceof N) {
    let e = {};
    for (let t in r18.shape) {
      let n = r18.shape[t];
      e[t] = z.create(Ce(n));
    }
    return new N({ ...r18._def, shape: () => e });
  } else return r18 instanceof J ? new J({ ...r18._def, type: Ce(r18.element) }) : r18 instanceof z ? z.create(Ce(r18.unwrap())) : r18 instanceof $ ? $.create(Ce(r18.unwrap())) : r18 instanceof U ? U.create(r18.items.map((e) => Ce(e))) : r18;
}
var N = class r10 extends _ {
  constructor() {
    super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null) return this._cached;
    let e = this._def.shape(), t = w.objectKeys(e);
    return this._cached = { shape: e, keys: t };
  }
  _parse(e) {
    if (this._getType(e) !== d.object) {
      let l = this._getOrReturnCtx(e);
      return f(l, { code: c.invalid_type, expected: d.object, received: l.parsedType }), y;
    }
    let { status: n, ctx: s } = this._processInputParams(e), { shape: a, keys: i } = this._getCached(), o = [];
    if (!(this._def.catchall instanceof D && this._def.unknownKeys === "strip")) for (let l in s.data) i.includes(l) || o.push(l);
    let u = [];
    for (let l of i) {
      let h = a[l], v22 = s.data[l];
      u.push({ key: { status: "valid", value: l }, value: h._parse(new M(s, v22, s.path, l)), alwaysSet: l in s.data });
    }
    if (this._def.catchall instanceof D) {
      let l = this._def.unknownKeys;
      if (l === "passthrough") for (let h of o) u.push({ key: { status: "valid", value: h }, value: { status: "valid", value: s.data[h] } });
      else if (l === "strict") o.length > 0 && (f(s, { code: c.unrecognized_keys, keys: o }), n.dirty());
      else if (l !== "strip") throw new Error("Internal ZodObject error: invalid unknownKeys value.");
    } else {
      let l = this._def.catchall;
      for (let h of o) {
        let v22 = s.data[h];
        u.push({ key: { status: "valid", value: h }, value: l._parse(new M(s, v22, s.path, h)), alwaysSet: h in s.data });
      }
    }
    return s.common.async ? Promise.resolve().then(async () => {
      let l = [];
      for (let h of u) {
        let v22 = await h.key, T32 = await h.value;
        l.push({ key: v22, value: T32, alwaysSet: h.alwaysSet });
      }
      return l;
    }).then((l) => R.mergeObjectSync(n, l)) : R.mergeObjectSync(n, u);
  }
  get shape() {
    return this._def.shape();
  }
  strict(e) {
    return p.errToObj, new r10({ ...this._def, unknownKeys: "strict", ...e !== void 0 ? { errorMap: (t, n) => {
      var s, a, i, o;
      let u = (i = (a = (s = this._def).errorMap) === null || a === void 0 ? void 0 : a.call(s, t, n).message) !== null && i !== void 0 ? i : n.defaultError;
      return t.code === "unrecognized_keys" ? { message: (o = p.errToObj(e).message) !== null && o !== void 0 ? o : u } : { message: u };
    } } : {} });
  }
  strip() {
    return new r10({ ...this._def, unknownKeys: "strip" });
  }
  passthrough() {
    return new r10({ ...this._def, unknownKeys: "passthrough" });
  }
  extend(e) {
    return new r10({ ...this._def, shape: () => ({ ...this._def.shape(), ...e }) });
  }
  merge(e) {
    return new r10({ unknownKeys: e._def.unknownKeys, catchall: e._def.catchall, shape: () => ({ ...this._def.shape(), ...e._def.shape() }), typeName: m.ZodObject });
  }
  setKey(e, t) {
    return this.augment({ [e]: t });
  }
  catchall(e) {
    return new r10({ ...this._def, catchall: e });
  }
  pick(e) {
    let t = {};
    return w.objectKeys(e).forEach((n) => {
      e[n] && this.shape[n] && (t[n] = this.shape[n]);
    }), new r10({ ...this._def, shape: () => t });
  }
  omit(e) {
    let t = {};
    return w.objectKeys(this.shape).forEach((n) => {
      e[n] || (t[n] = this.shape[n]);
    }), new r10({ ...this._def, shape: () => t });
  }
  deepPartial() {
    return Ce(this);
  }
  partial(e) {
    let t = {};
    return w.objectKeys(this.shape).forEach((n) => {
      let s = this.shape[n];
      e && !e[n] ? t[n] = s : t[n] = s.optional();
    }), new r10({ ...this._def, shape: () => t });
  }
  required(e) {
    let t = {};
    return w.objectKeys(this.shape).forEach((n) => {
      if (e && !e[n]) t[n] = this.shape[n];
      else {
        let a = this.shape[n];
        for (; a instanceof z; ) a = a._def.innerType;
        t[n] = a;
      }
    }), new r10({ ...this._def, shape: () => t });
  }
  keyof() {
    return Dr(w.objectKeys(this.shape));
  }
};
N.create = (r18, e) => new N({ shape: () => r18, unknownKeys: "strip", catchall: D.create(), typeName: m.ZodObject, ...g(e) });
N.strictCreate = (r18, e) => new N({ shape: () => r18, unknownKeys: "strict", catchall: D.create(), typeName: m.ZodObject, ...g(e) });
N.lazycreate = (r18, e) => new N({ shape: r18, unknownKeys: "strip", catchall: D.create(), typeName: m.ZodObject, ...g(e) });
var ye = class extends _ {
  _parse(e) {
    let { ctx: t } = this._processInputParams(e), n = this._def.options;
    function s(a) {
      for (let o of a) if (o.result.status === "valid") return o.result;
      for (let o of a) if (o.result.status === "dirty") return t.common.issues.push(...o.ctx.common.issues), o.result;
      let i = a.map((o) => new P(o.ctx.common.issues));
      return f(t, { code: c.invalid_union, unionErrors: i }), y;
    }
    if (t.common.async) return Promise.all(n.map(async (a) => {
      let i = { ...t, common: { ...t.common, issues: [] }, parent: null };
      return { result: await a._parseAsync({ data: t.data, path: t.path, parent: i }), ctx: i };
    })).then(s);
    {
      let a, i = [];
      for (let u of n) {
        let l = { ...t, common: { ...t.common, issues: [] }, parent: null }, h = u._parseSync({ data: t.data, path: t.path, parent: l });
        if (h.status === "valid") return h;
        h.status === "dirty" && !a && (a = { result: h, ctx: l }), l.common.issues.length && i.push(l.common.issues);
      }
      if (a) return t.common.issues.push(...a.ctx.common.issues), a.result;
      let o = i.map((u) => new P(u));
      return f(t, { code: c.invalid_union, unionErrors: o }), y;
    }
  }
  get options() {
    return this._def.options;
  }
};
ye.create = (r18, e) => new ye({ options: r18, typeName: m.ZodUnion, ...g(e) });
var X = (r18) => r18 instanceof _e2 ? X(r18.schema) : r18 instanceof Z ? X(r18.innerType()) : r18 instanceof ve ? [r18.value] : r18 instanceof xe ? r18.options : r18 instanceof we ? w.objectValues(r18.enum) : r18 instanceof be ? X(r18._def.innerType) : r18 instanceof pe ? [void 0] : r18 instanceof me ? [null] : r18 instanceof z ? [void 0, ...X(r18.unwrap())] : r18 instanceof $ ? [null, ...X(r18.unwrap())] : r18 instanceof Qe || r18 instanceof ke ? X(r18.unwrap()) : r18 instanceof Se ? X(r18._def.innerType) : [];
var _t = class r11 extends _ {
  _parse(e) {
    let { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== d.object) return f(t, { code: c.invalid_type, expected: d.object, received: t.parsedType }), y;
    let n = this.discriminator, s = t.data[n], a = this.optionsMap.get(s);
    return a ? t.common.async ? a._parseAsync({ data: t.data, path: t.path, parent: t }) : a._parseSync({ data: t.data, path: t.path, parent: t }) : (f(t, { code: c.invalid_union_discriminator, options: Array.from(this.optionsMap.keys()), path: [n] }), y);
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  static create(e, t, n) {
    let s = /* @__PURE__ */ new Map();
    for (let a of t) {
      let i = X(a.shape[e]);
      if (!i.length) throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);
      for (let o of i) {
        if (s.has(o)) throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(o)}`);
        s.set(o, a);
      }
    }
    return new r11({ typeName: m.ZodDiscriminatedUnion, discriminator: e, options: t, optionsMap: s, ...g(n) });
  }
};
function Xt(r18, e) {
  let t = ne(r18), n = ne(e);
  if (r18 === e) return { valid: true, data: r18 };
  if (t === d.object && n === d.object) {
    let s = w.objectKeys(e), a = w.objectKeys(r18).filter((o) => s.indexOf(o) !== -1), i = { ...r18, ...e };
    for (let o of a) {
      let u = Xt(r18[o], e[o]);
      if (!u.valid) return { valid: false };
      i[o] = u.data;
    }
    return { valid: true, data: i };
  } else if (t === d.array && n === d.array) {
    if (r18.length !== e.length) return { valid: false };
    let s = [];
    for (let a = 0; a < r18.length; a++) {
      let i = r18[a], o = e[a], u = Xt(i, o);
      if (!u.valid) return { valid: false };
      s.push(u.data);
    }
    return { valid: true, data: s };
  } else return t === d.date && n === d.date && +r18 == +e ? { valid: true, data: r18 } : { valid: false };
}
var ge = class extends _ {
  _parse(e) {
    let { status: t, ctx: n } = this._processInputParams(e), s = (a, i) => {
      if (Gt(a) || Gt(i)) return y;
      let o = Xt(a.value, i.value);
      return o.valid ? ((Ht(a) || Ht(i)) && t.dirty(), { status: t.value, value: o.data }) : (f(n, { code: c.invalid_intersection_types }), y);
    };
    return n.common.async ? Promise.all([this._def.left._parseAsync({ data: n.data, path: n.path, parent: n }), this._def.right._parseAsync({ data: n.data, path: n.path, parent: n })]).then(([a, i]) => s(a, i)) : s(this._def.left._parseSync({ data: n.data, path: n.path, parent: n }), this._def.right._parseSync({ data: n.data, path: n.path, parent: n }));
  }
};
ge.create = (r18, e, t) => new ge({ left: r18, right: e, typeName: m.ZodIntersection, ...g(t) });
var U = class r12 extends _ {
  _parse(e) {
    let { status: t, ctx: n } = this._processInputParams(e);
    if (n.parsedType !== d.array) return f(n, { code: c.invalid_type, expected: d.array, received: n.parsedType }), y;
    if (n.data.length < this._def.items.length) return f(n, { code: c.too_small, minimum: this._def.items.length, inclusive: true, exact: false, type: "array" }), y;
    !this._def.rest && n.data.length > this._def.items.length && (f(n, { code: c.too_big, maximum: this._def.items.length, inclusive: true, exact: false, type: "array" }), t.dirty());
    let a = [...n.data].map((i, o) => {
      let u = this._def.items[o] || this._def.rest;
      return u ? u._parse(new M(n, i, n.path, o)) : null;
    }).filter((i) => !!i);
    return n.common.async ? Promise.all(a).then((i) => R.mergeArray(t, i)) : R.mergeArray(t, a);
  }
  get items() {
    return this._def.items;
  }
  rest(e) {
    return new r12({ ...this._def, rest: e });
  }
};
U.create = (r18, e) => {
  if (!Array.isArray(r18)) throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  return new U({ items: r18, typeName: m.ZodTuple, rest: null, ...g(e) });
};
var vt = class r13 extends _ {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    let { status: t, ctx: n } = this._processInputParams(e);
    if (n.parsedType !== d.object) return f(n, { code: c.invalid_type, expected: d.object, received: n.parsedType }), y;
    let s = [], a = this._def.keyType, i = this._def.valueType;
    for (let o in n.data) s.push({ key: a._parse(new M(n, o, n.path, o)), value: i._parse(new M(n, n.data[o], n.path, o)), alwaysSet: o in n.data });
    return n.common.async ? R.mergeObjectAsync(t, s) : R.mergeObjectSync(t, s);
  }
  get element() {
    return this._def.valueType;
  }
  static create(e, t, n) {
    return t instanceof _ ? new r13({ keyType: e, valueType: t, typeName: m.ZodRecord, ...g(n) }) : new r13({ keyType: se.create(), valueType: e, typeName: m.ZodRecord, ...g(t) });
  }
};
var Le = class extends _ {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    let { status: t, ctx: n } = this._processInputParams(e);
    if (n.parsedType !== d.map) return f(n, { code: c.invalid_type, expected: d.map, received: n.parsedType }), y;
    let s = this._def.keyType, a = this._def.valueType, i = [...n.data.entries()].map(([o, u], l) => ({ key: s._parse(new M(n, o, n.path, [l, "key"])), value: a._parse(new M(n, u, n.path, [l, "value"])) }));
    if (n.common.async) {
      let o = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (let u of i) {
          let l = await u.key, h = await u.value;
          if (l.status === "aborted" || h.status === "aborted") return y;
          (l.status === "dirty" || h.status === "dirty") && t.dirty(), o.set(l.value, h.value);
        }
        return { status: t.value, value: o };
      });
    } else {
      let o = /* @__PURE__ */ new Map();
      for (let u of i) {
        let l = u.key, h = u.value;
        if (l.status === "aborted" || h.status === "aborted") return y;
        (l.status === "dirty" || h.status === "dirty") && t.dirty(), o.set(l.value, h.value);
      }
      return { status: t.value, value: o };
    }
  }
};
Le.create = (r18, e, t) => new Le({ valueType: e, keyType: r18, typeName: m.ZodMap, ...g(t) });
var Pe = class r14 extends _ {
  _parse(e) {
    let { status: t, ctx: n } = this._processInputParams(e);
    if (n.parsedType !== d.set) return f(n, { code: c.invalid_type, expected: d.set, received: n.parsedType }), y;
    let s = this._def;
    s.minSize !== null && n.data.size < s.minSize.value && (f(n, { code: c.too_small, minimum: s.minSize.value, type: "set", inclusive: true, exact: false, message: s.minSize.message }), t.dirty()), s.maxSize !== null && n.data.size > s.maxSize.value && (f(n, { code: c.too_big, maximum: s.maxSize.value, type: "set", inclusive: true, exact: false, message: s.maxSize.message }), t.dirty());
    let a = this._def.valueType;
    function i(u) {
      let l = /* @__PURE__ */ new Set();
      for (let h of u) {
        if (h.status === "aborted") return y;
        h.status === "dirty" && t.dirty(), l.add(h.value);
      }
      return { status: t.value, value: l };
    }
    let o = [...n.data.values()].map((u, l) => a._parse(new M(n, u, n.path, l)));
    return n.common.async ? Promise.all(o).then((u) => i(u)) : i(o);
  }
  min(e, t) {
    return new r14({ ...this._def, minSize: { value: e, message: p.toString(t) } });
  }
  max(e, t) {
    return new r14({ ...this._def, maxSize: { value: e, message: p.toString(t) } });
  }
  size(e, t) {
    return this.min(e, t).max(e, t);
  }
  nonempty(e) {
    return this.min(1, e);
  }
};
Pe.create = (r18, e) => new Pe({ valueType: r18, minSize: null, maxSize: null, typeName: m.ZodSet, ...g(e) });
var xt = class r15 extends _ {
  constructor() {
    super(...arguments), this.validate = this.implement;
  }
  _parse(e) {
    let { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== d.function) return f(t, { code: c.invalid_type, expected: d.function, received: t.parsedType }), y;
    function n(o, u) {
      return mt({ data: o, path: t.path, errorMaps: [t.common.contextualErrorMap, t.schemaErrorMap, pt(), je].filter((l) => !!l), issueData: { code: c.invalid_arguments, argumentsError: u } });
    }
    function s(o, u) {
      return mt({ data: o, path: t.path, errorMaps: [t.common.contextualErrorMap, t.schemaErrorMap, pt(), je].filter((l) => !!l), issueData: { code: c.invalid_return_type, returnTypeError: u } });
    }
    let a = { errorMap: t.common.contextualErrorMap }, i = t.data;
    if (this._def.returns instanceof ie) {
      let o = this;
      return j(async function(...u) {
        let l = new P([]), h = await o._def.args.parseAsync(u, a).catch((S) => {
          throw l.addIssue(n(u, S)), l;
        }), v22 = await Reflect.apply(i, this, h);
        return await o._def.returns._def.type.parseAsync(v22, a).catch((S) => {
          throw l.addIssue(s(v22, S)), l;
        });
      });
    } else {
      let o = this;
      return j(function(...u) {
        let l = o._def.args.safeParse(u, a);
        if (!l.success) throw new P([n(u, l.error)]);
        let h = Reflect.apply(i, this, l.data), v22 = o._def.returns.safeParse(h, a);
        if (!v22.success) throw new P([s(h, v22.error)]);
        return v22.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...e) {
    return new r15({ ...this._def, args: U.create(e).rest(Y.create()) });
  }
  returns(e) {
    return new r15({ ...this._def, returns: e });
  }
  implement(e) {
    return this.parse(e);
  }
  strictImplement(e) {
    return this.parse(e);
  }
  static create(e, t, n) {
    return new r15({ args: e || U.create([]).rest(Y.create()), returns: t || Y.create(), typeName: m.ZodFunction, ...g(n) });
  }
};
var _e2 = class extends _ {
  get schema() {
    return this._def.getter();
  }
  _parse(e) {
    let { ctx: t } = this._processInputParams(e);
    return this._def.getter()._parse({ data: t.data, path: t.path, parent: t });
  }
};
_e2.create = (r18, e) => new _e2({ getter: r18, typeName: m.ZodLazy, ...g(e) });
var ve = class extends _ {
  _parse(e) {
    if (e.data !== this._def.value) {
      let t = this._getOrReturnCtx(e);
      return f(t, { received: t.data, code: c.invalid_literal, expected: this._def.value }), y;
    }
    return { status: "valid", value: e.data };
  }
  get value() {
    return this._def.value;
  }
};
ve.create = (r18, e) => new ve({ value: r18, typeName: m.ZodLiteral, ...g(e) });
function Dr(r18, e) {
  return new xe({ values: r18, typeName: m.ZodEnum, ...g(e) });
}
var xe = class r16 extends _ {
  constructor() {
    super(...arguments), Xe.set(this, void 0);
  }
  _parse(e) {
    if (typeof e.data != "string") {
      let t = this._getOrReturnCtx(e), n = this._def.values;
      return f(t, { expected: w.joinValues(n), received: t.parsedType, code: c.invalid_type }), y;
    }
    if (gt(this, Xe, "f") || Zr(this, Xe, new Set(this._def.values), "f"), !gt(this, Xe, "f").has(e.data)) {
      let t = this._getOrReturnCtx(e), n = this._def.values;
      return f(t, { received: t.data, code: c.invalid_enum_value, options: n }), y;
    }
    return j(e.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    let e = {};
    for (let t of this._def.values) e[t] = t;
    return e;
  }
  get Values() {
    let e = {};
    for (let t of this._def.values) e[t] = t;
    return e;
  }
  get Enum() {
    let e = {};
    for (let t of this._def.values) e[t] = t;
    return e;
  }
  extract(e, t = this._def) {
    return r16.create(e, { ...this._def, ...t });
  }
  exclude(e, t = this._def) {
    return r16.create(this.options.filter((n) => !e.includes(n)), { ...this._def, ...t });
  }
};
Xe = /* @__PURE__ */ new WeakMap();
xe.create = Dr;
var we = class extends _ {
  constructor() {
    super(...arguments), Ye.set(this, void 0);
  }
  _parse(e) {
    let t = w.getValidEnumValues(this._def.values), n = this._getOrReturnCtx(e);
    if (n.parsedType !== d.string && n.parsedType !== d.number) {
      let s = w.objectValues(t);
      return f(n, { expected: w.joinValues(s), received: n.parsedType, code: c.invalid_type }), y;
    }
    if (gt(this, Ye, "f") || Zr(this, Ye, new Set(w.getValidEnumValues(this._def.values)), "f"), !gt(this, Ye, "f").has(e.data)) {
      let s = w.objectValues(t);
      return f(n, { received: n.data, code: c.invalid_enum_value, options: s }), y;
    }
    return j(e.data);
  }
  get enum() {
    return this._def.values;
  }
};
Ye = /* @__PURE__ */ new WeakMap();
we.create = (r18, e) => new we({ values: r18, typeName: m.ZodNativeEnum, ...g(e) });
var ie = class extends _ {
  unwrap() {
    return this._def.type;
  }
  _parse(e) {
    let { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== d.promise && t.common.async === false) return f(t, { code: c.invalid_type, expected: d.promise, received: t.parsedType }), y;
    let n = t.parsedType === d.promise ? t.data : Promise.resolve(t.data);
    return j(n.then((s) => this._def.type.parseAsync(s, { path: t.path, errorMap: t.common.contextualErrorMap })));
  }
};
ie.create = (r18, e) => new ie({ type: r18, typeName: m.ZodPromise, ...g(e) });
var Z = class extends _ {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === m.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(e) {
    let { status: t, ctx: n } = this._processInputParams(e), s = this._def.effect || null, a = { addIssue: (i) => {
      f(n, i), i.fatal ? t.abort() : t.dirty();
    }, get path() {
      return n.path;
    } };
    if (a.addIssue = a.addIssue.bind(a), s.type === "preprocess") {
      let i = s.transform(n.data, a);
      if (n.common.async) return Promise.resolve(i).then(async (o) => {
        if (t.value === "aborted") return y;
        let u = await this._def.schema._parseAsync({ data: o, path: n.path, parent: n });
        return u.status === "aborted" ? y : u.status === "dirty" || t.value === "dirty" ? Re(u.value) : u;
      });
      {
        if (t.value === "aborted") return y;
        let o = this._def.schema._parseSync({ data: i, path: n.path, parent: n });
        return o.status === "aborted" ? y : o.status === "dirty" || t.value === "dirty" ? Re(o.value) : o;
      }
    }
    if (s.type === "refinement") {
      let i = (o) => {
        let u = s.refinement(o, a);
        if (n.common.async) return Promise.resolve(u);
        if (u instanceof Promise) throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        return o;
      };
      if (n.common.async === false) {
        let o = this._def.schema._parseSync({ data: n.data, path: n.path, parent: n });
        return o.status === "aborted" ? y : (o.status === "dirty" && t.dirty(), i(o.value), { status: t.value, value: o.value });
      } else return this._def.schema._parseAsync({ data: n.data, path: n.path, parent: n }).then((o) => o.status === "aborted" ? y : (o.status === "dirty" && t.dirty(), i(o.value).then(() => ({ status: t.value, value: o.value }))));
    }
    if (s.type === "transform") if (n.common.async === false) {
      let i = this._def.schema._parseSync({ data: n.data, path: n.path, parent: n });
      if (!Je(i)) return i;
      let o = s.transform(i.value, a);
      if (o instanceof Promise) throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
      return { status: t.value, value: o };
    } else return this._def.schema._parseAsync({ data: n.data, path: n.path, parent: n }).then((i) => Je(i) ? Promise.resolve(s.transform(i.value, a)).then((o) => ({ status: t.value, value: o })) : i);
    w.assertNever(s);
  }
};
Z.create = (r18, e, t) => new Z({ schema: r18, typeName: m.ZodEffects, effect: e, ...g(t) });
Z.createWithPreprocess = (r18, e, t) => new Z({ schema: e, effect: { type: "preprocess", transform: r18 }, typeName: m.ZodEffects, ...g(t) });
var z = class extends _ {
  _parse(e) {
    return this._getType(e) === d.undefined ? j(void 0) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
};
z.create = (r18, e) => new z({ innerType: r18, typeName: m.ZodOptional, ...g(e) });
var $ = class extends _ {
  _parse(e) {
    return this._getType(e) === d.null ? j(null) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
};
$.create = (r18, e) => new $({ innerType: r18, typeName: m.ZodNullable, ...g(e) });
var be = class extends _ {
  _parse(e) {
    let { ctx: t } = this._processInputParams(e), n = t.data;
    return t.parsedType === d.undefined && (n = this._def.defaultValue()), this._def.innerType._parse({ data: n, path: t.path, parent: t });
  }
  removeDefault() {
    return this._def.innerType;
  }
};
be.create = (r18, e) => new be({ innerType: r18, typeName: m.ZodDefault, defaultValue: typeof e.default == "function" ? e.default : () => e.default, ...g(e) });
var Se = class extends _ {
  _parse(e) {
    let { ctx: t } = this._processInputParams(e), n = { ...t, common: { ...t.common, issues: [] } }, s = this._def.innerType._parse({ data: n.data, path: n.path, parent: { ...n } });
    return yt(s) ? s.then((a) => ({ status: "valid", value: a.status === "valid" ? a.value : this._def.catchValue({ get error() {
      return new P(n.common.issues);
    }, input: n.data }) })) : { status: "valid", value: s.status === "valid" ? s.value : this._def.catchValue({ get error() {
      return new P(n.common.issues);
    }, input: n.data }) };
  }
  removeCatch() {
    return this._def.innerType;
  }
};
Se.create = (r18, e) => new Se({ innerType: r18, typeName: m.ZodCatch, catchValue: typeof e.catch == "function" ? e.catch : () => e.catch, ...g(e) });
var Ze = class extends _ {
  _parse(e) {
    if (this._getType(e) !== d.nan) {
      let n = this._getOrReturnCtx(e);
      return f(n, { code: c.invalid_type, expected: d.nan, received: n.parsedType }), y;
    }
    return { status: "valid", value: e.data };
  }
};
Ze.create = (r18) => new Ze({ typeName: m.ZodNaN, ...g(r18) });
var ls = Symbol("zod_brand");
var Qe = class extends _ {
  _parse(e) {
    let { ctx: t } = this._processInputParams(e), n = t.data;
    return this._def.type._parse({ data: n, path: t.path, parent: t });
  }
  unwrap() {
    return this._def.type;
  }
};
var Ke = class r17 extends _ {
  _parse(e) {
    let { status: t, ctx: n } = this._processInputParams(e);
    if (n.common.async) return (async () => {
      let a = await this._def.in._parseAsync({ data: n.data, path: n.path, parent: n });
      return a.status === "aborted" ? y : a.status === "dirty" ? (t.dirty(), Re(a.value)) : this._def.out._parseAsync({ data: a.value, path: n.path, parent: n });
    })();
    {
      let s = this._def.in._parseSync({ data: n.data, path: n.path, parent: n });
      return s.status === "aborted" ? y : s.status === "dirty" ? (t.dirty(), { status: "dirty", value: s.value }) : this._def.out._parseSync({ data: s.value, path: n.path, parent: n });
    }
  }
  static create(e, t) {
    return new r17({ in: e, out: t, typeName: m.ZodPipeline });
  }
};
var ke = class extends _ {
  _parse(e) {
    let t = this._def.innerType._parse(e);
    return Je(t) && (t.value = Object.freeze(t.value)), t;
  }
  unwrap() {
    return this._def.innerType;
  }
};
ke.create = (r18, e) => new ke({ innerType: r18, typeName: m.ZodReadonly, ...g(e) });
function Br(r18, e = {}, t) {
  return r18 ? ae.create().superRefine((n, s) => {
    var a, i;
    if (!r18(n)) {
      let o = typeof e == "function" ? e(n) : typeof e == "string" ? { message: e } : e, u = (i = (a = o.fatal) !== null && a !== void 0 ? a : t) !== null && i !== void 0 ? i : true, l = typeof o == "string" ? { message: o } : o;
      s.addIssue({ code: "custom", ...l, fatal: u });
    }
  }) : ae.create();
}
var cs = { object: N.lazycreate };
var m;
(function(r18) {
  r18.ZodString = "ZodString", r18.ZodNumber = "ZodNumber", r18.ZodNaN = "ZodNaN", r18.ZodBigInt = "ZodBigInt", r18.ZodBoolean = "ZodBoolean", r18.ZodDate = "ZodDate", r18.ZodSymbol = "ZodSymbol", r18.ZodUndefined = "ZodUndefined", r18.ZodNull = "ZodNull", r18.ZodAny = "ZodAny", r18.ZodUnknown = "ZodUnknown", r18.ZodNever = "ZodNever", r18.ZodVoid = "ZodVoid", r18.ZodArray = "ZodArray", r18.ZodObject = "ZodObject", r18.ZodUnion = "ZodUnion", r18.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", r18.ZodIntersection = "ZodIntersection", r18.ZodTuple = "ZodTuple", r18.ZodRecord = "ZodRecord", r18.ZodMap = "ZodMap", r18.ZodSet = "ZodSet", r18.ZodFunction = "ZodFunction", r18.ZodLazy = "ZodLazy", r18.ZodLiteral = "ZodLiteral", r18.ZodEnum = "ZodEnum", r18.ZodEffects = "ZodEffects", r18.ZodNativeEnum = "ZodNativeEnum", r18.ZodOptional = "ZodOptional", r18.ZodNullable = "ZodNullable", r18.ZodDefault = "ZodDefault", r18.ZodCatch = "ZodCatch", r18.ZodPromise = "ZodPromise", r18.ZodBranded = "ZodBranded", r18.ZodPipeline = "ZodPipeline", r18.ZodReadonly = "ZodReadonly";
})(m || (m = {}));
var fs = (r18, e = { message: `Input not instance of ${r18.name}` }) => Br((t) => t instanceof r18, e);
var Fr = se.create;
var Ur = ce.create;
var ds = Ze.create;
var hs = fe.create;
var $r = de.create;
var ps = he.create;
var ms = Ie.create;
var ys = pe.create;
var gs = me.create;
var _s2 = ae.create;
var vs = Y.create;
var xs = D.create;
var ws = Ne.create;
var bs = J.create;
var Ss = N.create;
var ks = N.strictCreate;
var Ts = ye.create;
var Os = _t.create;
var Es = ge.create;
var As = U.create;
var Cs = vt.create;
var Rs = Le.create;
var js = Pe.create;
var Is = xt.create;
var Ns = _e2.create;
var Ls = ve.create;
var Ps = xe.create;
var Zs = we.create;
var Ws = ie.create;
var Lr = Z.create;
var zs = z.create;
var Ms = $.create;
var Ds = Z.createWithPreprocess;
var Bs = Ke.create;
var Fs = () => Fr().optional();
var Us = () => Ur().optional();
var $s = () => $r().optional();
var Vs = { string: (r18) => se.create({ ...r18, coerce: true }), number: (r18) => ce.create({ ...r18, coerce: true }), boolean: (r18) => de.create({ ...r18, coerce: true }), bigint: (r18) => fe.create({ ...r18, coerce: true }), date: (r18) => he.create({ ...r18, coerce: true }) };
var qs = y;
var b = Object.freeze({ __proto__: null, defaultErrorMap: je, setErrorMap: qn, getErrorMap: pt, makeIssue: mt, EMPTY_PATH: Gn, addIssueToContext: f, ParseStatus: R, INVALID: y, DIRTY: Re, OK: j, isAborted: Gt, isDirty: Ht, isValid: Je, isAsync: yt, get util() {
  return w;
}, get objectUtil() {
  return qt;
}, ZodParsedType: d, getParsedType: ne, ZodType: _, datetimeRegex: Mr, ZodString: se, ZodNumber: ce, ZodBigInt: fe, ZodBoolean: de, ZodDate: he, ZodSymbol: Ie, ZodUndefined: pe, ZodNull: me, ZodAny: ae, ZodUnknown: Y, ZodNever: D, ZodVoid: Ne, ZodArray: J, ZodObject: N, ZodUnion: ye, ZodDiscriminatedUnion: _t, ZodIntersection: ge, ZodTuple: U, ZodRecord: vt, ZodMap: Le, ZodSet: Pe, ZodFunction: xt, ZodLazy: _e2, ZodLiteral: ve, ZodEnum: xe, ZodNativeEnum: we, ZodPromise: ie, ZodEffects: Z, ZodTransformer: Z, ZodOptional: z, ZodNullable: $, ZodDefault: be, ZodCatch: Se, ZodNaN: Ze, BRAND: ls, ZodBranded: Qe, ZodPipeline: Ke, ZodReadonly: ke, custom: Br, Schema: _, ZodSchema: _, late: cs, get ZodFirstPartyTypeKind() {
  return m;
}, coerce: Vs, any: _s2, array: bs, bigint: hs, boolean: $r, date: ps, discriminatedUnion: Os, effect: Lr, enum: Ps, function: Is, instanceof: fs, intersection: Es, lazy: Ns, literal: Ls, map: Rs, nan: ds, nativeEnum: Zs, never: xs, null: gs, nullable: Ms, number: Ur, object: Ss, oboolean: $s, onumber: Us, optional: zs, ostring: Fs, pipeline: Bs, preprocess: Ds, promise: Ws, record: Cs, set: js, strictObject: ks, string: Fr, symbol: ms, transformer: Lr, tuple: As, undefined: ys, union: Ts, unknown: vs, void: ws, NEVER: qs, ZodIssueCode: c, quotelessJson: Vn, ZodError: P });
var Vr = b.object({ url: b.string(), address: b.string() });
var qr = b.object({ url: b.string(), address: b.string(), ttl: b.coerce.number() });
var Gr = b.function().args(b.string(), b.string()).returns(b.promise(b.string()));
var Hr = b.function().args(b.string()).returns(b.promise(Vr.nullish()));
var Xr = b.function().args(b.string(), Vr, b.number()).returns(b.promise(b.any()));
var We = b.function().args(b.string()).returns(b.promise(qr.nullish()));
var ze = b.function().args(b.string(), b.string(), b.number()).returns(b.promise(b.any()));
var Te = b.function().args(b.string()).returns(b.promise(qr));
var Yr = Te;
function Jr({ loadProcessScheduler: r18, loadScheduler: e, cache: t, followRedirects: n, checkForRedirect: s }) {
  r18 = Yr.implement(r18), e = Te.implement(e), s = Gr.implement(s);
  let a = Hr.implement(t.getByProcess), i = We.implement(t.getByOwner), o = Xr.implement(t.setByProcess), u = ze.implement(t.setByOwner);
  return (l, h) => a(l).then(async (v22) => v22 || Promise.resolve().then(async () => {
    if (h) {
      let T32 = await i(h);
      return T32 || e(h).then((S) => (u(S.address, S.url, S.ttl), S));
    }
    return r18(l);
  }).then(async (T32) => {
    let S = T32.url;
    n && (S = await s(T32.url, l));
    let B22 = { url: He(S), address: T32.address };
    return await o(l, B22, T32.ttl), B22;
  }));
}
function Qr({ loadScheduler: r18, cache: e }) {
  r18 = Te.implement(r18);
  let t = We.implement(e.getByOwner), n = ze.implement(e.setByOwner);
  return (s) => t(s).then((a) => a ? { url: a.url } : r18(s).then((i) => n(s, i.url, i.ttl).then(() => ({ url: He(i.url) }))).catch((i) => {
    if (!(i instanceof H)) throw i;
  }));
}
function Kr({ loadScheduler: r18, cache: e }) {
  r18 = Te.implement(r18);
  let t = We.implement(e.getByOwner), n = ze.implement(e.setByOwner);
  return (s) => t(s).then((a) => a ? true : r18(s).then((i) => n(s, i.url, i.ttl)).then(() => true).catch((i) => {
    if (i instanceof H) return false;
    throw i;
  }));
}
var Gs = 100;
var Hs = "https://arweave.net/graphql";
var Xs = 0;
var Ys = 300;
var Js = false;
function en({ cacheSize: r18 = Gs, followRedirects: e = Js, GRAPHQL_URL: t = Hs, GRAPHQL_MAX_RETRIES: n = Xs, GRAPHQL_RETRY_BACKOFF: s = Ys } = {}) {
  let a = Er({ size: r18 }), i = Ft({ fetch, GRAPHQL_URL: t, GRAPHQL_MAX_RETRIES: n, GRAPHQL_RETRY_BACKOFF: s }), o = { getByProcess: Ar({ cache: a }), getByOwner: Rr({ cache: a }), setByProcess: Cr({ cache: a }), setByOwner: jr({ cache: a }) }, u = Jr({ loadProcessScheduler: br({ fetch, GRAPHQL_URL: t, GRAPHQL_MAX_RETRIES: n, GRAPHQL_RETRY_BACKOFF: s }), loadScheduler: i, cache: o, followRedirects: e, checkForRedirect: Ir({ fetch }) }), l = Kr({ loadScheduler: i, cache: o }), h = Qr({ loadScheduler: i, cache: o });
  return { locate: u, validate: l, raw: h };
}
var Qs = globalThis.GRAPHQL_URL || void 0;
var Ks = globalThis.SCHEDULER_UTILS_CACHE_SIZE || void 0;
var ea = globalThis.SCHEDULER_UTILS_FOLLOW_REDIRECTS === "true" || void 0;
var ta = globalThis.GRAPHQL_MAX_RETRIES || void 0;
var ra = globalThis.GRAPHQL_RETRY_BACKOFF || void 0;
var { locate: el, validate: tl, raw: rl } = en({ GRAPHQL_URL: Qs, cacheSize: Ks, followRedirects: ea, GRAPHQL_MAX_RETRIES: ta, GRAPHQL_RETRY_BACKOFF: ra });
var Async = (fork) => ({
  fork,
  toPromise: () => new Promise((resolve, reject3) => fork(reject3, resolve)),
  map: (fn2) => Async((rej, res) => fork(rej, (x32) => res(fn2(x32)))),
  bimap: (f2, g2) => Async(
    (rej, res) => fork(
      (x32) => rej(f2(x32)),
      (x32) => res(g2(x32))
    )
  ),
  chain: (fn2) => Async((rej, res) => fork(rej, (x32) => fn2(x32).fork(rej, res))),
  bichain: (f2, g2) => Async(
    (rej, res) => fork(
      (x32) => f2(x32).fork(rej, res),
      (x32) => g2(x32).fork(rej, res)
    )
  ),
  fold: (f2, g2) => Async(
    (rej, res) => fork(
      (x32) => f2(x32).fork(rej, res),
      (x32) => g2(x32).fork(rej, res)
    )
  )
});
var of = (x32) => Async((rej, res) => res(x32));
var Resolved = (x32) => Async((rej, res) => res(x32));
var Rejected = (x32) => Async((rej, res) => rej(x32));
var fromPromise = (f2) => (...args) => Async(
  (rej, res) => f2(...args).then(res).catch(rej)
);
function deployMessageWith({ fetch: fetch2, MU_URL: MU_URL2, logger: _logger }) {
  const logger = _logger.child("deployMessage");
  return (args) => {
    return of(args).chain(
      fromPromise(({ processId, data, tags, anchor, signer }) => (
        /**
         * The processId is the target set on the data item
         * See https://specs.g8way.io/?tx=xwOgX-MmqN5_-Ny_zNu2A8o-PnTGsoRb_3FrtiMAkuw
         */
        signer({ data, tags, target: processId, anchor })
      ))
    ).chain(
      (signedDataItem) => of(signedDataItem).chain(fromPromise(
        async (signedDataItem2) => fetch2(
          MU_URL2,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/octet-stream",
              Accept: "application/json"
            },
            redirect: "follow",
            body: signedDataItem2.raw
          }
        )
      )).bichain(
        (err) => Rejected(new Error(`Error while communicating with MU: ${JSON.stringify(err)}`)),
        fromPromise(
          async (res) => {
            if (res.ok) return res.json();
            throw new Error(`${res.status}: ${await res.text()}`);
          }
        )
      ).bimap(
        logger.tap("Error encountered when writing message via MU"),
        logger.tap("Successfully wrote message via MU")
      ).map((res) => ({ res, messageId: signedDataItem.id }))
    ).toPromise();
  };
}
function deployProcessWith({ fetch: fetch2, MU_URL: MU_URL2, logger: _logger }) {
  const logger = _logger.child("deployProcess");
  return (args) => {
    return of(args).chain(fromPromise(({ data, tags, signer }) => signer({ data, tags }))).chain(
      (signedDataItem) => of(signedDataItem).chain(fromPromise(
        async (signedDataItem2) => fetch2(
          MU_URL2,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/octet-stream",
              Accept: "application/json"
            },
            redirect: "follow",
            body: signedDataItem2.raw
          }
        )
      )).bichain(
        (err) => Rejected(new Error(`Error while communicating with MU: ${JSON.stringify(err)}`)),
        fromPromise(
          async (res) => {
            if (res.ok) return res.json();
            throw new Error(`${res.status}: ${await res.text()}`);
          }
        )
      ).bimap(
        logger.tap("Error encountered when deploying process via MU"),
        logger.tap("Successfully deployed process via MU")
      ).map((res) => ({ res, processId: signedDataItem.id }))
    ).toPromise();
  };
}
function deployMonitorWith({ fetch: fetch2, MU_URL: MU_URL2, logger: _logger }) {
  const logger = _logger.child("deployMonitor");
  return (args) => of(args).chain(
    fromPromise(({ processId, data, tags, anchor, signer }) => (
      /**
       * The processId is the target set on the data item
       */
      signer({ data, tags, target: processId, anchor })
    ))
  ).chain(
    (signedDataItem) => of(signedDataItem).chain(fromPromise(
      async (signedDataItem2) => fetch2(
        MU_URL2 + "/monitor/" + args.processId,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/octet-stream",
            Accept: "application/json"
          },
          redirect: "follow",
          body: signedDataItem2.raw
        }
      )
    )).bichain(
      (err) => Rejected(new Error(`Error while communicating with MU: ${JSON.stringify(err)}`)),
      fromPromise(
        async (res) => {
          if (res.ok) return { ok: true };
          throw new Error(`${res.status}: ${await res.text()}`);
        }
      )
    ).bimap(
      logger.tap("Error encountered when subscribing to process via MU"),
      logger.tap("Successfully subscribed to process via MU")
    ).map((res) => ({ res, messageId: signedDataItem.id }))
  ).toPromise();
}
function deployUnmonitorWith({ fetch: fetch2, MU_URL: MU_URL2, logger: _logger }) {
  const logger = _logger.child("deployUnmonitor");
  return (args) => of(args).chain(
    fromPromise(({ processId, data, tags, anchor, signer }) => (
      /**
       * The processId is the target set on the data item
       */
      signer({ data, tags, target: processId, anchor })
    ))
  ).chain(
    (signedDataItem) => of(signedDataItem).chain(fromPromise(
      async (signedDataItem2) => fetch2(
        MU_URL2 + "/monitor/" + args.processId,
        {
          method: "DELETE",
          headers: {
            "Content-Type": "application/octet-stream",
            Accept: "application/json"
          },
          redirect: "follow",
          body: signedDataItem2.raw
        }
      )
    )).bichain(
      (err) => Rejected(new Error(`Error while communicating with MU: ${JSON.stringify(err)}`)),
      fromPromise(
        async (res) => {
          if (res.ok) return { ok: true };
          throw new Error(`${res.status}: ${await res.text()}`);
        }
      )
    ).bimap(
      logger.tap("Error encountered when unsubscribing to process via MU"),
      logger.tap("Successfully unsubscribed to process via MU")
    ).map((res) => ({ res, messageId: signedDataItem.id }))
  ).toPromise();
}
function deployAssignWith({ fetch: fetch2, MU_URL: MU_URL2, logger: _logger }) {
  const logger = _logger.child("deployAssign");
  return (args) => {
    return of(args).chain(fromPromise(
      async ({ process: process2, message: message2, baseLayer, exclude }) => fetch2(
        `${MU_URL2}?process-id=${process2}&assign=${message2}${baseLayer ? "&base-layer" : ""}${exclude ? "&exclude=" + exclude.join(",") : ""}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/octet-stream",
            Accept: "application/json"
          }
        }
      )
    )).bichain(
      (err) => Rejected(new Error(`Error while communicating with MU: ${JSON.stringify(err)}`)),
      fromPromise(
        async (res) => {
          if (res.ok) return res.json();
          throw new Error(`${res.status}: ${await res.text()}`);
        }
      )
    ).bimap(
      logger.tap("Error encountered when writing assignment via MU"),
      logger.tap("Successfully wrote assignment via MU")
    ).map((res) => ({ res, assignmentId: res.id })).toPromise();
  };
}
function dryrunFetchWith({ fetch: fetch2, CU_URL: CU_URL2, logger }) {
  return (msg) => of(msg).map(logger.tap("posting dryrun request to CU")).chain(fromPromise((msg2) => fetch2(`${CU_URL2}/dry-run?process-id=${msg2.Target}`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    redirect: "follow",
    body: JSON.stringify(msg2)
  }).then((res) => res.json()))).toPromise();
}
function loadResultWith({ fetch: fetch2, CU_URL: CU_URL2, logger }) {
  return ({ id, processId }) => {
    return of(`${CU_URL2}/result/${id}?process-id=${processId}`).map(logger.tap("fetching message result from CU")).chain(fromPromise(
      async (url) => fetch2(url, {
        method: "GET",
        headers: {
          Accept: "application/json"
        },
        redirect: "follow"
      }).then((res) => res.json())
    )).toPromise();
  };
}
function queryResultsWith({ fetch: fetch2, CU_URL: CU_URL2, logger }) {
  return ({ process: process2, from, to, sort, limit }) => {
    const target = new URL(`${CU_URL2}/results/${process2}`);
    const params = new URLSearchParams(target.search);
    if (from) {
      params.append("from", from);
    }
    if (to) {
      params.append("to", to);
    }
    if (sort) {
      params.append("sort", sort);
    }
    if (limit) {
      params.append("limit", limit);
    }
    target.search = params;
    return of(target.toString()).map(logger.tap("fetching message result from CU")).chain(fromPromise(
      async (url) => fetch2(url, {
        method: "GET",
        headers: {
          Accept: "application/json"
        },
        redirect: "follow"
      }).then((res) => res.json())
    )).toPromise();
  };
}
var import_lru_map = __toESM2(require_lru_map(), 1);
var processMetaCache;
var createProcessMetaCache = ({ MAX_SIZE }) => {
  if (processMetaCache) return processMetaCache;
  processMetaCache = new import_lru_map.default(MAX_SIZE);
  return processMetaCache;
};
var loadProcessMetaWith = ({ logger, fetch: fetch2, cache = processMetaCache }) => {
  return async ({ suUrl, processId }) => {
    if (cache.has(processId)) return cache.get(processId);
    return fetch2(`${suUrl}/processes/${processId}`, { method: "GET", redirect: "follow" }).then(async (res) => {
      if (res.ok) return res.json();
      logger("Error Encountered when fetching process meta from SU '%s' for process '%s'", suUrl, processId);
      throw new Error(`Encountered Error fetching scheduled messages from Scheduler Unit: ${res.status}: ${await res.text()}`);
    }).then((meta) => {
      logger("Caching process meta for process '%s'", processId);
      cache.set(processId, { tags: meta.tags });
      return meta;
    });
  };
};
var F2 = function() {
  return false;
};
var F_default = F2;
var T = function() {
  return true;
};
var T_default = T;
var __default = {
  "@@functional/placeholder": true
};
function _isPlaceholder(a) {
  return a != null && typeof a === "object" && a["@@functional/placeholder"] === true;
}
function _curry1(fn2) {
  return function f1(a) {
    if (arguments.length === 0 || _isPlaceholder(a)) {
      return f1;
    } else {
      return fn2.apply(this, arguments);
    }
  };
}
function _curry2(fn2) {
  return function f2(a, b2) {
    switch (arguments.length) {
      case 0:
        return f2;
      case 1:
        return _isPlaceholder(a) ? f2 : _curry1(function(_b2) {
          return fn2(a, _b2);
        });
      default:
        return _isPlaceholder(a) && _isPlaceholder(b2) ? f2 : _isPlaceholder(a) ? _curry1(function(_a7) {
          return fn2(_a7, b2);
        }) : _isPlaceholder(b2) ? _curry1(function(_b2) {
          return fn2(a, _b2);
        }) : fn2(a, b2);
    }
  };
}
function _concat(set1, set2) {
  set1 = set1 || [];
  set2 = set2 || [];
  var idx;
  var len1 = set1.length;
  var len2 = set2.length;
  var result2 = [];
  idx = 0;
  while (idx < len1) {
    result2[result2.length] = set1[idx];
    idx += 1;
  }
  idx = 0;
  while (idx < len2) {
    result2[result2.length] = set2[idx];
    idx += 1;
  }
  return result2;
}
function _arity(n, fn2) {
  switch (n) {
    case 0:
      return function() {
        return fn2.apply(this, arguments);
      };
    case 1:
      return function(a0) {
        return fn2.apply(this, arguments);
      };
    case 2:
      return function(a0, a1) {
        return fn2.apply(this, arguments);
      };
    case 3:
      return function(a0, a1, a2) {
        return fn2.apply(this, arguments);
      };
    case 4:
      return function(a0, a1, a2, a3) {
        return fn2.apply(this, arguments);
      };
    case 5:
      return function(a0, a1, a2, a3, a4) {
        return fn2.apply(this, arguments);
      };
    case 6:
      return function(a0, a1, a2, a3, a4, a5) {
        return fn2.apply(this, arguments);
      };
    case 7:
      return function(a0, a1, a2, a3, a4, a5, a6) {
        return fn2.apply(this, arguments);
      };
    case 8:
      return function(a0, a1, a2, a3, a4, a5, a6, a7) {
        return fn2.apply(this, arguments);
      };
    case 9:
      return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {
        return fn2.apply(this, arguments);
      };
    case 10:
      return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        return fn2.apply(this, arguments);
      };
    default:
      throw new Error("First argument to _arity must be a non-negative integer no greater than ten");
  }
}
function _curryN(length, received, fn2) {
  return function() {
    var combined = [];
    var argsIdx = 0;
    var left = length;
    var combinedIdx = 0;
    var hasPlaceholder = false;
    while (combinedIdx < received.length || argsIdx < arguments.length) {
      var result2;
      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
        result2 = received[combinedIdx];
      } else {
        result2 = arguments[argsIdx];
        argsIdx += 1;
      }
      combined[combinedIdx] = result2;
      if (!_isPlaceholder(result2)) {
        left -= 1;
      } else {
        hasPlaceholder = true;
      }
      combinedIdx += 1;
    }
    return !hasPlaceholder && left <= 0 ? fn2.apply(this, combined) : _arity(Math.max(0, left), _curryN(length, combined, fn2));
  };
}
var curryN = /* @__PURE__ */ _curry2(function curryN2(length, fn2) {
  if (length === 1) {
    return _curry1(fn2);
  }
  return _arity(length, _curryN(length, [], fn2));
});
var curryN_default = curryN;
function _curry3(fn2) {
  return function f3(a, b2, c2) {
    switch (arguments.length) {
      case 0:
        return f3;
      case 1:
        return _isPlaceholder(a) ? f3 : _curry2(function(_b2, _c3) {
          return fn2(a, _b2, _c3);
        });
      case 2:
        return _isPlaceholder(a) && _isPlaceholder(b2) ? f3 : _isPlaceholder(a) ? _curry2(function(_a7, _c3) {
          return fn2(_a7, b2, _c3);
        }) : _isPlaceholder(b2) ? _curry2(function(_b2, _c3) {
          return fn2(a, _b2, _c3);
        }) : _curry1(function(_c3) {
          return fn2(a, b2, _c3);
        });
      default:
        return _isPlaceholder(a) && _isPlaceholder(b2) && _isPlaceholder(c2) ? f3 : _isPlaceholder(a) && _isPlaceholder(b2) ? _curry2(function(_a7, _b2) {
          return fn2(_a7, _b2, c2);
        }) : _isPlaceholder(a) && _isPlaceholder(c2) ? _curry2(function(_a7, _c3) {
          return fn2(_a7, b2, _c3);
        }) : _isPlaceholder(b2) && _isPlaceholder(c2) ? _curry2(function(_b2, _c3) {
          return fn2(a, _b2, _c3);
        }) : _isPlaceholder(a) ? _curry1(function(_a7) {
          return fn2(_a7, b2, c2);
        }) : _isPlaceholder(b2) ? _curry1(function(_b2) {
          return fn2(a, _b2, c2);
        }) : _isPlaceholder(c2) ? _curry1(function(_c3) {
          return fn2(a, b2, _c3);
        }) : fn2(a, b2, c2);
    }
  };
}
var isArray_default = Array.isArray || function _isArray(val) {
  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === "[object Array]";
};
function _isTransformer(obj) {
  return obj != null && typeof obj["@@transducer/step"] === "function";
}
function _dispatchable(methodNames, transducerCreator, fn2) {
  return function() {
    if (arguments.length === 0) {
      return fn2();
    }
    var obj = arguments[arguments.length - 1];
    if (!isArray_default(obj)) {
      var idx = 0;
      while (idx < methodNames.length) {
        if (typeof obj[methodNames[idx]] === "function") {
          return obj[methodNames[idx]].apply(obj, Array.prototype.slice.call(arguments, 0, -1));
        }
        idx += 1;
      }
      if (_isTransformer(obj)) {
        var transducer = transducerCreator.apply(null, Array.prototype.slice.call(arguments, 0, -1));
        return transducer(obj);
      }
    }
    return fn2.apply(this, arguments);
  };
}
var xfBase_default = {
  init: function() {
    return this.xf["@@transducer/init"]();
  },
  result: function(result2) {
    return this.xf["@@transducer/result"](result2);
  }
};
function _arrayFromIterator(iter) {
  var list = [];
  var next;
  while (!(next = iter.next()).done) {
    list.push(next.value);
  }
  return list;
}
function _includesWith(pred, x32, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    if (pred(x32, list[idx])) {
      return true;
    }
    idx += 1;
  }
  return false;
}
function _functionName(f2) {
  var match = String(f2).match(/^function (\w*)/);
  return match == null ? "" : match[1];
}
function _has(prop3, obj) {
  return Object.prototype.hasOwnProperty.call(obj, prop3);
}
function _objectIs(a, b2) {
  if (a === b2) {
    return a !== 0 || 1 / a === 1 / b2;
  } else {
    return a !== a && b2 !== b2;
  }
}
var objectIs_default = typeof Object.is === "function" ? Object.is : _objectIs;
var toString = Object.prototype.toString;
var _isArguments = /* @__PURE__ */ function() {
  return toString.call(arguments) === "[object Arguments]" ? function _isArguments2(x32) {
    return toString.call(x32) === "[object Arguments]";
  } : function _isArguments2(x32) {
    return _has("callee", x32);
  };
}();
var isArguments_default = _isArguments;
var hasEnumBug = !/* @__PURE__ */ {
  toString: null
}.propertyIsEnumerable("toString");
var nonEnumerableProps = ["constructor", "valueOf", "isPrototypeOf", "toString", "propertyIsEnumerable", "hasOwnProperty", "toLocaleString"];
var hasArgsEnumBug = /* @__PURE__ */ function() {
  "use strict";
  return arguments.propertyIsEnumerable("length");
}();
var contains = function contains2(list, item) {
  var idx = 0;
  while (idx < list.length) {
    if (list[idx] === item) {
      return true;
    }
    idx += 1;
  }
  return false;
};
var keys = typeof Object.keys === "function" && !hasArgsEnumBug ? /* @__PURE__ */ _curry1(function keys2(obj) {
  return Object(obj) !== obj ? [] : Object.keys(obj);
}) : /* @__PURE__ */ _curry1(function keys3(obj) {
  if (Object(obj) !== obj) {
    return [];
  }
  var prop3, nIdx;
  var ks2 = [];
  var checkArgsLength = hasArgsEnumBug && isArguments_default(obj);
  for (prop3 in obj) {
    if (_has(prop3, obj) && (!checkArgsLength || prop3 !== "length")) {
      ks2[ks2.length] = prop3;
    }
  }
  if (hasEnumBug) {
    nIdx = nonEnumerableProps.length - 1;
    while (nIdx >= 0) {
      prop3 = nonEnumerableProps[nIdx];
      if (_has(prop3, obj) && !contains(ks2, prop3)) {
        ks2[ks2.length] = prop3;
      }
      nIdx -= 1;
    }
  }
  return ks2;
});
var keys_default = keys;
var type = /* @__PURE__ */ _curry1(function type2(val) {
  return val === null ? "Null" : val === void 0 ? "Undefined" : Object.prototype.toString.call(val).slice(8, -1);
});
var type_default = type;
function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
  var a = _arrayFromIterator(aIterator);
  var b2 = _arrayFromIterator(bIterator);
  function eq(_a7, _b2) {
    return _equals(_a7, _b2, stackA.slice(), stackB.slice());
  }
  return !_includesWith(function(b3, aItem) {
    return !_includesWith(eq, aItem, b3);
  }, b2, a);
}
function _equals(a, b2, stackA, stackB) {
  if (objectIs_default(a, b2)) {
    return true;
  }
  var typeA = type_default(a);
  if (typeA !== type_default(b2)) {
    return false;
  }
  if (typeof a["fantasy-land/equals"] === "function" || typeof b2["fantasy-land/equals"] === "function") {
    return typeof a["fantasy-land/equals"] === "function" && a["fantasy-land/equals"](b2) && typeof b2["fantasy-land/equals"] === "function" && b2["fantasy-land/equals"](a);
  }
  if (typeof a.equals === "function" || typeof b2.equals === "function") {
    return typeof a.equals === "function" && a.equals(b2) && typeof b2.equals === "function" && b2.equals(a);
  }
  switch (typeA) {
    case "Arguments":
    case "Array":
    case "Object":
      if (typeof a.constructor === "function" && _functionName(a.constructor) === "Promise") {
        return a === b2;
      }
      break;
    case "Boolean":
    case "Number":
    case "String":
      if (!(typeof a === typeof b2 && objectIs_default(a.valueOf(), b2.valueOf()))) {
        return false;
      }
      break;
    case "Date":
      if (!objectIs_default(a.valueOf(), b2.valueOf())) {
        return false;
      }
      break;
    case "Error":
      return a.name === b2.name && a.message === b2.message;
    case "RegExp":
      if (!(a.source === b2.source && a.global === b2.global && a.ignoreCase === b2.ignoreCase && a.multiline === b2.multiline && a.sticky === b2.sticky && a.unicode === b2.unicode)) {
        return false;
      }
      break;
  }
  var idx = stackA.length - 1;
  while (idx >= 0) {
    if (stackA[idx] === a) {
      return stackB[idx] === b2;
    }
    idx -= 1;
  }
  switch (typeA) {
    case "Map":
      if (a.size !== b2.size) {
        return false;
      }
      return _uniqContentEquals(a.entries(), b2.entries(), stackA.concat([a]), stackB.concat([b2]));
    case "Set":
      if (a.size !== b2.size) {
        return false;
      }
      return _uniqContentEquals(a.values(), b2.values(), stackA.concat([a]), stackB.concat([b2]));
    case "Arguments":
    case "Array":
    case "Object":
    case "Boolean":
    case "Number":
    case "String":
    case "Date":
    case "Error":
    case "RegExp":
    case "Int8Array":
    case "Uint8Array":
    case "Uint8ClampedArray":
    case "Int16Array":
    case "Uint16Array":
    case "Int32Array":
    case "Uint32Array":
    case "Float32Array":
    case "Float64Array":
    case "ArrayBuffer":
      break;
    default:
      return false;
  }
  var keysA = keys_default(a);
  if (keysA.length !== keys_default(b2).length) {
    return false;
  }
  var extendedStackA = stackA.concat([a]);
  var extendedStackB = stackB.concat([b2]);
  idx = keysA.length - 1;
  while (idx >= 0) {
    var key = keysA[idx];
    if (!(_has(key, b2) && _equals(b2[key], a[key], extendedStackA, extendedStackB))) {
      return false;
    }
    idx -= 1;
  }
  return true;
}
var equals = /* @__PURE__ */ _curry2(function equals2(a, b2) {
  return _equals(a, b2, [], []);
});
var equals_default = equals;
function _indexOf(list, a, idx) {
  var inf, item;
  if (typeof list.indexOf === "function") {
    switch (typeof a) {
      case "number":
        if (a === 0) {
          inf = 1 / a;
          while (idx < list.length) {
            item = list[idx];
            if (item === 0 && 1 / item === inf) {
              return idx;
            }
            idx += 1;
          }
          return -1;
        } else if (a !== a) {
          while (idx < list.length) {
            item = list[idx];
            if (typeof item === "number" && item !== item) {
              return idx;
            }
            idx += 1;
          }
          return -1;
        }
        return list.indexOf(a, idx);
      case "string":
      case "boolean":
      case "function":
      case "undefined":
        return list.indexOf(a, idx);
      case "object":
        if (a === null) {
          return list.indexOf(a, idx);
        }
    }
  }
  while (idx < list.length) {
    if (equals_default(list[idx], a)) {
      return idx;
    }
    idx += 1;
  }
  return -1;
}
function _includes(a, list) {
  return _indexOf(list, a, 0) >= 0;
}
function _map(fn2, functor) {
  var idx = 0;
  var len = functor.length;
  var result2 = Array(len);
  while (idx < len) {
    result2[idx] = fn2(functor[idx]);
    idx += 1;
  }
  return result2;
}
function _quote(s) {
  var escaped = s.replace(/\\/g, "\\\\").replace(/[\b]/g, "\\b").replace(/\f/g, "\\f").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t").replace(/\v/g, "\\v").replace(/\0/g, "\\0");
  return '"' + escaped.replace(/"/g, '\\"') + '"';
}
var pad = function pad2(n) {
  return (n < 10 ? "0" : "") + n;
};
var _toISOString = typeof Date.prototype.toISOString === "function" ? function _toISOString2(d2) {
  return d2.toISOString();
} : function _toISOString3(d2) {
  return d2.getUTCFullYear() + "-" + pad(d2.getUTCMonth() + 1) + "-" + pad(d2.getUTCDate()) + "T" + pad(d2.getUTCHours()) + ":" + pad(d2.getUTCMinutes()) + ":" + pad(d2.getUTCSeconds()) + "." + (d2.getUTCMilliseconds() / 1e3).toFixed(3).slice(2, 5) + "Z";
};
var toISOString_default = _toISOString;
function _complement(f2) {
  return function() {
    return !f2.apply(this, arguments);
  };
}
function _arrayReduce(reducer, acc, list) {
  var index = 0;
  var length = list.length;
  while (index < length) {
    acc = reducer(acc, list[index]);
    index += 1;
  }
  return acc;
}
function _filter(fn2, list) {
  var idx = 0;
  var len = list.length;
  var result2 = [];
  while (idx < len) {
    if (fn2(list[idx])) {
      result2[result2.length] = list[idx];
    }
    idx += 1;
  }
  return result2;
}
function _isObject(x32) {
  return Object.prototype.toString.call(x32) === "[object Object]";
}
var XFilter = /* @__PURE__ */ function() {
  function XFilter2(f2, xf) {
    this.xf = xf;
    this.f = f2;
  }
  XFilter2.prototype["@@transducer/init"] = xfBase_default.init;
  XFilter2.prototype["@@transducer/result"] = xfBase_default.result;
  XFilter2.prototype["@@transducer/step"] = function(result2, input) {
    return this.f(input) ? this.xf["@@transducer/step"](result2, input) : result2;
  };
  return XFilter2;
}();
function _xfilter(f2) {
  return function(xf) {
    return new XFilter(f2, xf);
  };
}
var filter = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["fantasy-land/filter", "filter"], _xfilter, function(pred, filterable) {
  return _isObject(filterable) ? _arrayReduce(function(acc, key) {
    if (pred(filterable[key])) {
      acc[key] = filterable[key];
    }
    return acc;
  }, {}, keys_default(filterable)) : (
    // else
    _filter(pred, filterable)
  );
}));
var filter_default = filter;
var reject = /* @__PURE__ */ _curry2(function reject2(pred, filterable) {
  return filter_default(_complement(pred), filterable);
});
var reject_default = reject;
function _toString(x32, seen) {
  var recur = function recur2(y2) {
    var xs2 = seen.concat([x32]);
    return _includes(y2, xs2) ? "<Circular>" : _toString(y2, xs2);
  };
  var mapPairs = function(obj, keys4) {
    return _map(function(k2) {
      return _quote(k2) + ": " + recur(obj[k2]);
    }, keys4.slice().sort());
  };
  switch (Object.prototype.toString.call(x32)) {
    case "[object Arguments]":
      return "(function() { return arguments; }(" + _map(recur, x32).join(", ") + "))";
    case "[object Array]":
      return "[" + _map(recur, x32).concat(mapPairs(x32, reject_default(function(k2) {
        return /^\d+$/.test(k2);
      }, keys_default(x32)))).join(", ") + "]";
    case "[object Boolean]":
      return typeof x32 === "object" ? "new Boolean(" + recur(x32.valueOf()) + ")" : x32.toString();
    case "[object Date]":
      return "new Date(" + (isNaN(x32.valueOf()) ? recur(NaN) : _quote(toISOString_default(x32))) + ")";
    case "[object Map]":
      return "new Map(" + recur(Array.from(x32)) + ")";
    case "[object Null]":
      return "null";
    case "[object Number]":
      return typeof x32 === "object" ? "new Number(" + recur(x32.valueOf()) + ")" : 1 / x32 === -Infinity ? "-0" : x32.toString(10);
    case "[object Set]":
      return "new Set(" + recur(Array.from(x32).sort()) + ")";
    case "[object String]":
      return typeof x32 === "object" ? "new String(" + recur(x32.valueOf()) + ")" : _quote(x32);
    case "[object Undefined]":
      return "undefined";
    default:
      if (typeof x32.toString === "function") {
        var repr = x32.toString();
        if (repr !== "[object Object]") {
          return repr;
        }
      }
      return "{" + mapPairs(x32, keys_default(x32)).join(", ") + "}";
  }
}
var toString2 = /* @__PURE__ */ _curry1(function toString3(val) {
  return _toString(val, []);
});
var toString_default = toString2;
var max = /* @__PURE__ */ _curry2(function max2(a, b2) {
  if (a === b2) {
    return b2;
  }
  function safeMax(x32, y2) {
    if (x32 > y2 !== y2 > x32) {
      return y2 > x32 ? y2 : x32;
    }
    return void 0;
  }
  var maxByValue = safeMax(a, b2);
  if (maxByValue !== void 0) {
    return maxByValue;
  }
  var maxByType = safeMax(typeof a, typeof b2);
  if (maxByType !== void 0) {
    return maxByType === typeof a ? a : b2;
  }
  var stringA = toString_default(a);
  var maxByStringValue = safeMax(stringA, toString_default(b2));
  if (maxByStringValue !== void 0) {
    return maxByStringValue === stringA ? a : b2;
  }
  return b2;
});
var max_default = max;
var XMap = /* @__PURE__ */ function() {
  function XMap2(f2, xf) {
    this.xf = xf;
    this.f = f2;
  }
  XMap2.prototype["@@transducer/init"] = xfBase_default.init;
  XMap2.prototype["@@transducer/result"] = xfBase_default.result;
  XMap2.prototype["@@transducer/step"] = function(result2, input) {
    return this.xf["@@transducer/step"](result2, this.f(input));
  };
  return XMap2;
}();
var _xmap = function _xmap2(f2) {
  return function(xf) {
    return new XMap(f2, xf);
  };
};
var xmap_default = _xmap;
var map = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["fantasy-land/map", "map"], xmap_default, function map2(fn2, functor) {
  switch (Object.prototype.toString.call(functor)) {
    case "[object Function]":
      return curryN_default(functor.length, function() {
        return fn2.call(this, functor.apply(this, arguments));
      });
    case "[object Object]":
      return _arrayReduce(function(acc, key) {
        acc[key] = fn2(functor[key]);
        return acc;
      }, {}, keys_default(functor));
    default:
      return _map(fn2, functor);
  }
}));
var map_default = map;
var isInteger_default = Number.isInteger || function _isInteger(n) {
  return n << 0 === n;
};
function _isString(x32) {
  return Object.prototype.toString.call(x32) === "[object String]";
}
function _nth(offset, list) {
  var idx = offset < 0 ? list.length + offset : offset;
  return _isString(list) ? list.charAt(idx) : list[idx];
}
var prop = /* @__PURE__ */ _curry2(function prop2(p2, obj) {
  if (obj == null) {
    return;
  }
  return isInteger_default(p2) ? _nth(p2, obj) : obj[p2];
});
var prop_default = prop;
var pluck = /* @__PURE__ */ _curry2(function pluck2(p2, list) {
  return map_default(prop_default(p2), list);
});
var pluck_default = pluck;
var _isArrayLike = /* @__PURE__ */ _curry1(function isArrayLike(x32) {
  if (isArray_default(x32)) {
    return true;
  }
  if (!x32) {
    return false;
  }
  if (typeof x32 !== "object") {
    return false;
  }
  if (_isString(x32)) {
    return false;
  }
  if (x32.length === 0) {
    return true;
  }
  if (x32.length > 0) {
    return x32.hasOwnProperty(0) && x32.hasOwnProperty(x32.length - 1);
  }
  return false;
});
var isArrayLike_default = _isArrayLike;
var symIterator = typeof Symbol !== "undefined" ? Symbol.iterator : "@@iterator";
function _createReduce(arrayReduce, methodReduce, iterableReduce) {
  return function _reduce(xf, acc, list) {
    if (isArrayLike_default(list)) {
      return arrayReduce(xf, acc, list);
    }
    if (list == null) {
      return acc;
    }
    if (typeof list["fantasy-land/reduce"] === "function") {
      return methodReduce(xf, acc, list, "fantasy-land/reduce");
    }
    if (list[symIterator] != null) {
      return iterableReduce(xf, acc, list[symIterator]());
    }
    if (typeof list.next === "function") {
      return iterableReduce(xf, acc, list);
    }
    if (typeof list.reduce === "function") {
      return methodReduce(xf, acc, list, "reduce");
    }
    throw new TypeError("reduce: list must be array or iterable");
  };
}
function _xArrayReduce(xf, acc, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    acc = xf["@@transducer/step"](acc, list[idx]);
    if (acc && acc["@@transducer/reduced"]) {
      acc = acc["@@transducer/value"];
      break;
    }
    idx += 1;
  }
  return xf["@@transducer/result"](acc);
}
var bind = /* @__PURE__ */ _curry2(function bind2(fn2, thisObj) {
  return _arity(fn2.length, function() {
    return fn2.apply(thisObj, arguments);
  });
});
var bind_default = bind;
function _xIterableReduce(xf, acc, iter) {
  var step = iter.next();
  while (!step.done) {
    acc = xf["@@transducer/step"](acc, step.value);
    if (acc && acc["@@transducer/reduced"]) {
      acc = acc["@@transducer/value"];
      break;
    }
    step = iter.next();
  }
  return xf["@@transducer/result"](acc);
}
function _xMethodReduce(xf, acc, obj, methodName) {
  return xf["@@transducer/result"](obj[methodName](bind_default(xf["@@transducer/step"], xf), acc));
}
var _xReduce = /* @__PURE__ */ _createReduce(_xArrayReduce, _xMethodReduce, _xIterableReduce);
var xReduce_default = _xReduce;
var XWrap = /* @__PURE__ */ function() {
  function XWrap2(fn2) {
    this.f = fn2;
  }
  XWrap2.prototype["@@transducer/init"] = function() {
    throw new Error("init not implemented on XWrap");
  };
  XWrap2.prototype["@@transducer/result"] = function(acc) {
    return acc;
  };
  XWrap2.prototype["@@transducer/step"] = function(acc, x32) {
    return this.f(acc, x32);
  };
  return XWrap2;
}();
function _xwrap(fn2) {
  return new XWrap(fn2);
}
var reduce = /* @__PURE__ */ _curry3(function(xf, acc, list) {
  return xReduce_default(typeof xf === "function" ? _xwrap(xf) : xf, acc, list);
});
var reduce_default = reduce;
var allPass = /* @__PURE__ */ _curry1(function allPass2(preds) {
  return curryN_default(reduce_default(max_default, 0, pluck_default("length", preds)), function() {
    var idx = 0;
    var len = preds.length;
    while (idx < len) {
      if (!preds[idx].apply(this, arguments)) {
        return false;
      }
      idx += 1;
    }
    return true;
  });
});
var allPass_default = allPass;
var always = /* @__PURE__ */ _curry1(function always2(val) {
  return function() {
    return val;
  };
});
var always_default = always;
var append = /* @__PURE__ */ _curry2(function append2(el2, list) {
  return _concat(list, [el2]);
});
var append_default = append;
function _assoc(prop3, val, obj) {
  if (isInteger_default(prop3) && isArray_default(obj)) {
    var arr = [].concat(obj);
    arr[prop3] = val;
    return arr;
  }
  var result2 = {};
  for (var p2 in obj) {
    result2[p2] = obj[p2];
  }
  result2[prop3] = val;
  return result2;
}
var isNil = /* @__PURE__ */ _curry1(function isNil2(x32) {
  return x32 == null;
});
var isNil_default = isNil;
var assocPath = /* @__PURE__ */ _curry3(function assocPath2(path2, val, obj) {
  if (path2.length === 0) {
    return val;
  }
  var idx = path2[0];
  if (path2.length > 1) {
    var nextObj = !isNil_default(obj) && _has(idx, obj) && typeof obj[idx] === "object" ? obj[idx] : isInteger_default(path2[1]) ? [] : {};
    val = assocPath2(Array.prototype.slice.call(path2, 1), val, nextObj);
  }
  return _assoc(idx, val, obj);
});
var assocPath_default = assocPath;
var assoc = /* @__PURE__ */ _curry3(function assoc2(prop3, val, obj) {
  return assocPath_default([prop3], val, obj);
});
var assoc_default = assoc;
function _isFunction(x32) {
  var type3 = Object.prototype.toString.call(x32);
  return type3 === "[object Function]" || type3 === "[object AsyncFunction]" || type3 === "[object GeneratorFunction]" || type3 === "[object AsyncGeneratorFunction]";
}
function _makeFlat(recursive) {
  return function flatt(list) {
    var value, jlen, j2;
    var result2 = [];
    var idx = 0;
    var ilen = list.length;
    while (idx < ilen) {
      if (isArrayLike_default(list[idx])) {
        value = recursive ? flatt(list[idx]) : list[idx];
        j2 = 0;
        jlen = value.length;
        while (j2 < jlen) {
          result2[result2.length] = value[j2];
          j2 += 1;
        }
      } else {
        result2[result2.length] = list[idx];
      }
      idx += 1;
    }
    return result2;
  };
}
function _forceReduced(x32) {
  return {
    "@@transducer/value": x32,
    "@@transducer/reduced": true
  };
}
var tInit = "@@transducer/init";
var tStep = "@@transducer/step";
var tResult = "@@transducer/result";
var XPreservingReduced = /* @__PURE__ */ function() {
  function XPreservingReduced2(xf) {
    this.xf = xf;
  }
  XPreservingReduced2.prototype[tInit] = xfBase_default.init;
  XPreservingReduced2.prototype[tResult] = xfBase_default.result;
  XPreservingReduced2.prototype[tStep] = function(result2, input) {
    var ret = this.xf[tStep](result2, input);
    return ret["@@transducer/reduced"] ? _forceReduced(ret) : ret;
  };
  return XPreservingReduced2;
}();
var XFlatCat = /* @__PURE__ */ function() {
  function XFlatCat2(xf) {
    this.xf = new XPreservingReduced(xf);
  }
  XFlatCat2.prototype[tInit] = xfBase_default.init;
  XFlatCat2.prototype[tResult] = xfBase_default.result;
  XFlatCat2.prototype[tStep] = function(result2, input) {
    return !isArrayLike_default(input) ? _xArrayReduce(this.xf, result2, [input]) : xReduce_default(this.xf, result2, input);
  };
  return XFlatCat2;
}();
var _flatCat = function _xcat(xf) {
  return new XFlatCat(xf);
};
var flatCat_default = _flatCat;
function _xchain(f2) {
  return function(xf) {
    return xmap_default(f2)(flatCat_default(xf));
  };
}
var chain = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["fantasy-land/chain", "chain"], _xchain, function chain2(fn2, monad) {
  if (typeof monad === "function") {
    return function(x32) {
      return fn2(monad(x32))(x32);
    };
  }
  return _makeFlat(false)(map_default(fn2, monad));
}));
var chain_default = chain;
function _pipe(f2, g2) {
  return function() {
    return g2.call(this, f2.apply(this, arguments));
  };
}
function _checkForMethod(methodname, fn2) {
  return function() {
    var length = arguments.length;
    if (length === 0) {
      return fn2();
    }
    var obj = arguments[length - 1];
    return isArray_default(obj) || typeof obj[methodname] !== "function" ? fn2.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
  };
}
var slice = /* @__PURE__ */ _curry3(/* @__PURE__ */ _checkForMethod("slice", function slice2(fromIndex, toIndex, list) {
  return Array.prototype.slice.call(list, fromIndex, toIndex);
}));
var slice_default = slice;
var tail = /* @__PURE__ */ _curry1(/* @__PURE__ */ _checkForMethod("tail", /* @__PURE__ */ slice_default(1, Infinity)));
var tail_default = tail;
function pipe() {
  if (arguments.length === 0) {
    throw new Error("pipe requires at least one argument");
  }
  return _arity(arguments[0].length, reduce_default(_pipe, arguments[0], tail_default(arguments)));
}
function _identity(x32) {
  return x32;
}
var identity = /* @__PURE__ */ _curry1(_identity);
var identity_default = identity;
var concat = /* @__PURE__ */ _curry2(function concat2(a, b2) {
  if (isArray_default(a)) {
    if (isArray_default(b2)) {
      return a.concat(b2);
    }
    throw new TypeError(toString_default(b2) + " is not an array");
  }
  if (_isString(a)) {
    if (_isString(b2)) {
      return a + b2;
    }
    throw new TypeError(toString_default(b2) + " is not a string");
  }
  if (a != null && _isFunction(a["fantasy-land/concat"])) {
    return a["fantasy-land/concat"](b2);
  }
  if (a != null && _isFunction(a.concat)) {
    return a.concat(b2);
  }
  throw new TypeError(toString_default(a) + ' does not have a method named "concat" or "fantasy-land/concat"');
});
var concat_default = concat;
var cond = /* @__PURE__ */ _curry1(function cond2(pairs) {
  var arity = reduce_default(max_default, 0, map_default(function(pair) {
    return pair[0].length;
  }, pairs));
  return _arity(arity, function() {
    var idx = 0;
    while (idx < pairs.length) {
      if (pairs[idx][0].apply(this, arguments)) {
        return pairs[idx][1].apply(this, arguments);
      }
      idx += 1;
    }
  });
});
var cond_default = cond;
var defaultTo = /* @__PURE__ */ _curry2(function defaultTo2(d2, v22) {
  return v22 == null || v22 !== v22 ? d2 : v22;
});
var defaultTo_default = defaultTo;
var hasPath = /* @__PURE__ */ _curry2(function hasPath2(_path2, obj) {
  if (_path2.length === 0 || isNil_default(obj)) {
    return false;
  }
  var val = obj;
  var idx = 0;
  while (idx < _path2.length) {
    if (!isNil_default(val) && _has(_path2[idx], val)) {
      val = val[_path2[idx]];
      idx += 1;
    } else {
      return false;
    }
  }
  return true;
});
var hasPath_default = hasPath;
var has = /* @__PURE__ */ _curry2(function has2(prop3, obj) {
  return hasPath_default([prop3], obj);
});
var has_default = has;
var ifElse = /* @__PURE__ */ _curry3(function ifElse2(condition, onTrue, onFalse) {
  return curryN_default(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {
    return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
  });
});
var ifElse_default = ifElse;
var includes = /* @__PURE__ */ _curry2(_includes);
var includes_default = includes;
var invoker = /* @__PURE__ */ _curry2(function invoker2(arity, method) {
  return curryN_default(arity + 1, function() {
    var target = arguments[arity];
    if (target != null && _isFunction(target[method])) {
      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));
    }
    throw new TypeError(toString_default(target) + ' does not have a method named "' + method + '"');
  });
});
var invoker_default = invoker;
var is2 = /* @__PURE__ */ _curry2(function is3(Ctor, val) {
  return val instanceof Ctor || val != null && (val.constructor === Ctor || Ctor.name === "Object" && typeof val === "object");
});
var is_default = is2;
var isNotNil = /* @__PURE__ */ _curry1(function isNotNil2(x32) {
  return !isNil_default(x32);
});
var isNotNil_default = isNotNil;
var join = /* @__PURE__ */ invoker_default(1, "join");
var join_default = join;
function _path(pathAr, obj) {
  var val = obj;
  for (var i = 0; i < pathAr.length; i += 1) {
    if (val == null) {
      return void 0;
    }
    var p2 = pathAr[i];
    if (isInteger_default(p2)) {
      val = _nth(p2, val);
    } else {
      val = val[p2];
    }
  }
  return val;
}
var path = /* @__PURE__ */ _curry2(_path);
var path_default = path;
var propEq = /* @__PURE__ */ _curry3(function propEq2(val, name, obj) {
  return equals_default(val, prop_default(name, obj));
});
var propEq_default = propEq;
var propOr = /* @__PURE__ */ _curry3(function propOr2(val, p2, obj) {
  return defaultTo_default(val, prop_default(p2, obj));
});
var propOr_default = propOr;
var XTap = /* @__PURE__ */ function() {
  function XTap2(f2, xf) {
    this.xf = xf;
    this.f = f2;
  }
  XTap2.prototype["@@transducer/init"] = xfBase_default.init;
  XTap2.prototype["@@transducer/result"] = xfBase_default.result;
  XTap2.prototype["@@transducer/step"] = function(result2, input) {
    this.f(input);
    return this.xf["@@transducer/step"](result2, input);
  };
  return XTap2;
}();
function _xtap(f2) {
  return function(xf) {
    return new XTap(f2, xf);
  };
}
var tap = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable([], _xtap, function tap2(fn2, x32) {
  fn2(x32);
  return x32;
}));
var tap_default = tap;
var util;
(function(util2) {
  util2.assertEqual = (val) => val;
  function assertIs(_arg) {
  }
  util2.assertIs = assertIs;
  function assertNever(_x2) {
    throw new Error();
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k2) => typeof obj[obj[k2]] !== "number");
    const filtered = {};
    for (const k2 of validKeys) {
      filtered[k2] = obj[k2];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e) {
      return obj[e];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
    const keys4 = [];
    for (const key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        keys4.push(key);
      }
    }
    return keys4;
  };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item))
        return item;
    }
    return void 0;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
  function joinValues(array, separator = " | ") {
    return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
  }
  util2.joinValues = joinValues;
  util2.jsonStringifyReplacer = (_32, value) => {
    if (typeof value === "bigint") {
      return value.toString();
    }
    return value;
  };
})(util || (util = {}));
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => {
    return {
      ...first,
      ...second
      // second overwrites first
    };
  };
})(objectUtil || (objectUtil = {}));
var ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
var getParsedType = (data) => {
  const t = typeof data;
  switch (t) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "symbol":
      return ZodParsedType.symbol;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};
var ZodIssueCode = util.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
var quotelessJson = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
};
var ZodError = class _ZodError extends Error {
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  get errors() {
    return this.issues;
  }
  format(_mapper) {
    const mapper = _mapper || function(issue) {
      return issue.message;
    };
    const fieldErrors = { _errors: [] };
    const processError = (error) => {
      for (const issue of error.issues) {
        if (issue.code === "invalid_union") {
          issue.unionErrors.map(processError);
        } else if (issue.code === "invalid_return_type") {
          processError(issue.returnTypeError);
        } else if (issue.code === "invalid_arguments") {
          processError(issue.argumentsError);
        } else if (issue.path.length === 0) {
          fieldErrors._errors.push(mapper(issue));
        } else {
          let curr = fieldErrors;
          let i = 0;
          while (i < issue.path.length) {
            const el2 = issue.path[i];
            const terminal = i === issue.path.length - 1;
            if (!terminal) {
              curr[el2] = curr[el2] || { _errors: [] };
            } else {
              curr[el2] = curr[el2] || { _errors: [] };
              curr[el2]._errors.push(mapper(issue));
            }
            curr = curr[el2];
            i++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  static assert(value) {
    if (!(value instanceof _ZodError)) {
      throw new Error(`Not a ZodError: ${value}`);
    }
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
        fieldErrors[sub.path[0]].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
};
ZodError.create = (issues) => {
  const error = new ZodError(issues);
  return error;
};
var errorMap = (issue, _ctx) => {
  let message2;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === ZodParsedType.undefined) {
        message2 = "Required";
      } else {
        message2 = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.invalid_literal:
      message2 = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message2 = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message2 = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message2 = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message2 = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message2 = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message2 = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message2 = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (typeof issue.validation === "object") {
        if ("includes" in issue.validation) {
          message2 = `Invalid input: must include "${issue.validation.includes}"`;
          if (typeof issue.validation.position === "number") {
            message2 = `${message2} at one or more positions greater than or equal to ${issue.validation.position}`;
          }
        } else if ("startsWith" in issue.validation) {
          message2 = `Invalid input: must start with "${issue.validation.startsWith}"`;
        } else if ("endsWith" in issue.validation) {
          message2 = `Invalid input: must end with "${issue.validation.endsWith}"`;
        } else {
          util.assertNever(issue.validation);
        }
      } else if (issue.validation !== "regex") {
        message2 = `Invalid ${issue.validation}`;
      } else {
        message2 = "Invalid";
      }
      break;
    case ZodIssueCode.too_small:
      if (issue.type === "array")
        message2 = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message2 = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message2 = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "date")
        message2 = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
      else
        message2 = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (issue.type === "array")
        message2 = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message2 = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message2 = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "bigint")
        message2 = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "date")
        message2 = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
      else
        message2 = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message2 = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message2 = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message2 = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    case ZodIssueCode.not_finite:
      message2 = "Number must be finite";
      break;
    default:
      message2 = _ctx.defaultError;
      util.assertNever(issue);
  }
  return { message: message2 };
};
var overrideErrorMap = errorMap;
function setErrorMap(map3) {
  overrideErrorMap = map3;
}
function getErrorMap() {
  return overrideErrorMap;
}
var makeIssue = (params) => {
  const { data, path: path2, errorMaps, issueData } = params;
  const fullPath = [...path2, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  if (issueData.message !== void 0) {
    return {
      ...issueData,
      path: fullPath,
      message: issueData.message
    };
  }
  let errorMessage = "";
  const maps = errorMaps.filter((m2) => !!m2).slice().reverse();
  for (const map3 of maps) {
    errorMessage = map3(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: errorMessage
  };
};
var EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  const overrideMap = getErrorMap();
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      ctx.schemaErrorMap,
      overrideMap,
      overrideMap === errorMap ? void 0 : errorMap
      // then global default map
    ].filter((x32) => !!x32)
  });
  ctx.common.issues.push(issue);
}
var ParseStatus = class _ParseStatus {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results2) {
    const arrayValue = [];
    for (const s of results2) {
      if (s.status === "aborted")
        return INVALID;
      if (s.status === "dirty")
        status.dirty();
      arrayValue.push(s.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      const key = await pair.key;
      const value = await pair.value;
      syncPairs.push({
        key,
        value
      });
    }
    return _ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID;
      if (value.status === "aborted")
        return INVALID;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
};
var INVALID = Object.freeze({
  status: "aborted"
});
var DIRTY = (value) => ({ status: "dirty", value });
var OK = (value) => ({ status: "valid", value });
var isAborted = (x32) => x32.status === "aborted";
var isDirty = (x32) => x32.status === "dirty";
var isValid = (x32) => x32.status === "valid";
var isAsync = (x32) => typeof Promise !== "undefined" && x32 instanceof Promise;
function __classPrivateFieldGet(receiver, state, kind, f2) {
  if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f2) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
}
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message2) => typeof message2 === "string" ? { message: message2 } : message2 || {};
  errorUtil2.toString = (message2) => typeof message2 === "string" ? message2 : message2 === null || message2 === void 0 ? void 0 : message2.message;
})(errorUtil || (errorUtil = {}));
var _ZodEnum_cache;
var _ZodNativeEnum_cache;
var ParseInputLazyPath = class {
  constructor(parent, value, path2, key) {
    this._cachedPath = [];
    this.parent = parent;
    this.data = value;
    this._path = path2;
    this._key = key;
  }
  get path() {
    if (!this._cachedPath.length) {
      if (this._key instanceof Array) {
        this._cachedPath.push(...this._path, ...this._key);
      } else {
        this._cachedPath.push(...this._path, this._key);
      }
    }
    return this._cachedPath;
  }
};
var handleResult = (ctx, result2) => {
  if (isValid(result2)) {
    return { success: true, data: result2.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    return {
      success: false,
      get error() {
        if (this._error)
          return this._error;
        const error = new ZodError(ctx.common.issues);
        this._error = error;
        return this._error;
      }
    };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    var _a7, _b2;
    const { message: message2 } = params;
    if (iss.code === "invalid_enum_value") {
      return { message: message2 !== null && message2 !== void 0 ? message2 : ctx.defaultError };
    }
    if (typeof ctx.data === "undefined") {
      return { message: (_a7 = message2 !== null && message2 !== void 0 ? message2 : required_error) !== null && _a7 !== void 0 ? _a7 : ctx.defaultError };
    }
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    return { message: (_b2 = message2 !== null && message2 !== void 0 ? message2 : invalid_type_error) !== null && _b2 !== void 0 ? _b2 : ctx.defaultError };
  };
  return { errorMap: customMap, description };
}
var ZodType = class {
  constructor(def) {
    this.spa = this.safeParseAsync;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.brand = this.brand.bind(this);
    this.default = this.default.bind(this);
    this.catch = this.catch.bind(this);
    this.describe = this.describe.bind(this);
    this.pipe = this.pipe.bind(this);
    this.readonly = this.readonly.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
  }
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus(),
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result2 = this._parse(input);
    if (isAsync(result2)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result2;
  }
  _parseAsync(input) {
    const result2 = this._parse(input);
    return Promise.resolve(result2);
  }
  parse(data, params) {
    const result2 = this.safeParse(data, params);
    if (result2.success)
      return result2.data;
    throw result2.error;
  }
  safeParse(data, params) {
    var _a7;
    const ctx = {
      common: {
        issues: [],
        async: (_a7 = params === null || params === void 0 ? void 0 : params.async) !== null && _a7 !== void 0 ? _a7 : false,
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const result2 = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result2);
  }
  async parseAsync(data, params) {
    const result2 = await this.safeParseAsync(data, params);
    if (result2.success)
      return result2.data;
    throw result2.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
        async: true
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
    const result2 = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result2);
  }
  refine(check, message2) {
    const getIssueProperties = (val) => {
      if (typeof message2 === "string" || typeof message2 === "undefined") {
        return { message: message2 };
      } else if (typeof message2 === "function") {
        return message2(val);
      } else {
        return message2;
      }
    };
    return this._refinement((val, ctx) => {
      const result2 = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result2 instanceof Promise) {
        return result2.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result2) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  superRefine(refinement) {
    return this._refinement(refinement);
  }
  optional() {
    return ZodOptional.create(this, this._def);
  }
  nullable() {
    return ZodNullable.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ZodArray.create(this, this._def);
  }
  promise() {
    return ZodPromise.create(this, this._def);
  }
  or(option) {
    return ZodUnion.create([this, option], this._def);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming, this._def);
  }
  transform(transform) {
    return new ZodEffects({
      ...processCreateParams(this._def),
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault({
      ...processCreateParams(this._def),
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  brand() {
    return new ZodBranded({
      typeName: ZodFirstPartyTypeKind.ZodBranded,
      type: this,
      ...processCreateParams(this._def)
    });
  }
  catch(def) {
    const catchValueFunc = typeof def === "function" ? def : () => def;
    return new ZodCatch({
      ...processCreateParams(this._def),
      innerType: this,
      catchValue: catchValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodCatch
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  pipe(target) {
    return ZodPipeline.create(this, target);
  }
  readonly() {
    return ZodReadonly.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
};
var cuidRegex = /^c[^\s-]{8,}$/i;
var cuid2Regex = /^[0-9a-z]+$/;
var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;
var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
var nanoidRegex = /^[a-z0-9_-]{21}$/i;
var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
var emojiRegex;
var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
var ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
var dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
var dateRegex = new RegExp(`^${dateRegexSource}$`);
function timeRegexSource(args) {
  let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
  if (args.precision) {
    regex = `${regex}\\.\\d{${args.precision}}`;
  } else if (args.precision == null) {
    regex = `${regex}(\\.\\d+)?`;
  }
  return regex;
}
function timeRegex(args) {
  return new RegExp(`^${timeRegexSource(args)}$`);
}
function datetimeRegex(args) {
  let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
  const opts = [];
  opts.push(args.local ? `Z?` : `Z`);
  if (args.offset)
    opts.push(`([+-]\\d{2}:?\\d{2})`);
  regex = `${regex}(${opts.join("|")})`;
  return new RegExp(`^${regex}$`);
}
function isValidIP(ip, version) {
  if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
    return true;
  }
  return false;
}
var ZodString = class _ZodString extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = String(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.string,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "length") {
        const tooBig = input.data.length > check.value;
        const tooSmall = input.data.length < check.value;
        if (tooBig || tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          if (tooBig) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          } else if (tooSmall) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          }
          status.dirty();
        }
      } else if (check.kind === "email") {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "email",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "emoji") {
        if (!emojiRegex) {
          emojiRegex = new RegExp(_emojiRegex, "u");
        }
        if (!emojiRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "emoji",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "uuid") {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "uuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "nanoid") {
        if (!nanoidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "nanoid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid") {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid2") {
        if (!cuid2Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid2",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ulid") {
        if (!ulidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ulid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "url") {
        try {
          new URL(input.data);
        } catch (_a7) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "regex") {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "regex",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "trim") {
        input.data = input.data.trim();
      } else if (check.kind === "includes") {
        if (!input.data.includes(check.value, check.position)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { includes: check.value, position: check.position },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "toLowerCase") {
        input.data = input.data.toLowerCase();
      } else if (check.kind === "toUpperCase") {
        input.data = input.data.toUpperCase();
      } else if (check.kind === "startsWith") {
        if (!input.data.startsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { startsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "endsWith") {
        if (!input.data.endsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { endsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "datetime") {
        const regex = datetimeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "datetime",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "date") {
        const regex = dateRegex;
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "date",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "time") {
        const regex = timeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "time",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "duration") {
        if (!durationRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "duration",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ip") {
        if (!isValidIP(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ip",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64") {
        if (!base64Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _regex(regex, validation, message2) {
    return this.refinement((data) => regex.test(data), {
      validation,
      code: ZodIssueCode.invalid_string,
      ...errorUtil.errToObj(message2)
    });
  }
  _addCheck(check) {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message2) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message2) });
  }
  url(message2) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message2) });
  }
  emoji(message2) {
    return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message2) });
  }
  uuid(message2) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message2) });
  }
  nanoid(message2) {
    return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message2) });
  }
  cuid(message2) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message2) });
  }
  cuid2(message2) {
    return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message2) });
  }
  ulid(message2) {
    return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message2) });
  }
  base64(message2) {
    return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message2) });
  }
  ip(options) {
    return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
  }
  datetime(options) {
    var _a7, _b2;
    if (typeof options === "string") {
      return this._addCheck({
        kind: "datetime",
        precision: null,
        offset: false,
        local: false,
        message: options
      });
    }
    return this._addCheck({
      kind: "datetime",
      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
      offset: (_a7 = options === null || options === void 0 ? void 0 : options.offset) !== null && _a7 !== void 0 ? _a7 : false,
      local: (_b2 = options === null || options === void 0 ? void 0 : options.local) !== null && _b2 !== void 0 ? _b2 : false,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  date(message2) {
    return this._addCheck({ kind: "date", message: message2 });
  }
  time(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "time",
        precision: null,
        message: options
      });
    }
    return this._addCheck({
      kind: "time",
      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  duration(message2) {
    return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message2) });
  }
  regex(regex, message2) {
    return this._addCheck({
      kind: "regex",
      regex,
      ...errorUtil.errToObj(message2)
    });
  }
  includes(value, options) {
    return this._addCheck({
      kind: "includes",
      value,
      position: options === null || options === void 0 ? void 0 : options.position,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  startsWith(value, message2) {
    return this._addCheck({
      kind: "startsWith",
      value,
      ...errorUtil.errToObj(message2)
    });
  }
  endsWith(value, message2) {
    return this._addCheck({
      kind: "endsWith",
      value,
      ...errorUtil.errToObj(message2)
    });
  }
  min(minLength, message2) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message2)
    });
  }
  max(maxLength, message2) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message2)
    });
  }
  length(len, message2) {
    return this._addCheck({
      kind: "length",
      value: len,
      ...errorUtil.errToObj(message2)
    });
  }
  /**
   * @deprecated Use z.string().min(1) instead.
   * @see {@link ZodString.min}
   */
  nonempty(message2) {
    return this.min(1, errorUtil.errToObj(message2));
  }
  trim() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((ch) => ch.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((ch) => ch.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((ch) => ch.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((ch) => ch.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((ch) => ch.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((ch) => ch.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((ch) => ch.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((ch) => ch.kind === "ip");
  }
  get isBase64() {
    return !!this._def.checks.find((ch) => ch.kind === "base64");
  }
  get minLength() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxLength() {
    let max3 = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max3 === null || ch.value < max3)
          max3 = ch.value;
      }
    }
    return max3;
  }
};
ZodString.create = (params) => {
  var _a7;
  return new ZodString({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    coerce: (_a7 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a7 !== void 0 ? _a7 : false,
    ...processCreateParams(params)
  });
};
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / Math.pow(10, decCount);
}
var ZodNumber = class _ZodNumber extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = Number(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "int") {
        if (!util.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (floatSafeRemainder(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "finite") {
        if (!Number.isFinite(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_finite,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message2) {
    return this.setLimit("min", value, true, errorUtil.toString(message2));
  }
  gt(value, message2) {
    return this.setLimit("min", value, false, errorUtil.toString(message2));
  }
  lte(value, message2) {
    return this.setLimit("max", value, true, errorUtil.toString(message2));
  }
  lt(value, message2) {
    return this.setLimit("max", value, false, errorUtil.toString(message2));
  }
  setLimit(kind, value, inclusive, message2) {
    return new _ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message2)
        }
      ]
    });
  }
  _addCheck(check) {
    return new _ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message2) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message2)
    });
  }
  positive(message2) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message2)
    });
  }
  negative(message2) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message2)
    });
  }
  nonpositive(message2) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message2)
    });
  }
  nonnegative(message2) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message2)
    });
  }
  multipleOf(value, message2) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message2)
    });
  }
  finite(message2) {
    return this._addCheck({
      kind: "finite",
      message: errorUtil.toString(message2)
    });
  }
  safe(message2) {
    return this._addCheck({
      kind: "min",
      inclusive: true,
      value: Number.MIN_SAFE_INTEGER,
      message: errorUtil.toString(message2)
    })._addCheck({
      kind: "max",
      inclusive: true,
      value: Number.MAX_SAFE_INTEGER,
      message: errorUtil.toString(message2)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max3 = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max3 === null || ch.value < max3)
          max3 = ch.value;
      }
    }
    return max3;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
  }
  get isFinite() {
    let max3 = null, min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
        return true;
      } else if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      } else if (ch.kind === "max") {
        if (max3 === null || ch.value < max3)
          max3 = ch.value;
      }
    }
    return Number.isFinite(min) && Number.isFinite(max3);
  }
};
ZodNumber.create = (params) => {
  return new ZodNumber({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
var ZodBigInt = class _ZodBigInt extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = BigInt(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.bigint) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.bigint,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            type: "bigint",
            minimum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            type: "bigint",
            maximum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (input.data % check.value !== BigInt(0)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message2) {
    return this.setLimit("min", value, true, errorUtil.toString(message2));
  }
  gt(value, message2) {
    return this.setLimit("min", value, false, errorUtil.toString(message2));
  }
  lte(value, message2) {
    return this.setLimit("max", value, true, errorUtil.toString(message2));
  }
  lt(value, message2) {
    return this.setLimit("max", value, false, errorUtil.toString(message2));
  }
  setLimit(kind, value, inclusive, message2) {
    return new _ZodBigInt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message2)
        }
      ]
    });
  }
  _addCheck(check) {
    return new _ZodBigInt({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  positive(message2) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message2)
    });
  }
  negative(message2) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message2)
    });
  }
  nonpositive(message2) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message2)
    });
  }
  nonnegative(message2) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message2)
    });
  }
  multipleOf(value, message2) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message2)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max3 = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max3 === null || ch.value < max3)
          max3 = ch.value;
      }
    }
    return max3;
  }
};
ZodBigInt.create = (params) => {
  var _a7;
  return new ZodBigInt({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    coerce: (_a7 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a7 !== void 0 ? _a7 : false,
    ...processCreateParams(params)
  });
};
var ZodBoolean = class extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = Boolean(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodBoolean.create = (params) => {
  return new ZodBoolean({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
var ZodDate = class _ZodDate extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = new Date(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.date) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    if (isNaN(input.data.getTime())) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_date
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.getTime() < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            message: check.message,
            inclusive: true,
            exact: false,
            minimum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.getTime() > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            message: check.message,
            inclusive: true,
            exact: false,
            maximum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return {
      status: status.value,
      value: new Date(input.data.getTime())
    };
  }
  _addCheck(check) {
    return new _ZodDate({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  min(minDate, message2) {
    return this._addCheck({
      kind: "min",
      value: minDate.getTime(),
      message: errorUtil.toString(message2)
    });
  }
  max(maxDate, message2) {
    return this._addCheck({
      kind: "max",
      value: maxDate.getTime(),
      message: errorUtil.toString(message2)
    });
  }
  get minDate() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min != null ? new Date(min) : null;
  }
  get maxDate() {
    let max3 = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max3 === null || ch.value < max3)
          max3 = ch.value;
      }
    }
    return max3 != null ? new Date(max3) : null;
  }
};
ZodDate.create = (params) => {
  return new ZodDate({
    checks: [],
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params)
  });
};
var ZodSymbol = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.symbol) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.symbol,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodSymbol.create = (params) => {
  return new ZodSymbol({
    typeName: ZodFirstPartyTypeKind.ZodSymbol,
    ...processCreateParams(params)
  });
};
var ZodUndefined = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodUndefined.create = (params) => {
  return new ZodUndefined({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params)
  });
};
var ZodNull = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodNull.create = (params) => {
  return new ZodNull({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params)
  });
};
var ZodAny = class extends ZodType {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodAny.create = (params) => {
  return new ZodAny({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params)
  });
};
var ZodUnknown = class extends ZodType {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodUnknown.create = (params) => {
  return new ZodUnknown({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params)
  });
};
var ZodNever = class extends ZodType {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return INVALID;
  }
};
ZodNever.create = (params) => {
  return new ZodNever({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params)
  });
};
var ZodVoid = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodVoid.create = (params) => {
  return new ZodVoid({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params)
  });
};
var ZodArray = class _ZodArray extends ZodType {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (def.exactLength !== null) {
      const tooBig = ctx.data.length > def.exactLength.value;
      const tooSmall = ctx.data.length < def.exactLength.value;
      if (tooBig || tooSmall) {
        addIssueToContext(ctx, {
          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
          minimum: tooSmall ? def.exactLength.value : void 0,
          maximum: tooBig ? def.exactLength.value : void 0,
          type: "array",
          inclusive: true,
          exact: true,
          message: def.exactLength.message
        });
        status.dirty();
      }
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.minLength.message
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all([...ctx.data].map((item, i) => {
        return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
      })).then((result3) => {
        return ParseStatus.mergeArray(status, result3);
      });
    }
    const result2 = [...ctx.data].map((item, i) => {
      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
    });
    return ParseStatus.mergeArray(status, result2);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message2) {
    return new _ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message2) }
    });
  }
  max(maxLength, message2) {
    return new _ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message2) }
    });
  }
  length(len, message2) {
    return new _ZodArray({
      ...this._def,
      exactLength: { value: len, message: errorUtil.toString(message2) }
    });
  }
  nonempty(message2) {
    return this.min(1, message2);
  }
};
ZodArray.create = (schema, params) => {
  return new ZodArray({
    type: schema,
    minLength: null,
    maxLength: null,
    exactLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params)
  });
};
function deepPartialify(schema) {
  if (schema instanceof ZodObject) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray) {
    return new ZodArray({
      ...schema._def,
      type: deepPartialify(schema.element)
    });
  } else if (schema instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple) {
    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}
var ZodObject = class _ZodObject extends ZodType {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys4 = util.objectKeys(shape);
    return this._cached = { shape, keys: keys4 };
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
      for (const key in ctx.data) {
        if (!shapeKeys.includes(key)) {
          extraKeys.push(key);
        }
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip") ;
      else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(
            new ParseInputLazyPath(ctx, value, ctx.path, key)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: key in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message2) {
    errorUtil.errToObj;
    return new _ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message2 !== void 0 ? {
        errorMap: (issue, ctx) => {
          var _a7, _b2, _c3, _d2;
          const defaultError = (_c3 = (_b2 = (_a7 = this._def).errorMap) === null || _b2 === void 0 ? void 0 : _b2.call(_a7, issue, ctx).message) !== null && _c3 !== void 0 ? _c3 : ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: (_d2 = errorUtil.errToObj(message2).message) !== null && _d2 !== void 0 ? _d2 : defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new _ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new _ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(augmentation) {
    return new _ZodObject({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...augmentation
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(merging) {
    const merged = new _ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...merging._def.shape()
      }),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
    return merged;
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(key, schema) {
    return this.augment({ [key]: schema });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(index) {
    return new _ZodObject({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    const shape = {};
    util.objectKeys(mask).forEach((key) => {
      if (mask[key] && this.shape[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new _ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    util.objectKeys(this.shape).forEach((key) => {
      if (!mask[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new _ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    util.objectKeys(this.shape).forEach((key) => {
      const fieldSchema = this.shape[key];
      if (mask && !mask[key]) {
        newShape[key] = fieldSchema;
      } else {
        newShape[key] = fieldSchema.optional();
      }
    });
    return new _ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required(mask) {
    const newShape = {};
    util.objectKeys(this.shape).forEach((key) => {
      if (mask && !mask[key]) {
        newShape[key] = this.shape[key];
      } else {
        const fieldSchema = this.shape[key];
        let newField = fieldSchema;
        while (newField instanceof ZodOptional) {
          newField = newField._def.innerType;
        }
        newShape[key] = newField;
      }
    });
    return new _ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  keyof() {
    return createZodEnum(util.objectKeys(this.shape));
  }
};
ZodObject.create = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.strictCreate = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.lazycreate = (shape, params) => {
  return new ZodObject({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
var ZodUnion = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results2) {
      for (const result2 of results2) {
        if (result2.result.status === "valid") {
          return result2.result;
        }
      }
      for (const result2 of results2) {
        if (result2.result.status === "dirty") {
          ctx.common.issues.push(...result2.ctx.common.issues);
          return result2.result;
        }
      }
      const unionErrors = results2.map((result2) => new ZodError(result2.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = void 0;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result2 = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result2.status === "valid") {
          return result2;
        } else if (result2.status === "dirty" && !dirty) {
          dirty = { result: result2, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
};
ZodUnion.create = (types, params) => {
  return new ZodUnion({
    options: types,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params)
  });
};
var getDiscriminator = (type3) => {
  if (type3 instanceof ZodLazy) {
    return getDiscriminator(type3.schema);
  } else if (type3 instanceof ZodEffects) {
    return getDiscriminator(type3.innerType());
  } else if (type3 instanceof ZodLiteral) {
    return [type3.value];
  } else if (type3 instanceof ZodEnum) {
    return type3.options;
  } else if (type3 instanceof ZodNativeEnum) {
    return util.objectValues(type3.enum);
  } else if (type3 instanceof ZodDefault) {
    return getDiscriminator(type3._def.innerType);
  } else if (type3 instanceof ZodUndefined) {
    return [void 0];
  } else if (type3 instanceof ZodNull) {
    return [null];
  } else if (type3 instanceof ZodOptional) {
    return [void 0, ...getDiscriminator(type3.unwrap())];
  } else if (type3 instanceof ZodNullable) {
    return [null, ...getDiscriminator(type3.unwrap())];
  } else if (type3 instanceof ZodBranded) {
    return getDiscriminator(type3.unwrap());
  } else if (type3 instanceof ZodReadonly) {
    return getDiscriminator(type3.unwrap());
  } else if (type3 instanceof ZodCatch) {
    return getDiscriminator(type3._def.innerType);
  } else {
    return [];
  }
};
var ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.optionsMap.get(discriminatorValue);
    if (!option) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union_discriminator,
        options: Array.from(this.optionsMap.keys()),
        path: [discriminator]
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(discriminator, options, params) {
    const optionsMap = /* @__PURE__ */ new Map();
    for (const type3 of options) {
      const discriminatorValues = getDiscriminator(type3.shape[discriminator]);
      if (!discriminatorValues.length) {
        throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
      }
      for (const value of discriminatorValues) {
        if (optionsMap.has(value)) {
          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
        }
        optionsMap.set(value, type3);
      }
    }
    return new _ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      optionsMap,
      ...processCreateParams(params)
    });
  }
};
function mergeValues(a, b2) {
  const aType = getParsedType(a);
  const bType = getParsedType(b2);
  if (a === b2) {
    return { valid: true, data: a };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b2);
    const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a, ...b2 };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a[key], b2[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a.length !== b2.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a.length; index++) {
      const itemA = a[index];
      const itemB = b2[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b2) {
    return { valid: true, data: a };
  } else {
    return { valid: false };
  }
}
var ZodIntersection = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_intersection_types
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
};
ZodIntersection.create = (left, right, params) => {
  return new ZodIntersection({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params)
  });
};
var ZodTuple = class _ZodTuple extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      status.dirty();
    }
    const items = [...ctx.data].map((item, itemIndex) => {
      const schema = this._def.items[itemIndex] || this._def.rest;
      if (!schema)
        return null;
      return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
    }).filter((x32) => !!x32);
    if (ctx.common.async) {
      return Promise.all(items).then((results2) => {
        return ParseStatus.mergeArray(status, results2);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new _ZodTuple({
      ...this._def,
      rest
    });
  }
};
ZodTuple.create = (schemas, params) => {
  if (!Array.isArray(schemas)) {
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  }
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};
var ZodRecord = class _ZodRecord extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (ctx.common.async) {
      return ParseStatus.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first, second, third) {
    if (second instanceof ZodType) {
      return new _ZodRecord({
        keyType: first,
        valueType: second,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(third)
      });
    }
    return new _ZodRecord({
      keyType: ZodString.create(),
      valueType: first,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second)
    });
  }
};
var ZodMap = class extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = /* @__PURE__ */ new Map();
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === "aborted" || value.status === "aborted") {
          return INVALID;
        }
        if (key.status === "dirty" || value.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
};
ZodMap.create = (keyType, valueType, params) => {
  return new ZodMap({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params)
  });
};
var ZodSet = class _ZodSet extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.minSize.message
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = /* @__PURE__ */ new Set();
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message2) {
    return new _ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message2) }
    });
  }
  max(maxSize, message2) {
    return new _ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message2) }
    });
  }
  size(size, message2) {
    return this.min(size, message2).max(size, message2);
  }
  nonempty(message2) {
    return this.min(1, message2);
  }
};
ZodSet.create = (valueType, params) => {
  return new ZodSet({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params)
  });
};
var ZodFunction = class _ZodFunction extends ZodType {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      });
      return INVALID;
    }
    function makeArgsIssue(args, error) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x32) => !!x32),
        issueData: {
          code: ZodIssueCode.invalid_arguments,
          argumentsError: error
        }
      });
    }
    function makeReturnsIssue(returns, error) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x32) => !!x32),
        issueData: {
          code: ZodIssueCode.invalid_return_type,
          returnTypeError: error
        }
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn2 = ctx.data;
    if (this._def.returns instanceof ZodPromise) {
      const me2 = this;
      return OK(async function(...args) {
        const error = new ZodError([]);
        const parsedArgs = await me2._def.args.parseAsync(args, params).catch((e) => {
          error.addIssue(makeArgsIssue(args, e));
          throw error;
        });
        const result2 = await Reflect.apply(fn2, this, parsedArgs);
        const parsedReturns = await me2._def.returns._def.type.parseAsync(result2, params).catch((e) => {
          error.addIssue(makeReturnsIssue(result2, e));
          throw error;
        });
        return parsedReturns;
      });
    } else {
      const me2 = this;
      return OK(function(...args) {
        const parsedArgs = me2._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result2 = Reflect.apply(fn2, this, parsedArgs.data);
        const parsedReturns = me2._def.returns.safeParse(result2, params);
        if (!parsedReturns.success) {
          throw new ZodError([makeReturnsIssue(result2, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new _ZodFunction({
      ...this._def,
      args: ZodTuple.create(items).rest(ZodUnknown.create())
    });
  }
  returns(returnType) {
    return new _ZodFunction({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  static create(args, returns, params) {
    return new _ZodFunction({
      args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
      returns: returns || ZodUnknown.create(),
      typeName: ZodFirstPartyTypeKind.ZodFunction,
      ...processCreateParams(params)
    });
  }
};
var ZodLazy = class extends ZodType {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
};
ZodLazy.create = (getter, params) => {
  return new ZodLazy({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params)
  });
};
var ZodLiteral = class extends ZodType {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_literal,
        expected: this._def.value
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
};
ZodLiteral.create = (value, params) => {
  return new ZodLiteral({
    value,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params)
  });
};
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}
var ZodEnum = class _ZodEnum extends ZodType {
  constructor() {
    super(...arguments);
    _ZodEnum_cache.set(this, void 0);
  }
  _parse(input) {
    if (typeof input.data !== "string") {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f")) {
      __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), "f");
    }
    if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f").has(input.data)) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  extract(values, newDef = this._def) {
    return _ZodEnum.create(values, {
      ...this._def,
      ...newDef
    });
  }
  exclude(values, newDef = this._def) {
    return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
      ...this._def,
      ...newDef
    });
  }
};
_ZodEnum_cache = /* @__PURE__ */ new WeakMap();
ZodEnum.create = createZodEnum;
var ZodNativeEnum = class extends ZodType {
  constructor() {
    super(...arguments);
    _ZodNativeEnum_cache.set(this, void 0);
  }
  _parse(input) {
    const nativeEnumValues = util.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f")) {
      __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), "f");
    }
    if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f").has(input.data)) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
};
_ZodNativeEnum_cache = /* @__PURE__ */ new WeakMap();
ZodNativeEnum.create = (values, params) => {
  return new ZodNativeEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params)
  });
};
var ZodPromise = class extends ZodType {
  unwrap() {
    return this._def.type;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
};
ZodPromise.create = (schema, params) => {
  return new ZodPromise({
    type: schema,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params)
  });
};
var ZodEffects = class extends ZodType {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      }
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data, checkCtx);
      if (ctx.common.async) {
        return Promise.resolve(processed).then(async (processed2) => {
          if (status.value === "aborted")
            return INVALID;
          const result2 = await this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
          if (result2.status === "aborted")
            return INVALID;
          if (result2.status === "dirty")
            return DIRTY(result2.value);
          if (status.value === "dirty")
            return DIRTY(result2.value);
          return result2;
        });
      } else {
        if (status.value === "aborted")
          return INVALID;
        const result2 = this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
        if (result2.status === "aborted")
          return INVALID;
        if (result2.status === "dirty")
          return DIRTY(result2.value);
        if (status.value === "dirty")
          return DIRTY(result2.value);
        return result2;
      }
    }
    if (effect.type === "refinement") {
      const executeRefinement = (acc) => {
        const result2 = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result2);
        }
        if (result2 instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base))
          return base;
        const result2 = effect.transform(base.value, checkCtx);
        if (result2 instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return { status: status.value, value: result2 };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
          if (!isValid(base))
            return base;
          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result2) => ({ status: status.value, value: result2 }));
        });
      }
    }
    util.assertNever(effect);
  }
};
ZodEffects.create = (schema, effect, params) => {
  return new ZodEffects({
    schema,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params)
  });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
  return new ZodEffects({
    schema,
    effect: { type: "preprocess", transform: preprocess },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params)
  });
};
var ZodOptional = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.undefined) {
      return OK(void 0);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodOptional.create = (type3, params) => {
  return new ZodOptional({
    innerType: type3,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};
var ZodNullable = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodNullable.create = (type3, params) => {
  return new ZodNullable({
    innerType: type3,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params)
  });
};
var ZodDefault = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
};
ZodDefault.create = (type3, params) => {
  return new ZodDefault({
    innerType: type3,
    typeName: ZodFirstPartyTypeKind.ZodDefault,
    defaultValue: typeof params.default === "function" ? params.default : () => params.default,
    ...processCreateParams(params)
  });
};
var ZodCatch = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const newCtx = {
      ...ctx,
      common: {
        ...ctx.common,
        issues: []
      }
    };
    const result2 = this._def.innerType._parse({
      data: newCtx.data,
      path: newCtx.path,
      parent: {
        ...newCtx
      }
    });
    if (isAsync(result2)) {
      return result2.then((result3) => {
        return {
          status: "valid",
          value: result3.status === "valid" ? result3.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      });
    } else {
      return {
        status: "valid",
        value: result2.status === "valid" ? result2.value : this._def.catchValue({
          get error() {
            return new ZodError(newCtx.common.issues);
          },
          input: newCtx.data
        })
      };
    }
  }
  removeCatch() {
    return this._def.innerType;
  }
};
ZodCatch.create = (type3, params) => {
  return new ZodCatch({
    innerType: type3,
    typeName: ZodFirstPartyTypeKind.ZodCatch,
    catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
    ...processCreateParams(params)
  });
};
var ZodNaN = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
};
ZodNaN.create = (params) => {
  return new ZodNaN({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params)
  });
};
var BRAND = Symbol("zod_brand");
var ZodBranded = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
};
var ZodPipeline = class _ZodPipeline extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.common.async) {
      const handleAsync = async () => {
        const inResult = await this._def.in._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return DIRTY(inResult.value);
        } else {
          return this._def.out._parseAsync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      };
      return handleAsync();
    } else {
      const inResult = this._def.in._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
      if (inResult.status === "aborted")
        return INVALID;
      if (inResult.status === "dirty") {
        status.dirty();
        return {
          status: "dirty",
          value: inResult.value
        };
      } else {
        return this._def.out._parseSync({
          data: inResult.value,
          path: ctx.path,
          parent: ctx
        });
      }
    }
  }
  static create(a, b2) {
    return new _ZodPipeline({
      in: a,
      out: b2,
      typeName: ZodFirstPartyTypeKind.ZodPipeline
    });
  }
};
var ZodReadonly = class extends ZodType {
  _parse(input) {
    const result2 = this._def.innerType._parse(input);
    const freeze = (data) => {
      if (isValid(data)) {
        data.value = Object.freeze(data.value);
      }
      return data;
    };
    return isAsync(result2) ? result2.then((data) => freeze(data)) : freeze(result2);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodReadonly.create = (type3, params) => {
  return new ZodReadonly({
    innerType: type3,
    typeName: ZodFirstPartyTypeKind.ZodReadonly,
    ...processCreateParams(params)
  });
};
function custom(check, params = {}, fatal) {
  if (check)
    return ZodAny.create().superRefine((data, ctx) => {
      var _a7, _b2;
      if (!check(data)) {
        const p2 = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
        const _fatal = (_b2 = (_a7 = p2.fatal) !== null && _a7 !== void 0 ? _a7 : fatal) !== null && _b2 !== void 0 ? _b2 : true;
        const p22 = typeof p2 === "string" ? { message: p2 } : p2;
        ctx.addIssue({ code: "custom", ...p22, fatal: _fatal });
      }
    });
  return ZodAny.create();
}
var late = {
  object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
  ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
  ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
  ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
var instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom((data) => data instanceof cls, params);
var stringType = ZodString.create;
var numberType = ZodNumber.create;
var nanType = ZodNaN.create;
var bigIntType = ZodBigInt.create;
var booleanType = ZodBoolean.create;
var dateType = ZodDate.create;
var symbolType = ZodSymbol.create;
var undefinedType = ZodUndefined.create;
var nullType = ZodNull.create;
var anyType = ZodAny.create;
var unknownType = ZodUnknown.create;
var neverType = ZodNever.create;
var voidType = ZodVoid.create;
var arrayType = ZodArray.create;
var objectType = ZodObject.create;
var strictObjectType = ZodObject.strictCreate;
var unionType = ZodUnion.create;
var discriminatedUnionType = ZodDiscriminatedUnion.create;
var intersectionType = ZodIntersection.create;
var tupleType = ZodTuple.create;
var recordType = ZodRecord.create;
var mapType = ZodMap.create;
var setType = ZodSet.create;
var functionType = ZodFunction.create;
var lazyType = ZodLazy.create;
var literalType = ZodLiteral.create;
var enumType = ZodEnum.create;
var nativeEnumType = ZodNativeEnum.create;
var promiseType = ZodPromise.create;
var effectsType = ZodEffects.create;
var optionalType = ZodOptional.create;
var nullableType = ZodNullable.create;
var preprocessType = ZodEffects.createWithPreprocess;
var pipelineType = ZodPipeline.create;
var ostring = () => stringType().optional();
var onumber = () => numberType().optional();
var oboolean = () => booleanType().optional();
var coerce = {
  string: (arg) => ZodString.create({ ...arg, coerce: true }),
  number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
  boolean: (arg) => ZodBoolean.create({
    ...arg,
    coerce: true
  }),
  bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
  date: (arg) => ZodDate.create({ ...arg, coerce: true })
};
var NEVER = INVALID;
var z2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  defaultErrorMap: errorMap,
  setErrorMap,
  getErrorMap,
  makeIssue,
  EMPTY_PATH,
  addIssueToContext,
  ParseStatus,
  INVALID,
  DIRTY,
  OK,
  isAborted,
  isDirty,
  isValid,
  isAsync,
  get util() {
    return util;
  },
  get objectUtil() {
    return objectUtil;
  },
  ZodParsedType,
  getParsedType,
  ZodType,
  datetimeRegex,
  ZodString,
  ZodNumber,
  ZodBigInt,
  ZodBoolean,
  ZodDate,
  ZodSymbol,
  ZodUndefined,
  ZodNull,
  ZodAny,
  ZodUnknown,
  ZodNever,
  ZodVoid,
  ZodArray,
  ZodObject,
  ZodUnion,
  ZodDiscriminatedUnion,
  ZodIntersection,
  ZodTuple,
  ZodRecord,
  ZodMap,
  ZodSet,
  ZodFunction,
  ZodLazy,
  ZodLiteral,
  ZodEnum,
  ZodNativeEnum,
  ZodPromise,
  ZodEffects,
  ZodTransformer: ZodEffects,
  ZodOptional,
  ZodNullable,
  ZodDefault,
  ZodCatch,
  ZodNaN,
  BRAND,
  ZodBranded,
  ZodPipeline,
  ZodReadonly,
  custom,
  Schema: ZodType,
  ZodSchema: ZodType,
  late,
  get ZodFirstPartyTypeKind() {
    return ZodFirstPartyTypeKind;
  },
  coerce,
  any: anyType,
  array: arrayType,
  bigint: bigIntType,
  boolean: booleanType,
  date: dateType,
  discriminatedUnion: discriminatedUnionType,
  effect: effectsType,
  "enum": enumType,
  "function": functionType,
  "instanceof": instanceOfType,
  intersection: intersectionType,
  lazy: lazyType,
  literal: literalType,
  map: mapType,
  nan: nanType,
  nativeEnum: nativeEnumType,
  never: neverType,
  "null": nullType,
  nullable: nullableType,
  number: numberType,
  object: objectType,
  oboolean,
  onumber,
  optional: optionalType,
  ostring,
  pipeline: pipelineType,
  preprocess: preprocessType,
  promise: promiseType,
  record: recordType,
  set: setType,
  strictObject: strictObjectType,
  string: stringType,
  symbol: symbolType,
  transformer: effectsType,
  tuple: tupleType,
  "undefined": undefinedType,
  union: unionType,
  unknown: unknownType,
  "void": voidType,
  NEVER,
  ZodIssueCode,
  quotelessJson,
  ZodError
});
function loadTransactionMetaWith({ fetch: fetch2, GRAPHQL_URL: GRAPHQL_URL2, logger }) {
  const GET_TRANSACTIONS_QUERY = `
    query GetTransactions ($transactionIds: [ID!]!) {
      transactions(ids: $transactionIds) {
        edges {
          node {
            owner {
              address
            }
            tags {
              name
              value
            }
            block {
              id
              height
              timestamp
            }
          }
        }
      }
    }`;
  const transactionConnectionSchema = z2.object({
    data: z2.object({
      transactions: z2.object({
        edges: z2.array(z2.object({
          node: z2.record(z2.any())
        }))
      })
    })
  });
  return (id) => of(id).chain(fromPromise(
    (id2) => fetch2(GRAPHQL_URL2, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        query: GET_TRANSACTIONS_QUERY,
        variables: { transactionIds: [id2] }
      })
    }).then(async (res) => {
      if (res.ok) return res.json();
      logger('Error Encountered when querying gateway for transaction "%s"', id2);
      throw new Error(`${res.status}: ${await res.text()}`);
    }).then(transactionConnectionSchema.parse).then(path_default(["data", "transactions", "edges", "0", "node"]))
  )).toPromise();
}
var import_debug = __toESM2(require_browser(), 1);
var createLogger = (name = "@permaweb/aoconnect") => {
  const logger = (0, import_debug.default)(name);
  logger.child = (name2) => createLogger(`${logger.namespace}:${name2}`);
  logger.tap = (note, ...rest) => tap_default((...args) => logger(note, ...rest, ...args));
  return logger;
};
var joinUrl = ({ url, path: path2 }) => {
  if (!path2) return url;
  if (path2.startsWith("/")) return joinUrl({ url, path: path2.slice(1) });
  url = new URL(url);
  url.pathname += path2;
  return url.toString();
};
function parseTags(rawTags) {
  return pipe(
    defaultTo_default([]),
    reduce_default(
      (map3, tag) => pipe(
        // [value, value, ...] || []
        propOr_default([], tag.name),
        // [value]
        append_default(tag.value),
        // { [name]: [value, value, ...] }
        assoc_default(tag.name, __default, map3)
      )(map3),
      {}
    ),
    /**
    * If the field is only a singly list, then extract the one value.
    *
    * Otherwise, keep the value as a list.
    */
    map_default((values) => values.length > 1 ? values : values[0])
  )(rawTags);
}
function removeTagsByNameMaybeValue(name, value) {
  return (tags) => reject_default(
    allPass_default([
      propEq_default(name, "name"),
      ifElse_default(
        always_default(value),
        propEq_default(value, "value"),
        T_default
      )
    ]),
    tags
  );
}
function eqOrIncludes(val) {
  return cond_default([
    [is_default(String), equals_default(val)],
    [is_default(Array), includes_default(val)],
    [T_default, F_default]
  ]);
}
function errFrom(err) {
  let e;
  if (is_default(ZodError, err)) {
    e = new Error(mapZodErr(err));
    e.stack += err.stack;
  } else if (is_default(Error, err)) {
    e = err;
  } else if (has_default("message", err)) {
    e = new Error(err.message);
  } else if (is_default(String, err)) {
    e = new Error(err);
  } else {
    e = new Error("An error occurred");
  }
  return e;
}
function mapZodErr(zodErr) {
  return pipe(
    (zodErr2) => (
      /**
       * Take a ZodError and flatten it's issues into a single depth array
       */
      function gatherZodIssues(zodErr3, status, contextCode) {
        return reduce_default(
          (issues, issue) => pipe(
            cond_default([
              /**
               * These issue codes indicate nested ZodErrors, so we resursively gather those
               * See https://github.com/colinhacks/zod/blob/HEAD/ERROR_HANDLING.md#zodissuecode
               */
              [
                equals_default(ZodIssueCode.invalid_arguments),
                () => gatherZodIssues(issue.argumentsError, 422, "Invalid Arguments")
              ],
              [
                equals_default(ZodIssueCode.invalid_return_type),
                () => gatherZodIssues(issue.returnTypeError, 500, "Invalid Return")
              ],
              [
                equals_default(ZodIssueCode.invalid_union),
                // An array of ZodErrors, so map over and flatten them all
                () => chain_default((i) => gatherZodIssues(i, 400, "Invalid Union"), issue.unionErrors)
              ],
              [T_default, () => [{ ...issue, status, contextCode }]]
            ]),
            concat_default(issues)
          )(issue.code),
          [],
          zodErr3.issues
        );
      }(zodErr2, 400, "")
    ),
    /**
     * combine all zod issues into a list of { message, status }
     * summaries of each issue
     */
    (zodIssues) => reduce_default(
      (acc, zodIssue) => {
        const { message: message2, path: _path2, contextCode: _contextCode } = zodIssue;
        const path2 = _path2[1] || _path2[0];
        const contextCode = _contextCode ? `${_contextCode} ` : "";
        acc.push(`${contextCode}'${path2}': ${message2}.`);
        return acc;
      },
      [],
      zodIssues
    ),
    join_default(" | ")
  )(zodErr);
}
var inputSchema = z2.object({
  id: z2.string().min(1, { message: "message is required to be a message id" }),
  processId: z2.string().min(1, { message: "process is required to be a process id" })
});
function verifyInputWith() {
  return (ctx) => {
    return of(ctx).map(inputSchema.parse).map(() => ctx);
  };
}
var tagSchema = z2.object({
  name: z2.string(),
  value: z2.string()
});
var dryrunResultSchema = z2.function().args(z2.object({
  Id: z2.string(),
  Target: z2.string(),
  Owner: z2.string(),
  Anchor: z2.string().optional(),
  Data: z2.any().default("1234"),
  Tags: z2.array(z2.object({ name: z2.string(), value: z2.string() }))
})).returns(z2.promise(z2.any()));
var loadResultSchema = z2.function().args(z2.object({
  id: z2.string().min(1, { message: "message id is required" }),
  processId: z2.string().min(1, { message: "process id is required" })
})).returns(z2.promise(z2.any()));
var queryResultsSchema = z2.function().args(z2.object({
  process: z2.string().min(1, { message: "process id is required" }),
  from: z2.string().optional(),
  to: z2.string().optional(),
  sort: z2.enum(["ASC", "DESC"]).default("ASC"),
  limit: z2.number().optional()
})).returns(z2.promise(z2.object({
  edges: z2.array(z2.object({
    cursor: z2.string(),
    node: z2.object({
      Output: z2.any().optional(),
      Messages: z2.array(z2.any()).optional(),
      Spawns: z2.array(z2.any()).optional(),
      Error: z2.any().optional()
    })
  }))
})));
var deployMessageSchema = z2.function().args(z2.object({
  processId: z2.string(),
  data: z2.any(),
  tags: z2.array(tagSchema),
  anchor: z2.string().optional(),
  signer: z2.any()
})).returns(z2.promise(
  z2.object({
    messageId: z2.string()
  }).passthrough()
));
var deployProcessSchema = z2.function().args(z2.object({
  data: z2.any(),
  tags: z2.array(tagSchema),
  signer: z2.any()
})).returns(z2.promise(
  z2.object({
    processId: z2.string()
  }).passthrough()
));
var deployAssignSchema = z2.function().args(z2.object({
  process: z2.string(),
  message: z2.string(),
  baseLayer: z2.boolean().optional(),
  exclude: z2.array(z2.string()).optional()
})).returns(z2.promise(
  z2.object({
    assignmentId: z2.string()
  }).passthrough()
));
var deployMonitorSchema = deployMessageSchema;
var loadProcessMetaSchema = z2.function().args(z2.object({
  suUrl: z2.string().url(),
  processId: z2.string()
})).returns(z2.promise(
  z2.object({
    tags: z2.array(tagSchema)
  }).passthrough()
));
var locateSchedulerSchema = z2.function().args(z2.string()).returns(z2.promise(
  z2.object({
    url: z2.string()
  })
));
var validateSchedulerSchema = z2.function().args(z2.string()).returns(z2.promise(z2.boolean()));
var loadTransactionMetaSchema = z2.function().args(z2.string()).returns(z2.promise(
  z2.object({
    tags: z2.array(tagSchema)
  }).passthrough()
));
var signerSchema = z2.function().args(z2.object({
  data: z2.any(),
  tags: z2.array(tagSchema),
  /**
   * target must be set with writeMessage,
   * but not for createProcess
   */
  target: z2.string().optional(),
  anchor: z2.string().optional()
})).returns(z2.promise(
  z2.object({
    id: z2.string(),
    raw: z2.any()
  })
));
function readWith({ loadResult }) {
  loadResult = fromPromise(loadResultSchema.implement(loadResult));
  return (ctx) => {
    return of({ id: ctx.id, processId: ctx.processId }).chain(loadResult);
  };
}
function resultWith(env) {
  const verifyInput = verifyInputWith(env);
  const read = readWith(env);
  return ({ message: message2, process: process2 }) => {
    return of({ id: message2, processId: process2 }).chain(verifyInput).chain(read).map(
      env.logger.tap(
        'readResult result for message "%s": %O',
        message2
      )
    ).map((result2) => result2).bimap(errFrom, identity_default).toPromise();
  };
}
var tagSchema2 = z2.array(z2.object({
  name: z2.string(),
  value: z2.string()
}));
function buildTagsWith() {
  return (ctx) => {
    return of(ctx.tags).map(defaultTo_default([])).map(removeTagsByNameMaybeValue("Data-Protocol", "ao")).map(removeTagsByNameMaybeValue("Variant")).map(removeTagsByNameMaybeValue("Type")).map(removeTagsByNameMaybeValue("SDK")).map(concat_default(__default, [
      { name: "Data-Protocol", value: "ao" },
      { name: "Variant", value: "ao.TN.1" },
      { name: "Type", value: "Message" },
      { name: "SDK", value: "aoconnect" }
    ])).map(tagSchema2.parse).map(assoc_default("tags", __default, ctx));
  };
}
function buildDataWith({ logger }) {
  return (ctx) => {
    return of(ctx).chain(ifElse_default(
      always_default(ctx.data),
      /**
       * data is provided as input, so do nothing
       */
      () => Resolved(ctx),
      /**
       * No data is provided, so replace with one space
       */
      () => Resolved(" ").map(assoc_default("data", __default, ctx)).map(
        (ctx2) => pipe(
          prop_default("tags"),
          removeTagsByNameMaybeValue("Content-Type"),
          append_default({ name: "Content-Type", value: "text/plain" }),
          assoc_default("tags", __default, ctx2)
        )(ctx2)
      ).map(logger.tap('added pseudo-random string as message "data"'))
    ));
  };
}
function uploadMessageWith(env) {
  const buildTags = buildTagsWith(env);
  const buildData = buildDataWith(env);
  const deployMessage = deployMessageSchema.implement(env.deployMessage);
  return (ctx) => {
    return of(ctx).chain(buildTags).chain(buildData).chain(fromPromise(
      ({ id, data, tags, anchor, signer }) => deployMessage({ processId: id, data, tags, anchor, signer: signerSchema.implement(signer) })
    )).map((res) => assoc_default("messageId", res.messageId, ctx));
  };
}
function messageWith(env) {
  const uploadMessage = uploadMessageWith(env);
  return ({ process: process2, data, tags, anchor, signer }) => {
    return of({ id: process2, data, tags, anchor, signer }).chain(uploadMessage).map((ctx) => ctx.messageId).bimap(errFrom, identity_default).toPromise();
  };
}
var checkTag = (name, pred, err) => (tags) => pred(tags[name]) ? Resolved(tags) : Rejected(`Tag '${name}': ${err}`);
function verifyModuleWith({ loadTransactionMeta, logger }) {
  loadTransactionMeta = fromPromise(loadTransactionMetaSchema.implement(loadTransactionMeta));
  return (module2) => of(module2).chain(loadTransactionMeta).map(prop_default("tags")).map(parseTags).chain(checkTag("Data-Protocol", eqOrIncludes("ao"), "value 'ao' was not found on module")).chain(checkTag("Type", eqOrIncludes("Module"), "value 'Module' was not found on module")).chain(checkTag("Module-Format", isNotNil_default, "was not found on module")).chain(checkTag("Input-Encoding", isNotNil_default, "was not found on module")).chain(checkTag("Output-Encoding", isNotNil_default, "was not found on module")).bimap(
    logger.tap("Verifying module source failed: %s"),
    logger.tap("Verified module source")
  );
}
function verifySchedulerWith({ logger, validateScheduler }) {
  validateScheduler = fromPromise(validateSchedulerSchema.implement(validateScheduler));
  return (scheduler) => of(scheduler).chain(
    (scheduler2) => validateScheduler(scheduler2).chain((isValid2) => isValid2 ? Resolved(scheduler2) : Rejected(`Valid Scheduler-Location owned by ${scheduler2} not found`))
  ).bimap(
    logger.tap("Verifying scheduler failed: %s"),
    logger.tap("Verified scheduler")
  );
}
function verifySignerWith({ logger }) {
  return (signer) => of(signer).map(logger.tap("Checking for signer")).chain((signer2) => signer2 ? Resolved(signer2) : Rejected("signer not found"));
}
function verifyInputsWith(env) {
  const logger = env.logger.child("verifyInput");
  env = { ...env, logger };
  const verifyModule = verifyModuleWith(env);
  const verifyScheduler = verifySchedulerWith(env);
  const verifySigner = verifySignerWith(env);
  return (ctx) => {
    return of(ctx).chain((ctx2) => verifyModule(ctx2.module).map(() => ctx2)).chain((ctx2) => verifyScheduler(ctx2.scheduler)).map(() => ctx).chain((ctx2) => verifySigner(ctx2.signer).map(() => ctx2)).bimap(
      logger.tap("Error when verify input: %s"),
      logger.tap("Successfully verified inputs")
    );
  };
}
var tagSchema3 = z2.array(z2.object({
  name: z2.string(),
  value: z2.string()
}));
function buildTagsWith2() {
  return (ctx) => {
    return of(ctx).map(prop_default("tags")).map(defaultTo_default([])).map(removeTagsByNameMaybeValue("Data-Protocol", "ao")).map(removeTagsByNameMaybeValue("Variant")).map(removeTagsByNameMaybeValue("Type")).map(removeTagsByNameMaybeValue("Module")).map(removeTagsByNameMaybeValue("Scheduler")).map(removeTagsByNameMaybeValue("SDK")).map(concat_default(__default, [
      { name: "Data-Protocol", value: "ao" },
      { name: "Variant", value: "ao.TN.1" },
      { name: "Type", value: "Process" },
      { name: "Module", value: ctx.module },
      { name: "Scheduler", value: ctx.scheduler },
      { name: "SDK", value: "aoconnect" }
    ])).map(tagSchema3.parse).map(assoc_default("tags", __default, ctx));
  };
}
function buildDataWith2({ logger }) {
  return (ctx) => {
    return of(ctx).chain(ifElse_default(
      always_default(ctx.data),
      /**
       * data is provided as input, so do nothing
       */
      () => Resolved(ctx),
      /**
       * No data is provided, so replace with one space
       */
      () => Resolved(" ").map(assoc_default("data", __default, ctx)).map(
        (ctx2) => pipe(
          prop_default("tags"),
          removeTagsByNameMaybeValue("Content-Type"),
          append_default({ name: "Content-Type", value: "text/plain" }),
          assoc_default("tags", __default, ctx2)
        )(ctx2)
      ).map(logger.tap('added pseudo-random string as process "data"'))
    ));
  };
}
function uploadProcessWith(env) {
  const logger = env.logger.child("uploadProcess");
  env = { ...env, logger };
  const buildTags = buildTagsWith2(env);
  const buildData = buildDataWith2(env);
  const deployProcess = deployProcessSchema.implement(env.deployProcess);
  return (ctx) => {
    return of(ctx).chain(buildTags).chain(buildData).chain(fromPromise(
      ({ data, tags, signer }) => deployProcess({ data, tags, signer: signerSchema.implement(signer) })
    )).map((res) => assoc_default("processId", res.processId, ctx));
  };
}
function spawnWith(env) {
  const verifyInputs = verifyInputsWith(env);
  const uploadProcess = uploadProcessWith(env);
  return ({ module: module2, scheduler, signer, tags, data }) => {
    return of({ module: module2, scheduler, signer, tags, data }).chain(verifyInputs).chain(uploadProcess).map((ctx) => ctx.processId).bimap(errFrom, identity_default).toPromise();
  };
}
function uploadMonitorWith(env) {
  const deployMonitor = deployMonitorSchema.implement(env.deployMonitor);
  return (ctx) => {
    return of(ctx).chain(fromPromise(
      ({ id, signer }) => deployMonitor({
        processId: id,
        signer: signerSchema.implement(signer),
        /**
         * No tags or data can be provided right now,
         *
         * so just set data to single space and set tags to an empty array
         */
        data: " ",
        tags: []
      })
    )).map((res) => assoc_default("monitorId", res.messageId, ctx));
  };
}
function monitorWith(env) {
  const uploadMonitor = uploadMonitorWith(env);
  return ({ process: process2, signer }) => of({ id: process2, signer }).chain(uploadMonitor).map((ctx) => ctx.monitorId).bimap(errFrom, identity_default).toPromise();
}
function uploadUnmonitorWith(env) {
  const deployUnmonitor = deployMonitorSchema.implement(env.deployUnmonitor);
  return (ctx) => {
    return of(ctx).chain(fromPromise(
      ({ id, signer }) => deployUnmonitor({
        processId: id,
        signer: signerSchema.implement(signer),
        /**
         * No tags or data can be provided right now,
         *
         * so just set data to single space and set tags to an empty array
         */
        data: " ",
        tags: []
      })
    )).map((res) => assoc_default("monitorId", res.messageId, ctx));
  };
}
function unmonitorWith(env) {
  const uploadUnmonitor = uploadUnmonitorWith(env);
  return ({ process: process2, signer }) => of({ id: process2, signer }).chain(uploadUnmonitor).map((ctx) => ctx.monitorId).bimap(errFrom, identity_default).toPromise();
}
var inputSchema2 = z2.object({
  process: z2.string().min(1, { message: "process identifier is required" }),
  from: z2.string().optional(),
  to: z2.string().optional(),
  sort: z2.enum(["ASC", "DESC"]).default("ASC"),
  limit: z2.number().optional()
});
function verifyInputWith2() {
  return (ctx) => {
    return of(ctx).map(inputSchema2.parse).map(() => ctx);
  };
}
function queryWith({ queryResults }) {
  queryResults = fromPromise(queryResultsSchema.implement(queryResults));
  return (ctx) => {
    return of({ process: ctx.process, from: ctx.from, to: ctx.to, sort: ctx.sort, limit: ctx.limit }).chain(queryResults);
  };
}
function resultsWith(env) {
  const verifyInput = verifyInputWith2(env);
  const query = queryWith(env);
  return ({ process: process2, from, to, sort, limit }) => {
    return of({ process: process2, from, to, sort, limit }).chain(verifyInput).chain(query).map(
      env.logger.tap(
        'readResults result for message "%s": %O',
        process2
      )
    ).map((result2) => result2).bimap(errFrom, identity_default).toPromise();
  };
}
var inputSchema3 = z2.object({
  Id: z2.string(),
  Target: z2.string(),
  Owner: z2.string(),
  Anchor: z2.string().optional(),
  Data: z2.any().default("1234"),
  Tags: z2.array(z2.object({ name: z2.string(), value: z2.string() }))
});
function verifyInputWith3() {
  return (msg) => {
    return of(msg).map(inputSchema3.parse).map((m2) => {
      m2.Tags = m2.Tags.concat([
        { name: "Data-Protocol", value: "ao" },
        { name: "Type", value: "Message" },
        { name: "Variant", value: "ao.TN.1" }
      ]);
      return m2;
    });
  };
}
function runWith({ dryrunFetch }) {
  return fromPromise(dryrunResultSchema.implement(dryrunFetch));
}
function dryrunWith(env) {
  const verifyInput = verifyInputWith3(env);
  const dryrun2 = runWith(env);
  return (msg) => of(msg).map(convert).chain(verifyInput).chain(dryrun2).toPromise();
}
function convert({ process: process2, data, tags, anchor, ...rest }) {
  return {
    Id: "1234",
    Owner: "1234",
    ...rest,
    Target: process2,
    Data: data || "1234",
    Tags: tags || [],
    Anchor: anchor || "0"
  };
}
function sendAssignWith(env) {
  const deployAssign = deployAssignSchema.implement(env.deployAssign);
  return (ctx) => {
    return of(ctx).chain(fromPromise(
      ({ process: process2, message: message2, baseLayer, exclude }) => deployAssign({ process: process2, message: message2, baseLayer, exclude })
    )).map((res) => assoc_default("assignmentId", res.assignmentId, ctx));
  };
}
function assignWith(env) {
  const sendAssign = sendAssignWith(env);
  return ({ process: process2, message: message2, baseLayer, exclude }) => {
    return of({ process: process2, message: message2, baseLayer, exclude }).chain(sendAssign).map((ctx) => ctx.assignmentId).bimap(errFrom, identity_default).toPromise();
  };
}
var DEFAULT_GATEWAY_URL = "https://arweave.net";
var DEFAULT_MU_URL = "https://mu.ao-testnet.xyz";
var DEFAULT_CU_URL = "https://cu.ao-testnet.xyz";
function connect({
  GRAPHQL_URL: GRAPHQL_URL2,
  GRAPHQL_MAX_RETRIES: GRAPHQL_MAX_RETRIES2,
  GRAPHQL_RETRY_BACKOFF: GRAPHQL_RETRY_BACKOFF2,
  GATEWAY_URL: GATEWAY_URL2 = DEFAULT_GATEWAY_URL,
  MU_URL: MU_URL2 = DEFAULT_MU_URL,
  CU_URL: CU_URL2 = DEFAULT_CU_URL
} = {}) {
  const logger = createLogger();
  if (!GRAPHQL_URL2) GRAPHQL_URL2 = joinUrl({ url: GATEWAY_URL2, path: "/graphql" });
  const { validate } = en({ cacheSize: 100, GRAPHQL_URL: GRAPHQL_URL2, GRAPHQL_MAX_RETRIES: GRAPHQL_MAX_RETRIES2, GRAPHQL_RETRY_BACKOFF: GRAPHQL_RETRY_BACKOFF2 });
  const processMetaCache2 = createProcessMetaCache({ MAX_SIZE: 25 });
  const resultLogger = logger.child("result");
  const result2 = resultWith({
    loadResult: loadResultWith({ fetch, CU_URL: CU_URL2, logger: resultLogger }),
    logger: resultLogger
  });
  const messageLogger = logger.child("message");
  const message2 = messageWith({
    loadProcessMeta: loadProcessMetaWith({
      fetch,
      cache: processMetaCache2,
      logger: messageLogger
    }),
    // locateScheduler: locate,
    deployMessage: deployMessageWith({ fetch, MU_URL: MU_URL2, logger: messageLogger }),
    logger: messageLogger
  });
  const spawnLogger = logger.child("spawn");
  const spawn2 = spawnWith({
    loadTransactionMeta: loadTransactionMetaWith({ fetch, GRAPHQL_URL: GRAPHQL_URL2, logger: spawnLogger }),
    validateScheduler: validate,
    deployProcess: deployProcessWith({ fetch, MU_URL: MU_URL2, logger: spawnLogger }),
    logger: spawnLogger
  });
  const monitorLogger = logger.child("monitor");
  const monitor2 = monitorWith({
    loadProcessMeta: loadProcessMetaWith({
      fetch,
      cache: processMetaCache2,
      logger: monitorLogger
    }),
    // locateScheduler: locate,
    deployMonitor: deployMonitorWith({ fetch, MU_URL: MU_URL2, logger: monitorLogger }),
    logger: monitorLogger
  });
  const unmonitorLogger = logger.child("unmonitor");
  const unmonitor2 = unmonitorWith({
    loadProcessMeta: loadProcessMetaWith({
      fetch,
      cache: processMetaCache2,
      logger: unmonitorLogger
    }),
    // locateScheduler: locate,
    deployUnmonitor: deployUnmonitorWith({ fetch, MU_URL: MU_URL2, logger: unmonitorLogger }),
    logger: monitorLogger
  });
  const resultsLogger = logger.child("results");
  const results2 = resultsWith({
    queryResults: queryResultsWith({ fetch, CU_URL: CU_URL2, logger: resultsLogger }),
    logger: resultsLogger
  });
  const dryrunLogger = logger.child("dryrun");
  const dryrun2 = dryrunWith({
    dryrunFetch: dryrunFetchWith({ fetch, CU_URL: CU_URL2, logger: dryrunLogger }),
    logger: dryrunLogger
  });
  const assignLogger = logger.child("assign");
  const assign2 = assignWith({
    deployAssign: deployAssignWith({
      fetch,
      MU_URL: MU_URL2,
      logger: assignLogger
    }),
    logger: messageLogger
  });
  return { result: result2, results: results2, message: message2, spawn: spawn2, monitor: monitor2, unmonitor: unmonitor2, dryrun: dryrun2, assign: assign2 };
}
var wallet_exports = {};
__export2(wallet_exports, {
  createDataItemSigner: () => createDataItemSigner
});
var import_buffer = __toESM2(require_buffer(), 1);
var bundle_exports = {};
__export2(bundle_exports, {
  AVSCTap: () => $2,
  ArweaveSigner: () => N2,
  DataItem: () => _2,
  MAX_TAG_BYTES: () => tt2,
  MIN_BINARY_SIZE: () => gr2,
  SIG_CONFIG: () => P2,
  SignatureConfig: () => B,
  Signer: () => ot2,
  createData: () => ge2,
  default: () => wn2,
  deserializeTags: () => Q,
  indexToType: () => wt2,
  serializeTags: () => dt2,
  tagsExceedLimit: () => jr2,
  warparbundles: () => dn2
});
var xr2 = Object.create;
var it2 = Object.defineProperty;
var mr2 = Object.getOwnPropertyDescriptor;
var Br2 = Object.getOwnPropertyNames;
var Er2 = Object.getPrototypeOf;
var br2 = Object.prototype.hasOwnProperty;
var T2 = (e, t) => () => (t || e((t = { exports: {} }).exports, t), t.exports);
var Ar2 = (e, t) => {
  for (var r18 in t) it2(e, r18, { get: t[r18], enumerable: true });
};
var Tr2 = (e, t, r18, n) => {
  if (t && typeof t == "object" || typeof t == "function") for (let i of Br2(t)) !br2.call(e, i) && i !== r18 && it2(e, i, { get: () => t[i], enumerable: !(n = mr2(t, i)) || n.enumerable });
  return e;
};
var C = (e, t, r18) => (r18 = e != null ? xr2(Er2(e)) : {}, Tr2(t || !e || !e.__esModule ? it2(r18, "default", { value: e, enumerable: true }) : r18, e));
var Rt2 = T2((st2) => {
  "use strict";
  Object.defineProperty(st2, "__esModule", { value: true });
  function Ir2(e) {
    var t = 4, r18 = e.length, n = r18 % t;
    if (!n) return e;
    var i = r18, o = t - n, s = r18 + o, u = Buffer.alloc(s);
    for (u.write(e); o--; ) u.write("=", i++);
    return u.toString();
  }
  st2.default = Ir2;
});
var Dt2 = T2((ht2) => {
  "use strict";
  Object.defineProperty(ht2, "__esModule", { value: true });
  var Sr2 = Rt2();
  function Ct2(e, t) {
    return t === void 0 && (t = "utf8"), Buffer.isBuffer(e) ? at2(e.toString("base64")) : at2(Buffer.from(e, t).toString("base64"));
  }
  function Ur2(e, t) {
    return t === void 0 && (t = "utf8"), Buffer.from(ut2(e), "base64").toString(t);
  }
  function ut2(e) {
    return e = e.toString(), Sr2.default(e).replace(/\-/g, "+").replace(/_/g, "/");
  }
  function at2(e) {
    return e.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
  }
  function Fr2(e) {
    return Buffer.from(ut2(e), "base64");
  }
  var O = Ct2;
  O.encode = Ct2;
  O.decode = Ur2;
  O.toBase64 = ut2;
  O.fromBase64 = at2;
  O.toBuffer = Fr2;
  ht2.default = O;
});
var z3 = T2((me2, V) => {
  V.exports = Dt2().default;
  V.exports.default = V.exports;
});
var ct2 = T2((J2) => {
  "use strict";
  J2.byteLength = _r22;
  J2.toByteArray = Cr2;
  J2.fromByteArray = Nr2;
  var b2 = [], m2 = [], Lr2 = typeof Uint8Array < "u" ? Uint8Array : Array, ft2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (D2 = 0, Pt2 = ft2.length; D2 < Pt2; ++D2) b2[D2] = ft2[D2], m2[ft2.charCodeAt(D2)] = D2;
  var D2, Pt2;
  m2["-".charCodeAt(0)] = 62;
  m2["_".charCodeAt(0)] = 63;
  function Nt2(e) {
    var t = e.length;
    if (t % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    var r18 = e.indexOf("=");
    r18 === -1 && (r18 = t);
    var n = r18 === t ? 0 : 4 - r18 % 4;
    return [r18, n];
  }
  function _r22(e) {
    var t = Nt2(e), r18 = t[0], n = t[1];
    return (r18 + n) * 3 / 4 - n;
  }
  function Rr2(e, t, r18) {
    return (t + r18) * 3 / 4 - r18;
  }
  function Cr2(e) {
    var t, r18 = Nt2(e), n = r18[0], i = r18[1], o = new Lr2(Rr2(e, n, i)), s = 0, u = i > 0 ? n - 4 : n, h;
    for (h = 0; h < u; h += 4) t = m2[e.charCodeAt(h)] << 18 | m2[e.charCodeAt(h + 1)] << 12 | m2[e.charCodeAt(h + 2)] << 6 | m2[e.charCodeAt(h + 3)], o[s++] = t >> 16 & 255, o[s++] = t >> 8 & 255, o[s++] = t & 255;
    return i === 2 && (t = m2[e.charCodeAt(h)] << 2 | m2[e.charCodeAt(h + 1)] >> 4, o[s++] = t & 255), i === 1 && (t = m2[e.charCodeAt(h)] << 10 | m2[e.charCodeAt(h + 1)] << 4 | m2[e.charCodeAt(h + 2)] >> 2, o[s++] = t >> 8 & 255, o[s++] = t & 255), o;
  }
  function Dr2(e) {
    return b2[e >> 18 & 63] + b2[e >> 12 & 63] + b2[e >> 6 & 63] + b2[e & 63];
  }
  function Pr2(e, t, r18) {
    for (var n, i = [], o = t; o < r18; o += 3) n = (e[o] << 16 & 16711680) + (e[o + 1] << 8 & 65280) + (e[o + 2] & 255), i.push(Dr2(n));
    return i.join("");
  }
  function Nr2(e) {
    for (var t, r18 = e.length, n = r18 % 3, i = [], o = 16383, s = 0, u = r18 - n; s < u; s += o) i.push(Pr2(e, s, s + o > u ? u : s + o));
    return n === 1 ? (t = e[r18 - 1], i.push(b2[t >> 2] + b2[t << 4 & 63] + "==")) : n === 2 && (t = (e[r18 - 2] << 8) + e[r18 - 1], i.push(b2[t >> 10] + b2[t >> 4 & 63] + b2[t << 2 & 63] + "=")), i.join("");
  }
});
var pt2 = T2((g2) => {
  "use strict";
  Object.defineProperty(g2, "__esModule", { value: true });
  g2.b64UrlDecode = g2.b64UrlEncode = g2.bufferTob64Url = g2.bufferTob64 = g2.b64UrlToBuffer = g2.stringToB64Url = g2.stringToBuffer = g2.bufferToString = g2.b64UrlToString = g2.concatBuffers = void 0;
  var kt2 = ct2();
  function kr2(e) {
    let t = 0;
    for (let i = 0; i < e.length; i++) t += e[i].byteLength;
    let r18 = new Uint8Array(t), n = 0;
    r18.set(new Uint8Array(e[0]), n), n += e[0].byteLength;
    for (let i = 1; i < e.length; i++) r18.set(new Uint8Array(e[i]), n), n += e[i].byteLength;
    return r18;
  }
  g2.concatBuffers = kr2;
  function Mr2(e) {
    let t = $t2(e);
    return Mt2(t);
  }
  g2.b64UrlToString = Mr2;
  function Mt2(e) {
    return new TextDecoder("utf-8", { fatal: true }).decode(e);
  }
  g2.bufferToString = Mt2;
  function Ot2(e) {
    return new TextEncoder().encode(e);
  }
  g2.stringToBuffer = Ot2;
  function Or2(e) {
    return Ht2(Ot2(e));
  }
  g2.stringToB64Url = Or2;
  function $t2(e) {
    return new Uint8Array(kt2.toByteArray(qt2(e)));
  }
  g2.b64UrlToBuffer = $t2;
  function Kt2(e) {
    return kt2.fromByteArray(new Uint8Array(e));
  }
  g2.bufferTob64 = Kt2;
  function Ht2(e) {
    return jt2(Kt2(e));
  }
  g2.bufferTob64Url = Ht2;
  function jt2(e) {
    return e.replace(/\+/g, "-").replace(/\//g, "_").replace(/\=/g, "");
  }
  g2.b64UrlEncode = jt2;
  function qt2(e) {
    e = e.replace(/\-/g, "+").replace(/\_/g, "/");
    let t;
    return e.length % 4 == 0 ? t = 0 : t = 4 - e.length % 4, e.concat("=".repeat(t));
  }
  g2.b64UrlDecode = qt2;
});
var Yt = T2((gt2) => {
  "use strict";
  Object.defineProperty(gt2, "__esModule", { value: true });
  var F3 = pt2(), lt2 = class {
    constructor() {
      __publicField(this, "keyLength", 4096);
      __publicField(this, "publicExponent", 65537);
      __publicField(this, "hashAlgorithm", "sha256");
      __publicField(this, "driver");
      if (!this.detectWebCrypto()) throw new Error("SubtleCrypto not available!");
      this.driver = crypto.subtle;
    }
    async generateJWK() {
      let t = await this.driver.generateKey({ name: "RSA-PSS", modulusLength: 4096, publicExponent: new Uint8Array([1, 0, 1]), hash: { name: "SHA-256" } }, true, ["sign"]), r18 = await this.driver.exportKey("jwk", t.privateKey);
      return { kty: r18.kty, e: r18.e, n: r18.n, d: r18.d, p: r18.p, q: r18.q, dp: r18.dp, dq: r18.dq, qi: r18.qi };
    }
    async sign(t, r18, { saltLength: n } = {}) {
      let i = await this.driver.sign({ name: "RSA-PSS", saltLength: 32 }, await this.jwkToCryptoKey(t), r18);
      return new Uint8Array(i);
    }
    async hash(t, r18 = "SHA-256") {
      let n = await this.driver.digest(r18, t);
      return new Uint8Array(n);
    }
    async verify(t, r18, n) {
      let i = { kty: "RSA", e: "AQAB", n: t }, o = await this.jwkToPublicCryptoKey(i), s = await this.driver.digest("SHA-256", r18), u = await this.driver.verify({ name: "RSA-PSS", saltLength: 0 }, o, n, r18), h = await this.driver.verify({ name: "RSA-PSS", saltLength: 32 }, o, n, r18), p2 = await this.driver.verify({ name: "RSA-PSS", saltLength: Math.ceil((o.algorithm.modulusLength - 1) / 8) - s.byteLength - 2 }, o, n, r18);
      return u || h || p2;
    }
    async jwkToCryptoKey(t) {
      return this.driver.importKey("jwk", t, { name: "RSA-PSS", hash: { name: "SHA-256" } }, false, ["sign"]);
    }
    async jwkToPublicCryptoKey(t) {
      return this.driver.importKey("jwk", t, { name: "RSA-PSS", hash: { name: "SHA-256" } }, false, ["verify"]);
    }
    detectWebCrypto() {
      if (typeof crypto > "u") return false;
      let t = crypto == null ? void 0 : crypto.subtle;
      return t === void 0 ? false : ["generateKey", "importKey", "exportKey", "digest", "sign"].every((n) => typeof t[n] == "function");
    }
    async encrypt(t, r18, n) {
      let i = await this.driver.importKey("raw", typeof r18 == "string" ? F3.stringToBuffer(r18) : r18, { name: "PBKDF2", length: 32 }, false, ["deriveKey"]), o = await this.driver.deriveKey({ name: "PBKDF2", salt: n ? F3.stringToBuffer(n) : F3.stringToBuffer("salt"), iterations: 1e5, hash: "SHA-256" }, i, { name: "AES-CBC", length: 256 }, false, ["encrypt", "decrypt"]), s = new Uint8Array(16);
      crypto.getRandomValues(s);
      let u = await this.driver.encrypt({ name: "AES-CBC", iv: s }, o, t);
      return F3.concatBuffers([s, u]);
    }
    async decrypt(t, r18, n) {
      let i = await this.driver.importKey("raw", typeof r18 == "string" ? F3.stringToBuffer(r18) : r18, { name: "PBKDF2", length: 32 }, false, ["deriveKey"]), o = await this.driver.deriveKey({ name: "PBKDF2", salt: n ? F3.stringToBuffer(n) : F3.stringToBuffer("salt"), iterations: 1e5, hash: "SHA-256" }, i, { name: "AES-CBC", length: 256 }, false, ["encrypt", "decrypt"]), s = t.slice(0, 16), u = await this.driver.decrypt({ name: "AES-CBC", iv: s }, o, t.slice(16));
      return F3.concatBuffers([u]);
    }
  };
  gt2.default = lt2;
});
var zt2 = T2((mt2) => {
  mt2.read = function(e, t, r18, n, i) {
    var o, s, u = i * 8 - n - 1, h = (1 << u) - 1, p2 = h >> 1, f2 = -7, c2 = r18 ? i - 1 : 0, U2 = r18 ? -1 : 1, l = e[t + c2];
    for (c2 += U2, o = l & (1 << -f2) - 1, l >>= -f2, f2 += u; f2 > 0; o = o * 256 + e[t + c2], c2 += U2, f2 -= 8) ;
    for (s = o & (1 << -f2) - 1, o >>= -f2, f2 += n; f2 > 0; s = s * 256 + e[t + c2], c2 += U2, f2 -= 8) ;
    if (o === 0) o = 1 - p2;
    else {
      if (o === h) return s ? NaN : (l ? -1 : 1) * (1 / 0);
      s = s + Math.pow(2, n), o = o - p2;
    }
    return (l ? -1 : 1) * s * Math.pow(2, o - n);
  };
  mt2.write = function(e, t, r18, n, i, o) {
    var s, u, h, p2 = o * 8 - i - 1, f2 = (1 << p2) - 1, c2 = f2 >> 1, U2 = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, l = n ? 0 : o - 1, R2 = n ? 1 : -1, G2 = t < 0 || t === 0 && 1 / t < 0 ? 1 : 0;
    for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (u = isNaN(t) ? 1 : 0, s = f2) : (s = Math.floor(Math.log(t) / Math.LN2), t * (h = Math.pow(2, -s)) < 1 && (s--, h *= 2), s + c2 >= 1 ? t += U2 / h : t += U2 * Math.pow(2, 1 - c2), t * h >= 2 && (s++, h /= 2), s + c2 >= f2 ? (u = 0, s = f2) : s + c2 >= 1 ? (u = (t * h - 1) * Math.pow(2, i), s = s + c2) : (u = t * Math.pow(2, c2 - 1) * Math.pow(2, i), s = 0)); i >= 8; e[r18 + l] = u & 255, l += R2, u /= 256, i -= 8) ;
    for (s = s << i | u, p2 += i; p2 > 0; e[r18 + l] = s & 255, l += R2, s /= 256, p2 -= 8) ;
    e[r18 + l - R2] |= G2 * 128;
  };
});
var nt2 = T2((q2) => {
  "use strict";
  var Bt2 = ct2(), H2 = zt2(), Jt = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
  q2.Buffer = a;
  q2.SlowBuffer = Vr2;
  q2.INSPECT_MAX_BYTES = 50;
  var rt2 = 2147483647;
  q2.kMaxLength = rt2;
  a.TYPED_ARRAY_SUPPORT = qr2();
  !a.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
  function qr2() {
    try {
      let e = new Uint8Array(1), t = { foo: function() {
        return 42;
      } };
      return Object.setPrototypeOf(t, Uint8Array.prototype), Object.setPrototypeOf(e, t), e.foo() === 42;
    } catch (e) {
      return false;
    }
  }
  Object.defineProperty(a.prototype, "parent", { enumerable: true, get: function() {
    if (a.isBuffer(this)) return this.buffer;
  } });
  Object.defineProperty(a.prototype, "offset", { enumerable: true, get: function() {
    if (a.isBuffer(this)) return this.byteOffset;
  } });
  function S(e) {
    if (e > rt2) throw new RangeError('The value "' + e + '" is invalid for option "size"');
    let t = new Uint8Array(e);
    return Object.setPrototypeOf(t, a.prototype), t;
  }
  function a(e, t, r18) {
    if (typeof e == "number") {
      if (typeof t == "string") throw new TypeError('The "string" argument must be of type string. Received type number');
      return Tt2(e);
    }
    return tr2(e, t, r18);
  }
  a.poolSize = 8192;
  function tr2(e, t, r18) {
    if (typeof e == "string") return Yr2(e, t);
    if (ArrayBuffer.isView(e)) return vr2(e);
    if (e == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
    if (A(e, ArrayBuffer) || e && A(e.buffer, ArrayBuffer) || typeof SharedArrayBuffer < "u" && (A(e, SharedArrayBuffer) || e && A(e.buffer, SharedArrayBuffer))) return bt2(e, t, r18);
    if (typeof e == "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    let n = e.valueOf && e.valueOf();
    if (n != null && n !== e) return a.from(n, t, r18);
    let i = Wr2(e);
    if (i) return i;
    if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof e[Symbol.toPrimitive] == "function") return a.from(e[Symbol.toPrimitive]("string"), t, r18);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
  }
  a.from = function(e, t, r18) {
    return tr2(e, t, r18);
  };
  Object.setPrototypeOf(a.prototype, Uint8Array.prototype);
  Object.setPrototypeOf(a, Uint8Array);
  function rr2(e) {
    if (typeof e != "number") throw new TypeError('"size" argument must be of type number');
    if (e < 0) throw new RangeError('The value "' + e + '" is invalid for option "size"');
  }
  function Gr2(e, t, r18) {
    return rr2(e), e <= 0 ? S(e) : t !== void 0 ? typeof r18 == "string" ? S(e).fill(t, r18) : S(e).fill(t) : S(e);
  }
  a.alloc = function(e, t, r18) {
    return Gr2(e, t, r18);
  };
  function Tt2(e) {
    return rr2(e), S(e < 0 ? 0 : It2(e) | 0);
  }
  a.allocUnsafe = function(e) {
    return Tt2(e);
  };
  a.allocUnsafeSlow = function(e) {
    return Tt2(e);
  };
  function Yr2(e, t) {
    if ((typeof t != "string" || t === "") && (t = "utf8"), !a.isEncoding(t)) throw new TypeError("Unknown encoding: " + t);
    let r18 = er2(e, t) | 0, n = S(r18), i = n.write(e, t);
    return i !== r18 && (n = n.slice(0, i)), n;
  }
  function Et2(e) {
    let t = e.length < 0 ? 0 : It2(e.length) | 0, r18 = S(t);
    for (let n = 0; n < t; n += 1) r18[n] = e[n] & 255;
    return r18;
  }
  function vr2(e) {
    if (A(e, Uint8Array)) {
      let t = new Uint8Array(e);
      return bt2(t.buffer, t.byteOffset, t.byteLength);
    }
    return Et2(e);
  }
  function bt2(e, t, r18) {
    if (t < 0 || e.byteLength < t) throw new RangeError('"offset" is outside of buffer bounds');
    if (e.byteLength < t + (r18 || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let n;
    return t === void 0 && r18 === void 0 ? n = new Uint8Array(e) : r18 === void 0 ? n = new Uint8Array(e, t) : n = new Uint8Array(e, t, r18), Object.setPrototypeOf(n, a.prototype), n;
  }
  function Wr2(e) {
    if (a.isBuffer(e)) {
      let t = It2(e.length) | 0, r18 = S(t);
      return r18.length === 0 || e.copy(r18, 0, 0, t), r18;
    }
    if (e.length !== void 0) return typeof e.length != "number" || Ut2(e.length) ? S(0) : Et2(e);
    if (e.type === "Buffer" && Array.isArray(e.data)) return Et2(e.data);
  }
  function It2(e) {
    if (e >= rt2) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + rt2.toString(16) + " bytes");
    return e | 0;
  }
  function Vr2(e) {
    return +e != e && (e = 0), a.alloc(+e);
  }
  a.isBuffer = function(t) {
    return t != null && t._isBuffer === true && t !== a.prototype;
  };
  a.compare = function(t, r18) {
    if (A(t, Uint8Array) && (t = a.from(t, t.offset, t.byteLength)), A(r18, Uint8Array) && (r18 = a.from(r18, r18.offset, r18.byteLength)), !a.isBuffer(t) || !a.isBuffer(r18)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (t === r18) return 0;
    let n = t.length, i = r18.length;
    for (let o = 0, s = Math.min(n, i); o < s; ++o) if (t[o] !== r18[o]) {
      n = t[o], i = r18[o];
      break;
    }
    return n < i ? -1 : i < n ? 1 : 0;
  };
  a.isEncoding = function(t) {
    switch (String(t).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return true;
      default:
        return false;
    }
  };
  a.concat = function(t, r18) {
    if (!Array.isArray(t)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (t.length === 0) return a.alloc(0);
    let n;
    if (r18 === void 0) for (r18 = 0, n = 0; n < t.length; ++n) r18 += t[n].length;
    let i = a.allocUnsafe(r18), o = 0;
    for (n = 0; n < t.length; ++n) {
      let s = t[n];
      if (A(s, Uint8Array)) o + s.length > i.length ? (a.isBuffer(s) || (s = a.from(s)), s.copy(i, o)) : Uint8Array.prototype.set.call(i, s, o);
      else if (a.isBuffer(s)) s.copy(i, o);
      else throw new TypeError('"list" argument must be an Array of Buffers');
      o += s.length;
    }
    return i;
  };
  function er2(e, t) {
    if (a.isBuffer(e)) return e.length;
    if (ArrayBuffer.isView(e) || A(e, ArrayBuffer)) return e.byteLength;
    if (typeof e != "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof e);
    let r18 = e.length, n = arguments.length > 2 && arguments[2] === true;
    if (!n && r18 === 0) return 0;
    let i = false;
    for (; ; ) switch (t) {
      case "ascii":
      case "latin1":
      case "binary":
        return r18;
      case "utf8":
      case "utf-8":
        return At2(e).length;
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return r18 * 2;
      case "hex":
        return r18 >>> 1;
      case "base64":
        return cr2(e).length;
      default:
        if (i) return n ? -1 : At2(e).length;
        t = ("" + t).toLowerCase(), i = true;
    }
  }
  a.byteLength = er2;
  function zr2(e, t, r18) {
    let n = false;
    if ((t === void 0 || t < 0) && (t = 0), t > this.length || ((r18 === void 0 || r18 > this.length) && (r18 = this.length), r18 <= 0) || (r18 >>>= 0, t >>>= 0, r18 <= t)) return "";
    for (e || (e = "utf8"); ; ) switch (e) {
      case "hex":
        return oe(this, t, r18);
      case "utf8":
      case "utf-8":
        return ir2(this, t, r18);
      case "ascii":
        return ne2(this, t, r18);
      case "latin1":
      case "binary":
        return ie2(this, t, r18);
      case "base64":
        return re2(this, t, r18);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return se2(this, t, r18);
      default:
        if (n) throw new TypeError("Unknown encoding: " + e);
        e = (e + "").toLowerCase(), n = true;
    }
  }
  a.prototype._isBuffer = true;
  function k2(e, t, r18) {
    let n = e[t];
    e[t] = e[r18], e[r18] = n;
  }
  a.prototype.swap16 = function() {
    let t = this.length;
    if (t % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for (let r18 = 0; r18 < t; r18 += 2) k2(this, r18, r18 + 1);
    return this;
  };
  a.prototype.swap32 = function() {
    let t = this.length;
    if (t % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for (let r18 = 0; r18 < t; r18 += 4) k2(this, r18, r18 + 3), k2(this, r18 + 1, r18 + 2);
    return this;
  };
  a.prototype.swap64 = function() {
    let t = this.length;
    if (t % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for (let r18 = 0; r18 < t; r18 += 8) k2(this, r18, r18 + 7), k2(this, r18 + 1, r18 + 6), k2(this, r18 + 2, r18 + 5), k2(this, r18 + 3, r18 + 4);
    return this;
  };
  a.prototype.toString = function() {
    let t = this.length;
    return t === 0 ? "" : arguments.length === 0 ? ir2(this, 0, t) : zr2.apply(this, arguments);
  };
  a.prototype.toLocaleString = a.prototype.toString;
  a.prototype.equals = function(t) {
    if (!a.isBuffer(t)) throw new TypeError("Argument must be a Buffer");
    return this === t ? true : a.compare(this, t) === 0;
  };
  a.prototype.inspect = function() {
    let t = "", r18 = q2.INSPECT_MAX_BYTES;
    return t = this.toString("hex", 0, r18).replace(/(.{2})/g, "$1 ").trim(), this.length > r18 && (t += " ... "), "<Buffer " + t + ">";
  };
  Jt && (a.prototype[Jt] = a.prototype.inspect);
  a.prototype.compare = function(t, r18, n, i, o) {
    if (A(t, Uint8Array) && (t = a.from(t, t.offset, t.byteLength)), !a.isBuffer(t)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof t);
    if (r18 === void 0 && (r18 = 0), n === void 0 && (n = t ? t.length : 0), i === void 0 && (i = 0), o === void 0 && (o = this.length), r18 < 0 || n > t.length || i < 0 || o > this.length) throw new RangeError("out of range index");
    if (i >= o && r18 >= n) return 0;
    if (i >= o) return -1;
    if (r18 >= n) return 1;
    if (r18 >>>= 0, n >>>= 0, i >>>= 0, o >>>= 0, this === t) return 0;
    let s = o - i, u = n - r18, h = Math.min(s, u), p2 = this.slice(i, o), f2 = t.slice(r18, n);
    for (let c2 = 0; c2 < h; ++c2) if (p2[c2] !== f2[c2]) {
      s = p2[c2], u = f2[c2];
      break;
    }
    return s < u ? -1 : u < s ? 1 : 0;
  };
  function nr2(e, t, r18, n, i) {
    if (e.length === 0) return -1;
    if (typeof r18 == "string" ? (n = r18, r18 = 0) : r18 > 2147483647 ? r18 = 2147483647 : r18 < -2147483648 && (r18 = -2147483648), r18 = +r18, Ut2(r18) && (r18 = i ? 0 : e.length - 1), r18 < 0 && (r18 = e.length + r18), r18 >= e.length) {
      if (i) return -1;
      r18 = e.length - 1;
    } else if (r18 < 0) if (i) r18 = 0;
    else return -1;
    if (typeof t == "string" && (t = a.from(t, n)), a.isBuffer(t)) return t.length === 0 ? -1 : Xt2(e, t, r18, n, i);
    if (typeof t == "number") return t = t & 255, typeof Uint8Array.prototype.indexOf == "function" ? i ? Uint8Array.prototype.indexOf.call(e, t, r18) : Uint8Array.prototype.lastIndexOf.call(e, t, r18) : Xt2(e, [t], r18, n, i);
    throw new TypeError("val must be string, number or Buffer");
  }
  function Xt2(e, t, r18, n, i) {
    let o = 1, s = e.length, u = t.length;
    if (n !== void 0 && (n = String(n).toLowerCase(), n === "ucs2" || n === "ucs-2" || n === "utf16le" || n === "utf-16le")) {
      if (e.length < 2 || t.length < 2) return -1;
      o = 2, s /= 2, u /= 2, r18 /= 2;
    }
    function h(f2, c2) {
      return o === 1 ? f2[c2] : f2.readUInt16BE(c2 * o);
    }
    let p2;
    if (i) {
      let f2 = -1;
      for (p2 = r18; p2 < s; p2++) if (h(e, p2) === h(t, f2 === -1 ? 0 : p2 - f2)) {
        if (f2 === -1 && (f2 = p2), p2 - f2 + 1 === u) return f2 * o;
      } else f2 !== -1 && (p2 -= p2 - f2), f2 = -1;
    } else for (r18 + u > s && (r18 = s - u), p2 = r18; p2 >= 0; p2--) {
      let f2 = true;
      for (let c2 = 0; c2 < u; c2++) if (h(e, p2 + c2) !== h(t, c2)) {
        f2 = false;
        break;
      }
      if (f2) return p2;
    }
    return -1;
  }
  a.prototype.includes = function(t, r18, n) {
    return this.indexOf(t, r18, n) !== -1;
  };
  a.prototype.indexOf = function(t, r18, n) {
    return nr2(this, t, r18, n, true);
  };
  a.prototype.lastIndexOf = function(t, r18, n) {
    return nr2(this, t, r18, n, false);
  };
  function Jr2(e, t, r18, n) {
    r18 = Number(r18) || 0;
    let i = e.length - r18;
    n ? (n = Number(n), n > i && (n = i)) : n = i;
    let o = t.length;
    n > o / 2 && (n = o / 2);
    let s;
    for (s = 0; s < n; ++s) {
      let u = parseInt(t.substr(s * 2, 2), 16);
      if (Ut2(u)) return s;
      e[r18 + s] = u;
    }
    return s;
  }
  function Xr2(e, t, r18, n) {
    return et2(At2(t, e.length - r18), e, r18, n);
  }
  function Zr2(e, t, r18, n) {
    return et2(fe2(t), e, r18, n);
  }
  function Qr2(e, t, r18, n) {
    return et2(cr2(t), e, r18, n);
  }
  function te2(e, t, r18, n) {
    return et2(ce2(t, e.length - r18), e, r18, n);
  }
  a.prototype.write = function(t, r18, n, i) {
    if (r18 === void 0) i = "utf8", n = this.length, r18 = 0;
    else if (n === void 0 && typeof r18 == "string") i = r18, n = this.length, r18 = 0;
    else if (isFinite(r18)) r18 = r18 >>> 0, isFinite(n) ? (n = n >>> 0, i === void 0 && (i = "utf8")) : (i = n, n = void 0);
    else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    let o = this.length - r18;
    if ((n === void 0 || n > o) && (n = o), t.length > 0 && (n < 0 || r18 < 0) || r18 > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    i || (i = "utf8");
    let s = false;
    for (; ; ) switch (i) {
      case "hex":
        return Jr2(this, t, r18, n);
      case "utf8":
      case "utf-8":
        return Xr2(this, t, r18, n);
      case "ascii":
      case "latin1":
      case "binary":
        return Zr2(this, t, r18, n);
      case "base64":
        return Qr2(this, t, r18, n);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return te2(this, t, r18, n);
      default:
        if (s) throw new TypeError("Unknown encoding: " + i);
        i = ("" + i).toLowerCase(), s = true;
    }
  };
  a.prototype.toJSON = function() {
    return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
  };
  function re2(e, t, r18) {
    return t === 0 && r18 === e.length ? Bt2.fromByteArray(e) : Bt2.fromByteArray(e.slice(t, r18));
  }
  function ir2(e, t, r18) {
    r18 = Math.min(e.length, r18);
    let n = [], i = t;
    for (; i < r18; ) {
      let o = e[i], s = null, u = o > 239 ? 4 : o > 223 ? 3 : o > 191 ? 2 : 1;
      if (i + u <= r18) {
        let h, p2, f2, c2;
        switch (u) {
          case 1:
            o < 128 && (s = o);
            break;
          case 2:
            h = e[i + 1], (h & 192) === 128 && (c2 = (o & 31) << 6 | h & 63, c2 > 127 && (s = c2));
            break;
          case 3:
            h = e[i + 1], p2 = e[i + 2], (h & 192) === 128 && (p2 & 192) === 128 && (c2 = (o & 15) << 12 | (h & 63) << 6 | p2 & 63, c2 > 2047 && (c2 < 55296 || c2 > 57343) && (s = c2));
            break;
          case 4:
            h = e[i + 1], p2 = e[i + 2], f2 = e[i + 3], (h & 192) === 128 && (p2 & 192) === 128 && (f2 & 192) === 128 && (c2 = (o & 15) << 18 | (h & 63) << 12 | (p2 & 63) << 6 | f2 & 63, c2 > 65535 && c2 < 1114112 && (s = c2));
        }
      }
      s === null ? (s = 65533, u = 1) : s > 65535 && (s -= 65536, n.push(s >>> 10 & 1023 | 55296), s = 56320 | s & 1023), n.push(s), i += u;
    }
    return ee2(n);
  }
  var Zt2 = 4096;
  function ee2(e) {
    let t = e.length;
    if (t <= Zt2) return String.fromCharCode.apply(String, e);
    let r18 = "", n = 0;
    for (; n < t; ) r18 += String.fromCharCode.apply(String, e.slice(n, n += Zt2));
    return r18;
  }
  function ne2(e, t, r18) {
    let n = "";
    r18 = Math.min(e.length, r18);
    for (let i = t; i < r18; ++i) n += String.fromCharCode(e[i] & 127);
    return n;
  }
  function ie2(e, t, r18) {
    let n = "";
    r18 = Math.min(e.length, r18);
    for (let i = t; i < r18; ++i) n += String.fromCharCode(e[i]);
    return n;
  }
  function oe(e, t, r18) {
    let n = e.length;
    (!t || t < 0) && (t = 0), (!r18 || r18 < 0 || r18 > n) && (r18 = n);
    let i = "";
    for (let o = t; o < r18; ++o) i += pe2[e[o]];
    return i;
  }
  function se2(e, t, r18) {
    let n = e.slice(t, r18), i = "";
    for (let o = 0; o < n.length - 1; o += 2) i += String.fromCharCode(n[o] + n[o + 1] * 256);
    return i;
  }
  a.prototype.slice = function(t, r18) {
    let n = this.length;
    t = ~~t, r18 = r18 === void 0 ? n : ~~r18, t < 0 ? (t += n, t < 0 && (t = 0)) : t > n && (t = n), r18 < 0 ? (r18 += n, r18 < 0 && (r18 = 0)) : r18 > n && (r18 = n), r18 < t && (r18 = t);
    let i = this.subarray(t, r18);
    return Object.setPrototypeOf(i, a.prototype), i;
  };
  function y2(e, t, r18) {
    if (e % 1 !== 0 || e < 0) throw new RangeError("offset is not uint");
    if (e + t > r18) throw new RangeError("Trying to access beyond buffer length");
  }
  a.prototype.readUintLE = a.prototype.readUIntLE = function(t, r18, n) {
    t = t >>> 0, r18 = r18 >>> 0, n || y2(t, r18, this.length);
    let i = this[t], o = 1, s = 0;
    for (; ++s < r18 && (o *= 256); ) i += this[t + s] * o;
    return i;
  };
  a.prototype.readUintBE = a.prototype.readUIntBE = function(t, r18, n) {
    t = t >>> 0, r18 = r18 >>> 0, n || y2(t, r18, this.length);
    let i = this[t + --r18], o = 1;
    for (; r18 > 0 && (o *= 256); ) i += this[t + --r18] * o;
    return i;
  };
  a.prototype.readUint8 = a.prototype.readUInt8 = function(t, r18) {
    return t = t >>> 0, r18 || y2(t, 1, this.length), this[t];
  };
  a.prototype.readUint16LE = a.prototype.readUInt16LE = function(t, r18) {
    return t = t >>> 0, r18 || y2(t, 2, this.length), this[t] | this[t + 1] << 8;
  };
  a.prototype.readUint16BE = a.prototype.readUInt16BE = function(t, r18) {
    return t = t >>> 0, r18 || y2(t, 2, this.length), this[t] << 8 | this[t + 1];
  };
  a.prototype.readUint32LE = a.prototype.readUInt32LE = function(t, r18) {
    return t = t >>> 0, r18 || y2(t, 4, this.length), (this[t] | this[t + 1] << 8 | this[t + 2] << 16) + this[t + 3] * 16777216;
  };
  a.prototype.readUint32BE = a.prototype.readUInt32BE = function(t, r18) {
    return t = t >>> 0, r18 || y2(t, 4, this.length), this[t] * 16777216 + (this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3]);
  };
  a.prototype.readBigUInt64LE = L(function(t) {
    t = t >>> 0, j2(t, "offset");
    let r18 = this[t], n = this[t + 7];
    (r18 === void 0 || n === void 0) && W(t, this.length - 8);
    let i = r18 + this[++t] * 2 ** 8 + this[++t] * 2 ** 16 + this[++t] * 2 ** 24, o = this[++t] + this[++t] * 2 ** 8 + this[++t] * 2 ** 16 + n * 2 ** 24;
    return BigInt(i) + (BigInt(o) << BigInt(32));
  });
  a.prototype.readBigUInt64BE = L(function(t) {
    t = t >>> 0, j2(t, "offset");
    let r18 = this[t], n = this[t + 7];
    (r18 === void 0 || n === void 0) && W(t, this.length - 8);
    let i = r18 * 2 ** 24 + this[++t] * 2 ** 16 + this[++t] * 2 ** 8 + this[++t], o = this[++t] * 2 ** 24 + this[++t] * 2 ** 16 + this[++t] * 2 ** 8 + n;
    return (BigInt(i) << BigInt(32)) + BigInt(o);
  });
  a.prototype.readIntLE = function(t, r18, n) {
    t = t >>> 0, r18 = r18 >>> 0, n || y2(t, r18, this.length);
    let i = this[t], o = 1, s = 0;
    for (; ++s < r18 && (o *= 256); ) i += this[t + s] * o;
    return o *= 128, i >= o && (i -= Math.pow(2, 8 * r18)), i;
  };
  a.prototype.readIntBE = function(t, r18, n) {
    t = t >>> 0, r18 = r18 >>> 0, n || y2(t, r18, this.length);
    let i = r18, o = 1, s = this[t + --i];
    for (; i > 0 && (o *= 256); ) s += this[t + --i] * o;
    return o *= 128, s >= o && (s -= Math.pow(2, 8 * r18)), s;
  };
  a.prototype.readInt8 = function(t, r18) {
    return t = t >>> 0, r18 || y2(t, 1, this.length), this[t] & 128 ? (255 - this[t] + 1) * -1 : this[t];
  };
  a.prototype.readInt16LE = function(t, r18) {
    t = t >>> 0, r18 || y2(t, 2, this.length);
    let n = this[t] | this[t + 1] << 8;
    return n & 32768 ? n | 4294901760 : n;
  };
  a.prototype.readInt16BE = function(t, r18) {
    t = t >>> 0, r18 || y2(t, 2, this.length);
    let n = this[t + 1] | this[t] << 8;
    return n & 32768 ? n | 4294901760 : n;
  };
  a.prototype.readInt32LE = function(t, r18) {
    return t = t >>> 0, r18 || y2(t, 4, this.length), this[t] | this[t + 1] << 8 | this[t + 2] << 16 | this[t + 3] << 24;
  };
  a.prototype.readInt32BE = function(t, r18) {
    return t = t >>> 0, r18 || y2(t, 4, this.length), this[t] << 24 | this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3];
  };
  a.prototype.readBigInt64LE = L(function(t) {
    t = t >>> 0, j2(t, "offset");
    let r18 = this[t], n = this[t + 7];
    (r18 === void 0 || n === void 0) && W(t, this.length - 8);
    let i = this[t + 4] + this[t + 5] * 2 ** 8 + this[t + 6] * 2 ** 16 + (n << 24);
    return (BigInt(i) << BigInt(32)) + BigInt(r18 + this[++t] * 2 ** 8 + this[++t] * 2 ** 16 + this[++t] * 2 ** 24);
  });
  a.prototype.readBigInt64BE = L(function(t) {
    t = t >>> 0, j2(t, "offset");
    let r18 = this[t], n = this[t + 7];
    (r18 === void 0 || n === void 0) && W(t, this.length - 8);
    let i = (r18 << 24) + this[++t] * 2 ** 16 + this[++t] * 2 ** 8 + this[++t];
    return (BigInt(i) << BigInt(32)) + BigInt(this[++t] * 2 ** 24 + this[++t] * 2 ** 16 + this[++t] * 2 ** 8 + n);
  });
  a.prototype.readFloatLE = function(t, r18) {
    return t = t >>> 0, r18 || y2(t, 4, this.length), H2.read(this, t, true, 23, 4);
  };
  a.prototype.readFloatBE = function(t, r18) {
    return t = t >>> 0, r18 || y2(t, 4, this.length), H2.read(this, t, false, 23, 4);
  };
  a.prototype.readDoubleLE = function(t, r18) {
    return t = t >>> 0, r18 || y2(t, 8, this.length), H2.read(this, t, true, 52, 8);
  };
  a.prototype.readDoubleBE = function(t, r18) {
    return t = t >>> 0, r18 || y2(t, 8, this.length), H2.read(this, t, false, 52, 8);
  };
  function d2(e, t, r18, n, i, o) {
    if (!a.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (t > i || t < o) throw new RangeError('"value" argument is out of bounds');
    if (r18 + n > e.length) throw new RangeError("Index out of range");
  }
  a.prototype.writeUintLE = a.prototype.writeUIntLE = function(t, r18, n, i) {
    if (t = +t, r18 = r18 >>> 0, n = n >>> 0, !i) {
      let u = Math.pow(2, 8 * n) - 1;
      d2(this, t, r18, n, u, 0);
    }
    let o = 1, s = 0;
    for (this[r18] = t & 255; ++s < n && (o *= 256); ) this[r18 + s] = t / o & 255;
    return r18 + n;
  };
  a.prototype.writeUintBE = a.prototype.writeUIntBE = function(t, r18, n, i) {
    if (t = +t, r18 = r18 >>> 0, n = n >>> 0, !i) {
      let u = Math.pow(2, 8 * n) - 1;
      d2(this, t, r18, n, u, 0);
    }
    let o = n - 1, s = 1;
    for (this[r18 + o] = t & 255; --o >= 0 && (s *= 256); ) this[r18 + o] = t / s & 255;
    return r18 + n;
  };
  a.prototype.writeUint8 = a.prototype.writeUInt8 = function(t, r18, n) {
    return t = +t, r18 = r18 >>> 0, n || d2(this, t, r18, 1, 255, 0), this[r18] = t & 255, r18 + 1;
  };
  a.prototype.writeUint16LE = a.prototype.writeUInt16LE = function(t, r18, n) {
    return t = +t, r18 = r18 >>> 0, n || d2(this, t, r18, 2, 65535, 0), this[r18] = t & 255, this[r18 + 1] = t >>> 8, r18 + 2;
  };
  a.prototype.writeUint16BE = a.prototype.writeUInt16BE = function(t, r18, n) {
    return t = +t, r18 = r18 >>> 0, n || d2(this, t, r18, 2, 65535, 0), this[r18] = t >>> 8, this[r18 + 1] = t & 255, r18 + 2;
  };
  a.prototype.writeUint32LE = a.prototype.writeUInt32LE = function(t, r18, n) {
    return t = +t, r18 = r18 >>> 0, n || d2(this, t, r18, 4, 4294967295, 0), this[r18 + 3] = t >>> 24, this[r18 + 2] = t >>> 16, this[r18 + 1] = t >>> 8, this[r18] = t & 255, r18 + 4;
  };
  a.prototype.writeUint32BE = a.prototype.writeUInt32BE = function(t, r18, n) {
    return t = +t, r18 = r18 >>> 0, n || d2(this, t, r18, 4, 4294967295, 0), this[r18] = t >>> 24, this[r18 + 1] = t >>> 16, this[r18 + 2] = t >>> 8, this[r18 + 3] = t & 255, r18 + 4;
  };
  function or2(e, t, r18, n, i) {
    fr2(t, n, i, e, r18, 7);
    let o = Number(t & BigInt(4294967295));
    e[r18++] = o, o = o >> 8, e[r18++] = o, o = o >> 8, e[r18++] = o, o = o >> 8, e[r18++] = o;
    let s = Number(t >> BigInt(32) & BigInt(4294967295));
    return e[r18++] = s, s = s >> 8, e[r18++] = s, s = s >> 8, e[r18++] = s, s = s >> 8, e[r18++] = s, r18;
  }
  function sr2(e, t, r18, n, i) {
    fr2(t, n, i, e, r18, 7);
    let o = Number(t & BigInt(4294967295));
    e[r18 + 7] = o, o = o >> 8, e[r18 + 6] = o, o = o >> 8, e[r18 + 5] = o, o = o >> 8, e[r18 + 4] = o;
    let s = Number(t >> BigInt(32) & BigInt(4294967295));
    return e[r18 + 3] = s, s = s >> 8, e[r18 + 2] = s, s = s >> 8, e[r18 + 1] = s, s = s >> 8, e[r18] = s, r18 + 8;
  }
  a.prototype.writeBigUInt64LE = L(function(t, r18 = 0) {
    return or2(this, t, r18, BigInt(0), BigInt("0xffffffffffffffff"));
  });
  a.prototype.writeBigUInt64BE = L(function(t, r18 = 0) {
    return sr2(this, t, r18, BigInt(0), BigInt("0xffffffffffffffff"));
  });
  a.prototype.writeIntLE = function(t, r18, n, i) {
    if (t = +t, r18 = r18 >>> 0, !i) {
      let h = Math.pow(2, 8 * n - 1);
      d2(this, t, r18, n, h - 1, -h);
    }
    let o = 0, s = 1, u = 0;
    for (this[r18] = t & 255; ++o < n && (s *= 256); ) t < 0 && u === 0 && this[r18 + o - 1] !== 0 && (u = 1), this[r18 + o] = (t / s >> 0) - u & 255;
    return r18 + n;
  };
  a.prototype.writeIntBE = function(t, r18, n, i) {
    if (t = +t, r18 = r18 >>> 0, !i) {
      let h = Math.pow(2, 8 * n - 1);
      d2(this, t, r18, n, h - 1, -h);
    }
    let o = n - 1, s = 1, u = 0;
    for (this[r18 + o] = t & 255; --o >= 0 && (s *= 256); ) t < 0 && u === 0 && this[r18 + o + 1] !== 0 && (u = 1), this[r18 + o] = (t / s >> 0) - u & 255;
    return r18 + n;
  };
  a.prototype.writeInt8 = function(t, r18, n) {
    return t = +t, r18 = r18 >>> 0, n || d2(this, t, r18, 1, 127, -128), t < 0 && (t = 255 + t + 1), this[r18] = t & 255, r18 + 1;
  };
  a.prototype.writeInt16LE = function(t, r18, n) {
    return t = +t, r18 = r18 >>> 0, n || d2(this, t, r18, 2, 32767, -32768), this[r18] = t & 255, this[r18 + 1] = t >>> 8, r18 + 2;
  };
  a.prototype.writeInt16BE = function(t, r18, n) {
    return t = +t, r18 = r18 >>> 0, n || d2(this, t, r18, 2, 32767, -32768), this[r18] = t >>> 8, this[r18 + 1] = t & 255, r18 + 2;
  };
  a.prototype.writeInt32LE = function(t, r18, n) {
    return t = +t, r18 = r18 >>> 0, n || d2(this, t, r18, 4, 2147483647, -2147483648), this[r18] = t & 255, this[r18 + 1] = t >>> 8, this[r18 + 2] = t >>> 16, this[r18 + 3] = t >>> 24, r18 + 4;
  };
  a.prototype.writeInt32BE = function(t, r18, n) {
    return t = +t, r18 = r18 >>> 0, n || d2(this, t, r18, 4, 2147483647, -2147483648), t < 0 && (t = 4294967295 + t + 1), this[r18] = t >>> 24, this[r18 + 1] = t >>> 16, this[r18 + 2] = t >>> 8, this[r18 + 3] = t & 255, r18 + 4;
  };
  a.prototype.writeBigInt64LE = L(function(t, r18 = 0) {
    return or2(this, t, r18, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  a.prototype.writeBigInt64BE = L(function(t, r18 = 0) {
    return sr2(this, t, r18, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  function ar2(e, t, r18, n, i, o) {
    if (r18 + n > e.length) throw new RangeError("Index out of range");
    if (r18 < 0) throw new RangeError("Index out of range");
  }
  function ur2(e, t, r18, n, i) {
    return t = +t, r18 = r18 >>> 0, i || ar2(e, t, r18, 4, 34028234663852886e22, -34028234663852886e22), H2.write(e, t, r18, n, 23, 4), r18 + 4;
  }
  a.prototype.writeFloatLE = function(t, r18, n) {
    return ur2(this, t, r18, true, n);
  };
  a.prototype.writeFloatBE = function(t, r18, n) {
    return ur2(this, t, r18, false, n);
  };
  function hr2(e, t, r18, n, i) {
    return t = +t, r18 = r18 >>> 0, i || ar2(e, t, r18, 8, 17976931348623157e292, -17976931348623157e292), H2.write(e, t, r18, n, 52, 8), r18 + 8;
  }
  a.prototype.writeDoubleLE = function(t, r18, n) {
    return hr2(this, t, r18, true, n);
  };
  a.prototype.writeDoubleBE = function(t, r18, n) {
    return hr2(this, t, r18, false, n);
  };
  a.prototype.copy = function(t, r18, n, i) {
    if (!a.isBuffer(t)) throw new TypeError("argument should be a Buffer");
    if (n || (n = 0), !i && i !== 0 && (i = this.length), r18 >= t.length && (r18 = t.length), r18 || (r18 = 0), i > 0 && i < n && (i = n), i === n || t.length === 0 || this.length === 0) return 0;
    if (r18 < 0) throw new RangeError("targetStart out of bounds");
    if (n < 0 || n >= this.length) throw new RangeError("Index out of range");
    if (i < 0) throw new RangeError("sourceEnd out of bounds");
    i > this.length && (i = this.length), t.length - r18 < i - n && (i = t.length - r18 + n);
    let o = i - n;
    return this === t && typeof Uint8Array.prototype.copyWithin == "function" ? this.copyWithin(r18, n, i) : Uint8Array.prototype.set.call(t, this.subarray(n, i), r18), o;
  };
  a.prototype.fill = function(t, r18, n, i) {
    if (typeof t == "string") {
      if (typeof r18 == "string" ? (i = r18, r18 = 0, n = this.length) : typeof n == "string" && (i = n, n = this.length), i !== void 0 && typeof i != "string") throw new TypeError("encoding must be a string");
      if (typeof i == "string" && !a.isEncoding(i)) throw new TypeError("Unknown encoding: " + i);
      if (t.length === 1) {
        let s = t.charCodeAt(0);
        (i === "utf8" && s < 128 || i === "latin1") && (t = s);
      }
    } else typeof t == "number" ? t = t & 255 : typeof t == "boolean" && (t = Number(t));
    if (r18 < 0 || this.length < r18 || this.length < n) throw new RangeError("Out of range index");
    if (n <= r18) return this;
    r18 = r18 >>> 0, n = n === void 0 ? this.length : n >>> 0, t || (t = 0);
    let o;
    if (typeof t == "number") for (o = r18; o < n; ++o) this[o] = t;
    else {
      let s = a.isBuffer(t) ? t : a.from(t, i), u = s.length;
      if (u === 0) throw new TypeError('The value "' + t + '" is invalid for argument "value"');
      for (o = 0; o < n - r18; ++o) this[o + r18] = s[o % u];
    }
    return this;
  };
  var K2 = {};
  function St2(e, t, r18) {
    K2[e] = class extends r18 {
      constructor() {
        super(), Object.defineProperty(this, "message", { value: t.apply(this, arguments), writable: true, configurable: true }), this.name = `${this.name} [${e}]`, this.stack, delete this.name;
      }
      get code() {
        return e;
      }
      set code(i) {
        Object.defineProperty(this, "code", { configurable: true, enumerable: true, value: i, writable: true });
      }
      toString() {
        return `${this.name} [${e}]: ${this.message}`;
      }
    };
  }
  St2("ERR_BUFFER_OUT_OF_BOUNDS", function(e) {
    return e ? `${e} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
  }, RangeError);
  St2("ERR_INVALID_ARG_TYPE", function(e, t) {
    return `The "${e}" argument must be of type number. Received type ${typeof t}`;
  }, TypeError);
  St2("ERR_OUT_OF_RANGE", function(e, t, r18) {
    let n = `The value of "${e}" is out of range.`, i = r18;
    return Number.isInteger(r18) && Math.abs(r18) > 2 ** 32 ? i = Qt2(String(r18)) : typeof r18 == "bigint" && (i = String(r18), (r18 > BigInt(2) ** BigInt(32) || r18 < -(BigInt(2) ** BigInt(32))) && (i = Qt2(i)), i += "n"), n += ` It must be ${t}. Received ${i}`, n;
  }, RangeError);
  function Qt2(e) {
    let t = "", r18 = e.length, n = e[0] === "-" ? 1 : 0;
    for (; r18 >= n + 4; r18 -= 3) t = `_${e.slice(r18 - 3, r18)}${t}`;
    return `${e.slice(0, r18)}${t}`;
  }
  function ae2(e, t, r18) {
    j2(t, "offset"), (e[t] === void 0 || e[t + r18] === void 0) && W(t, e.length - (r18 + 1));
  }
  function fr2(e, t, r18, n, i, o) {
    if (e > r18 || e < t) {
      let s = typeof t == "bigint" ? "n" : "", u;
      throw o > 3 ? t === 0 || t === BigInt(0) ? u = `>= 0${s} and < 2${s} ** ${(o + 1) * 8}${s}` : u = `>= -(2${s} ** ${(o + 1) * 8 - 1}${s}) and < 2 ** ${(o + 1) * 8 - 1}${s}` : u = `>= ${t}${s} and <= ${r18}${s}`, new K2.ERR_OUT_OF_RANGE("value", u, e);
    }
    ae2(n, i, o);
  }
  function j2(e, t) {
    if (typeof e != "number") throw new K2.ERR_INVALID_ARG_TYPE(t, "number", e);
  }
  function W(e, t, r18) {
    throw Math.floor(e) !== e ? (j2(e, r18), new K2.ERR_OUT_OF_RANGE(r18 || "offset", "an integer", e)) : t < 0 ? new K2.ERR_BUFFER_OUT_OF_BOUNDS() : new K2.ERR_OUT_OF_RANGE(r18 || "offset", `>= ${r18 ? 1 : 0} and <= ${t}`, e);
  }
  var ue2 = /[^+/0-9A-Za-z-_]/g;
  function he2(e) {
    if (e = e.split("=")[0], e = e.trim().replace(ue2, ""), e.length < 2) return "";
    for (; e.length % 4 !== 0; ) e = e + "=";
    return e;
  }
  function At2(e, t) {
    t = t || 1 / 0;
    let r18, n = e.length, i = null, o = [];
    for (let s = 0; s < n; ++s) {
      if (r18 = e.charCodeAt(s), r18 > 55295 && r18 < 57344) {
        if (!i) {
          if (r18 > 56319) {
            (t -= 3) > -1 && o.push(239, 191, 189);
            continue;
          } else if (s + 1 === n) {
            (t -= 3) > -1 && o.push(239, 191, 189);
            continue;
          }
          i = r18;
          continue;
        }
        if (r18 < 56320) {
          (t -= 3) > -1 && o.push(239, 191, 189), i = r18;
          continue;
        }
        r18 = (i - 55296 << 10 | r18 - 56320) + 65536;
      } else i && (t -= 3) > -1 && o.push(239, 191, 189);
      if (i = null, r18 < 128) {
        if ((t -= 1) < 0) break;
        o.push(r18);
      } else if (r18 < 2048) {
        if ((t -= 2) < 0) break;
        o.push(r18 >> 6 | 192, r18 & 63 | 128);
      } else if (r18 < 65536) {
        if ((t -= 3) < 0) break;
        o.push(r18 >> 12 | 224, r18 >> 6 & 63 | 128, r18 & 63 | 128);
      } else if (r18 < 1114112) {
        if ((t -= 4) < 0) break;
        o.push(r18 >> 18 | 240, r18 >> 12 & 63 | 128, r18 >> 6 & 63 | 128, r18 & 63 | 128);
      } else throw new Error("Invalid code point");
    }
    return o;
  }
  function fe2(e) {
    let t = [];
    for (let r18 = 0; r18 < e.length; ++r18) t.push(e.charCodeAt(r18) & 255);
    return t;
  }
  function ce2(e, t) {
    let r18, n, i, o = [];
    for (let s = 0; s < e.length && !((t -= 2) < 0); ++s) r18 = e.charCodeAt(s), n = r18 >> 8, i = r18 % 256, o.push(i), o.push(n);
    return o;
  }
  function cr2(e) {
    return Bt2.toByteArray(he2(e));
  }
  function et2(e, t, r18, n) {
    let i;
    for (i = 0; i < n && !(i + r18 >= t.length || i >= e.length); ++i) t[i + r18] = e[i];
    return i;
  }
  function A(e, t) {
    return e instanceof t || e != null && e.constructor != null && e.constructor.name != null && e.constructor.name === t.name;
  }
  function Ut2(e) {
    return e !== e;
  }
  var pe2 = function() {
    let e = "0123456789abcdef", t = new Array(256);
    for (let r18 = 0; r18 < 16; ++r18) {
      let n = r18 * 16;
      for (let i = 0; i < 16; ++i) t[n + i] = e[r18] + e[i];
    }
    return t;
  }();
  function L(e) {
    return typeof BigInt > "u" ? le2 : e;
  }
  function le2() {
    throw new Error("BigInt not supported");
  }
});
var pr2 = T2((Je2, Ft2) => {
  typeof window < "u" ? (window.global = window, window.fetch = window.fetch, Ft2.exports = { Buffer: nt2().Buffer, Crypto: window.crypto }) : Ft2.exports = { Buffer: nt2().Buffer, Crypto: crypto };
});
var Lt2 = {};
Ar2(Lt2, { AVSCTap: () => $2, ArweaveSigner: () => N2, DataItem: () => _2, MAX_TAG_BYTES: () => tt2, MIN_BINARY_SIZE: () => gr2, SIG_CONFIG: () => P2, SignatureConfig: () => B, Signer: () => ot2, createData: () => ge2, deserializeTags: () => Q, indexToType: () => wt2, serializeTags: () => dt2, tagsExceedLimit: () => jr2 });
var ot2 = class {
  constructor() {
    __publicField(this, "signer");
    __publicField(this, "publicKey");
    __publicField(this, "signatureType");
    __publicField(this, "signatureLength");
    __publicField(this, "ownerLength");
    __publicField(this, "pem");
  }
  static verify(t, r18, n, i) {
    throw new Error("You must implement verify method on child");
  }
};
var vt2 = C(z3(), 1);
var w2 = C(pt2(), 1);
async function X2(e) {
  if (Array.isArray(e)) {
    let i = (0, w2.concatBuffers)([(0, w2.stringToBuffer)("list"), (0, w2.stringToBuffer)(e.length.toString())]);
    return await Gt2(e, await x2().hash(i, "SHA-384"));
  }
  let t = e, r18 = (0, w2.concatBuffers)([(0, w2.stringToBuffer)("blob"), (0, w2.stringToBuffer)(t.byteLength.toString())]), n = (0, w2.concatBuffers)([await x2().hash(r18, "SHA-384"), await x2().hash(t, "SHA-384")]);
  return await x2().hash(n, "SHA-384");
}
async function Gt2(e, t) {
  if (e.length < 1) return t;
  let r18 = (0, w2.concatBuffers)([t, await X2(e[0])]), n = await x2().hash(r18, "SHA-384");
  return await Gt2(e.slice(1), n);
}
var Z2 = C(Yt(), 1);
var $r2 = Z2.default.default ? Z2.default.default : Z2.default;
var yt2 = class extends $r2 {
  getPublicKey(t) {
    throw new Error("Unimplemented");
  }
};
var Kr2;
function x2() {
  return Kr2 != null ? Kr2 : Kr2 = new yt2();
}
var B;
(function(e) {
  e[e.ARWEAVE = 1] = "ARWEAVE", e[e.ED25519 = 2] = "ED25519", e[e.ETHEREUM = 3] = "ETHEREUM", e[e.SOLANA = 4] = "SOLANA", e[e.INJECTEDAPTOS = 5] = "INJECTEDAPTOS", e[e.MULTIAPTOS = 6] = "MULTIAPTOS", e[e.TYPEDETHEREUM = 7] = "TYPEDETHEREUM";
})(B || (B = {}));
var P2 = { [B.ARWEAVE]: { sigLength: 512, pubLength: 512, sigName: "arweave" }, [B.ED25519]: { sigLength: 64, pubLength: 32, sigName: "ed25519" }, [B.ETHEREUM]: { sigLength: 65, pubLength: 65, sigName: "ethereum" }, [B.SOLANA]: { sigLength: 64, pubLength: 32, sigName: "solana" }, [B.INJECTEDAPTOS]: { sigLength: 64, pubLength: 32, sigName: "injectedAptos" }, [B.MULTIAPTOS]: { sigLength: 64 * 32 + 4, pubLength: 32 * 32 + 1, sigName: "multiAptos" }, [B.TYPEDETHEREUM]: { sigLength: 65, pubLength: 42, sigName: "typedEthereum" } };
var N2 = class {
  constructor(t) {
    __publicField(this, "signatureType", 1);
    __publicField(this, "ownerLength", P2[1].pubLength);
    __publicField(this, "signatureLength", P2[1].sigLength);
    __publicField(this, "jwk");
    __publicField(this, "pk");
    this.pk = t.n, this.jwk = t;
  }
  get publicKey() {
    return vt2.default.toBuffer(this.pk);
  }
  sign(t) {
    return x2().sign(this.jwk, t);
  }
  static async verify(t, r18, n) {
    return await x2().verify(t, r18, n);
  }
};
var wt2 = { 1: N2 };
var E2 = C(z3(), 1);
async function v(e) {
  return X2([(0, w2.stringToBuffer)("dataitem"), (0, w2.stringToBuffer)("1"), (0, w2.stringToBuffer)(e.signatureType.toString()), e.rawOwner, e.rawTarget, e.rawAnchor, e.rawTags, e.rawData]);
}
async function Hr2(e, t) {
  let r18 = await v(e), n = await t.sign(r18), i = await x2().hash(n);
  return { signature: Buffer.from(n), id: Buffer.from(i) };
}
async function Wt2(e, t) {
  let { signature: r18, id: n } = await Hr2(e, t);
  return e.getRaw().set(r18, 2), n;
}
var $2 = class {
  constructor(t = Buffer.alloc(tt2), r18 = 0) {
    __publicField(this, "buf");
    __publicField(this, "pos");
    this.buf = t, this.pos = r18;
  }
  writeTags(t) {
    if (!Array.isArray(t)) throw new Error("input must be array");
    let r18 = t.length, n;
    if (r18) for (this.writeLong(r18), n = 0; n < r18; n++) {
      let i = t[n];
      if ((i == null ? void 0 : i.name) === void 0 || (i == null ? void 0 : i.value) === void 0) throw new Error(`Invalid tag format for ${i}, expected {name:string, value: string}`);
      this.writeString(i.name), this.writeString(i.value);
    }
    this.writeLong(0);
  }
  toBuffer() {
    let t = Buffer.alloc(this.pos);
    if (this.pos > this.buf.length) throw new Error(`Too many tag bytes (${this.pos} > ${this.buf.length})`);
    return this.buf.copy(t, 0, 0, this.pos), t;
  }
  tagsExceedLimit() {
    return this.pos > this.buf.length;
  }
  writeLong(t) {
    let r18 = this.buf, n, i;
    if (t >= -1073741824 && t < 1073741824) {
      i = t >= 0 ? t << 1 : ~t << 1 | 1;
      do
        r18[this.pos] = i & 127, i >>= 7;
      while (i && (r18[this.pos++] |= 128));
    } else {
      n = t >= 0 ? t * 2 : -t * 2 - 1;
      do
        r18[this.pos] = n & 127, n /= 128;
      while (n >= 1 && (r18[this.pos++] |= 128));
    }
    this.pos++, this.buf = r18;
  }
  writeString(t) {
    let r18 = Buffer.byteLength(t), n = this.buf;
    this.writeLong(r18);
    let i = this.pos;
    if (this.pos += r18, !(this.pos > n.length)) {
      if (r18 > 64) this.buf.write(t, this.pos - r18, r18, "utf8");
      else {
        let o, s, u, h;
        for (o = 0, s = r18; o < s; o++) u = t.charCodeAt(o), u < 128 ? n[i++] = u : u < 2048 ? (n[i++] = u >> 6 | 192, n[i++] = u & 63 | 128) : (u & 64512) === 55296 && ((h = t.charCodeAt(o + 1)) & 64512) === 56320 ? (u = 65536 + ((u & 1023) << 10) + (h & 1023), o++, n[i++] = u >> 18 | 240, n[i++] = u >> 12 & 63 | 128, n[i++] = u >> 6 & 63 | 128, n[i++] = u & 63 | 128) : (n[i++] = u >> 12 | 224, n[i++] = u >> 6 & 63 | 128, n[i++] = u & 63 | 128);
      }
      this.buf = n;
    }
  }
  readLong() {
    let t = 0, r18 = 0, n = this.buf, i, o, s, u;
    do
      i = n[this.pos++], o = i & 128, t |= (i & 127) << r18, r18 += 7;
    while (o && r18 < 28);
    if (o) {
      s = t, u = 268435456;
      do
        i = n[this.pos++], s += (i & 127) * u, u *= 128;
      while (i & 128);
      return (s % 2 ? -(s + 1) : s) / 2;
    }
    return t >> 1 ^ -(t & 1);
  }
  skipLong() {
    let t = this.buf;
    for (; t[this.pos++] & 128; ) ;
  }
  readTags() {
    let t = [], r18;
    for (; r18 = this.readLong(); ) for (r18 < 0 && (r18 = -r18, this.skipLong()); r18--; ) {
      let n = this.readString(), i = this.readString();
      t.push({ name: n, value: i });
    }
    return t;
  }
  readString() {
    let t = this.readLong(), r18 = this.pos, n = this.buf;
    if (this.pos += t, !(this.pos > n.length)) return this.buf.slice(r18, r18 + t).toString();
  }
};
function dt2(e) {
  let t = new $2();
  return t.writeTags(e), t.toBuffer();
}
function jr2(e) {
  let t = new $2();
  return t.writeTags(e), t.tagsExceedLimit();
}
function Q(e) {
  return new $2(e).readTags();
}
function I(e) {
  let t = 0;
  for (let r18 = e.length - 1; r18 >= 0; r18--) t = t * 256 + e[r18];
  return t;
}
function Vt2(e) {
  if (e > (2 ^ 32 - 1)) throw new Error("Short too long");
  let t = [0, 0];
  for (let r18 = 0; r18 < t.length; r18++) {
    let n = e & 255;
    t[r18] = n, e = (e - n) / 256;
  }
  return Uint8Array.from(t);
}
function xt2(e) {
  let t = [0, 0, 0, 0, 0, 0, 0, 0];
  for (let r18 = 0; r18 < t.length; r18++) {
    let n = e & 255;
    t[r18] = n, e = (e - n) / 256;
  }
  return Uint8Array.from(t);
}
var lr2 = C(pr2(), 1);
var M2 = C(nt2(), 1);
var tt2 = 4096;
var gr2 = 80;
var _2 = class {
  constructor(t) {
    __publicField(this, "binary");
    __publicField(this, "_id");
    this.binary = t;
  }
  static isDataItem(t) {
    return t.binary !== void 0;
  }
  get signatureType() {
    let t = I(this.binary.subarray(0, 2));
    if ((B == null ? void 0 : B[t]) !== void 0) return t;
    throw new Error("Unknown signature type: " + t);
  }
  async isValid() {
    return _2.verify(this.binary);
  }
  get id() {
    return (async () => E2.default.encode(await this.rawId))();
  }
  set id(t) {
    this._id = E2.default.toBuffer(t);
  }
  get rawId() {
    return (async () => M2.Buffer.from(await lr2.Crypto.subtle.digest("SHA-256", this.rawSignature)))();
  }
  set rawId(t) {
    this._id = t;
  }
  get rawSignature() {
    return this.binary.subarray(2, 2 + this.signatureLength);
  }
  get signature() {
    return E2.default.encode(this.rawSignature);
  }
  set rawOwner(t) {
    if (t.byteLength != this.ownerLength) throw new Error(`Expected raw owner (pubkey) to be ${this.ownerLength} bytes, got ${t.byteLength} bytes.`);
    this.binary.set(t, 2 + this.signatureLength);
  }
  get rawOwner() {
    return this.binary.subarray(2 + this.signatureLength, 2 + this.signatureLength + this.ownerLength);
  }
  get signatureLength() {
    return P2[this.signatureType].sigLength;
  }
  get owner() {
    return E2.default.encode(this.rawOwner);
  }
  get ownerLength() {
    return P2[this.signatureType].pubLength;
  }
  get rawTarget() {
    let t = this.getTargetStart();
    return this.binary[t] == 1 ? this.binary.subarray(t + 1, t + 33) : M2.Buffer.alloc(0);
  }
  get target() {
    return E2.default.encode(this.rawTarget);
  }
  get rawAnchor() {
    let t = this.getAnchorStart();
    return this.binary[t] == 1 ? this.binary.subarray(t + 1, t + 33) : M2.Buffer.alloc(0);
  }
  get anchor() {
    return this.rawAnchor.toString();
  }
  get rawTags() {
    let t = this.getTagsStart(), r18 = I(this.binary.subarray(t + 8, t + 16));
    return this.binary.subarray(t + 16, t + 16 + r18);
  }
  get tags() {
    let t = this.getTagsStart();
    if (I(this.binary.subarray(t, t + 8)) == 0) return [];
    let n = I(this.binary.subarray(t + 8, t + 16));
    return Q(M2.Buffer.from(this.binary.subarray(t + 16, t + 16 + n)));
  }
  get tagsB64Url() {
    return this.tags.map((r18) => ({ name: E2.default.encode(r18.name), value: E2.default.encode(r18.value) }));
  }
  getStartOfData() {
    let t = this.getTagsStart(), r18 = this.binary.subarray(t + 8, t + 16), n = I(r18);
    return t + 16 + n;
  }
  get rawData() {
    let t = this.getTagsStart(), r18 = this.binary.subarray(t + 8, t + 16), n = I(r18), i = t + 16 + n;
    return this.binary.subarray(i, this.binary.length);
  }
  get data() {
    return E2.default.encode(this.rawData);
  }
  getRaw() {
    return this.binary;
  }
  async sign(t) {
    return this._id = await Wt2(this, t), this.rawId;
  }
  async setSignature(t) {
    this.binary.set(t, 2), this._id = M2.Buffer.from(await x2().hash(t));
  }
  isSigned() {
    var _a7, _b2;
    return ((_b2 = (_a7 = this._id) == null ? void 0 : _a7.length) != null ? _b2 : 0) > 0;
  }
  toJSON() {
    return { signature: this.signature, owner: this.owner, target: this.target, tags: this.tags.map((t) => ({ name: E2.default.encode(t.name), value: E2.default.encode(t.value) })), data: this.data };
  }
  static async verify(t) {
    if (t.byteLength < gr2) return false;
    let r18 = new _2(t), n = r18.signatureType, i = r18.getTagsStart(), o = I(t.subarray(i, i + 8)), s = t.subarray(i + 8, i + 16), u = I(s);
    if (u > tt2) return false;
    if (o > 0) try {
      if (Q(M2.Buffer.from(t.subarray(i + 16, i + 16 + u))).length !== o) return false;
    } catch (e) {
      return false;
    }
    let h = wt2[n], p2 = await v(r18);
    return await h.verify(r18.rawOwner, p2, r18.rawSignature);
  }
  async getSignatureData() {
    return v(this);
  }
  getTagsStart() {
    let t = this.getTargetStart(), r18 = this.binary[t] == 1, n = t + (r18 ? 33 : 1), i = this.binary[n] == 1;
    return n += i ? 33 : 1, n;
  }
  getTargetStart() {
    return 2 + this.signatureLength + this.ownerLength;
  }
  getAnchorStart() {
    let t = this.getTargetStart() + 1, r18 = this.binary[this.getTargetStart()] == 1;
    return t += r18 ? 32 : 0, t;
  }
};
var yr2 = C(z3(), 1);
function ge2(e, t, r18) {
  var _a7, _b2, _c3, _d2, _e3, _f2, _g2;
  let n = t.publicKey, i = (r18 == null ? void 0 : r18.target) ? yr2.default.toBuffer(r18.target) : null, o = 1 + ((_a7 = i == null ? void 0 : i.byteLength) != null ? _a7 : 0), s = (r18 == null ? void 0 : r18.anchor) ? Buffer.from(r18.anchor) : null, u = 1 + ((_b2 = s == null ? void 0 : s.byteLength) != null ? _b2 : 0), h = ((_d2 = (_c3 = r18 == null ? void 0 : r18.tags) == null ? void 0 : _c3.length) != null ? _d2 : 0) > 0 ? dt2(r18.tags) : null, p2 = 16 + (h ? h.byteLength : 0), f2 = Buffer.from(e), c2 = f2.byteLength, U2 = 2 + t.signatureLength + t.ownerLength + o + u + p2 + c2, l = Buffer.alloc(U2);
  if (l.set(Vt2(t.signatureType), 0), l.set(new Uint8Array(t.signatureLength).fill(0), 2), n.byteLength !== t.ownerLength) throw new Error(`Owner must be ${t.ownerLength} bytes, but was incorrectly ${n.byteLength}`);
  l.set(n, 2 + t.signatureLength);
  let R2 = 2 + t.signatureLength + t.ownerLength;
  if (l[R2] = i ? 1 : 0, i) {
    if (i.byteLength !== 32) throw new Error(`Target must be 32 bytes but was incorrectly ${i.byteLength}`);
    l.set(i, R2 + 1);
  }
  let G2 = R2 + o, Y2 = G2 + 1;
  if (l[G2] = s ? 1 : 0, s) {
    if (Y2 += s.byteLength, s.byteLength !== 32) throw new Error("Anchor must be 32 bytes");
    l.set(s, G2 + 1);
  }
  l.set(xt2((_f2 = (_e3 = r18 == null ? void 0 : r18.tags) == null ? void 0 : _e3.length) != null ? _f2 : 0), Y2);
  let wr2 = xt2((_g2 = h == null ? void 0 : h.byteLength) != null ? _g2 : 0);
  l.set(wr2, Y2 + 8), h && l.set(h, Y2 + 16);
  let dr2 = Y2 + p2;
  return l.set(f2, dr2), new _2(l);
}
var _t2 = { ...Lt2 };
var _a5;
(_a5 = globalThis.arbundles) != null ? _a5 : globalThis.arbundles = _t2;
var wn2 = _t2;
var dn2 = _t2;
if (!globalThis.Buffer) globalThis.Buffer = import_buffer.Buffer;
var { DataItem } = bundle_exports;
function createDataItemSigner(arweaveWallet2) {
  const signer = async ({ data, tags, target, anchor, createDataItem = (buf) => new DataItem(buf) }) => {
    const view = await arweaveWallet2.signDataItem({ data, tags, target, anchor });
    const dataItem = createDataItem(import_buffer.Buffer.from(view));
    return {
      id: await dataItem.id,
      raw: await dataItem.getRaw()
    };
  };
  return signer;
}
var GATEWAY_URL = globalThis.GATEWAY_URL || void 0;
var MU_URL = globalThis.MU_URL || void 0;
var CU_URL = globalThis.CU_URL || void 0;
var GRAPHQL_URL = globalThis.GRAPHQL_URL || void 0;
var GRAPHQL_MAX_RETRIES = globalThis.GRAPHQL_MAX_RETRIES || void 0;
var GRAPHQL_RETRY_BACKOFF = globalThis.GRAPHQL_RETRY_BACKOFF || void 0;
var { result, results, message, spawn, monitor, unmonitor, dryrun, assign } = connect({ GATEWAY_URL, MU_URL, CU_URL, GRAPHQL_URL, GRAPHQL_MAX_RETRIES, GRAPHQL_RETRY_BACKOFF });
var createDataItemSigner2 = wallet_exports.createDataItemSigner;

// src/utils/encryption.ts
var import_crypto_js = __toESM(require_crypto_js());
var import_buffer2 = __toESM(require_buffer2());
function encrypt(data, password, isBinary = false) {
  let dataToEncrypt;
  if (isBinary) {
    dataToEncrypt = import_buffer2.Buffer.isBuffer(data) ? data.toString("base64") : import_buffer2.Buffer.from(data, "binary").toString("base64");
  } else {
    dataToEncrypt = import_buffer2.Buffer.isBuffer(data) ? data.toString("utf8") : data;
  }
  const encrypted = import_crypto_js.default.AES.encrypt(dataToEncrypt, password).toString();
  return isBinary ? `binary:${encrypted}` : `text:${encrypted}`;
}
function decrypt(encryptedData, password) {
  const [type3, data] = encryptedData.split(":", 2);
  const isBinary = type3 === "binary";
  try {
    const bytes = import_crypto_js.default.AES.decrypt(data, password);
    const decryptedText = bytes.toString(import_crypto_js.default.enc.Utf8);
    if (isBinary) {
      return import_buffer2.Buffer.from(decryptedText, "base64");
    } else {
      return decryptedText;
    }
  } catch (error) {
    console.error("Decryption error:", error);
    throw new Error(
      "Failed to decrypt data. Please check your encryption password."
    );
  }
}

// node_modules/warp-arbundles/build/web/esm/bundle.js
var bundle_exports2 = {};
__export(bundle_exports2, {
  AVSCTap: () => $3,
  ArweaveSigner: () => N3,
  DataItem: () => _3,
  MAX_TAG_BYTES: () => tt3,
  MIN_BINARY_SIZE: () => gr3,
  SIG_CONFIG: () => P3,
  SignatureConfig: () => B2,
  Signer: () => ot3,
  createData: () => ge3,
  default: () => wn3,
  deserializeTags: () => Q2,
  indexToType: () => wt3,
  serializeTags: () => dt3,
  tagsExceedLimit: () => jr3,
  warparbundles: () => dn3
});
var xr3 = Object.create;
var it3 = Object.defineProperty;
var mr3 = Object.getOwnPropertyDescriptor;
var Br3 = Object.getOwnPropertyNames;
var Er3 = Object.getPrototypeOf;
var br3 = Object.prototype.hasOwnProperty;
var T3 = (e, t) => () => (t || e((t = { exports: {} }).exports, t), t.exports);
var Ar3 = (e, t) => {
  for (var r in t) it3(e, r, { get: t[r], enumerable: true });
};
var Tr3 = (e, t, r, n) => {
  if (t && typeof t == "object" || typeof t == "function") for (let i of Br3(t)) !br3.call(e, i) && i !== r && it3(e, i, { get: () => t[i], enumerable: !(n = mr3(t, i)) || n.enumerable });
  return e;
};
var C2 = (e, t, r) => (r = e != null ? xr3(Er3(e)) : {}, Tr3(t || !e || !e.__esModule ? it3(r, "default", { value: e, enumerable: true }) : r, e));
var Rt3 = T3((st2) => {
  "use strict";
  Object.defineProperty(st2, "__esModule", { value: true });
  function Ir2(e) {
    var t = 4, r = e.length, n = r % t;
    if (!n) return e;
    var i = r, o = t - n, s = r + o, u = Buffer.alloc(s);
    for (u.write(e); o--; ) u.write("=", i++);
    return u.toString();
  }
  st2.default = Ir2;
});
var Dt3 = T3((ht2) => {
  "use strict";
  Object.defineProperty(ht2, "__esModule", { value: true });
  var Sr2 = Rt3();
  function Ct2(e, t) {
    return t === void 0 && (t = "utf8"), Buffer.isBuffer(e) ? at2(e.toString("base64")) : at2(Buffer.from(e, t).toString("base64"));
  }
  function Ur2(e, t) {
    return t === void 0 && (t = "utf8"), Buffer.from(ut2(e), "base64").toString(t);
  }
  function ut2(e) {
    return e = e.toString(), Sr2.default(e).replace(/\-/g, "+").replace(/_/g, "/");
  }
  function at2(e) {
    return e.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
  }
  function Fr2(e) {
    return Buffer.from(ut2(e), "base64");
  }
  var O = Ct2;
  O.encode = Ct2;
  O.decode = Ur2;
  O.toBase64 = ut2;
  O.fromBase64 = at2;
  O.toBuffer = Fr2;
  ht2.default = O;
});
var z4 = T3((me2, V) => {
  V.exports = Dt3().default;
  V.exports.default = V.exports;
});
var ct3 = T3((J2) => {
  "use strict";
  J2.byteLength = _r3;
  J2.toByteArray = Cr2;
  J2.fromByteArray = Nr2;
  var b2 = [], m2 = [], Lr2 = typeof Uint8Array < "u" ? Uint8Array : Array, ft2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (D2 = 0, Pt2 = ft2.length; D2 < Pt2; ++D2) b2[D2] = ft2[D2], m2[ft2.charCodeAt(D2)] = D2;
  var D2, Pt2;
  m2["-".charCodeAt(0)] = 62;
  m2["_".charCodeAt(0)] = 63;
  function Nt2(e) {
    var t = e.length;
    if (t % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    var r = e.indexOf("=");
    r === -1 && (r = t);
    var n = r === t ? 0 : 4 - r % 4;
    return [r, n];
  }
  function _r3(e) {
    var t = Nt2(e), r = t[0], n = t[1];
    return (r + n) * 3 / 4 - n;
  }
  function Rr2(e, t, r) {
    return (t + r) * 3 / 4 - r;
  }
  function Cr2(e) {
    var t, r = Nt2(e), n = r[0], i = r[1], o = new Lr2(Rr2(e, n, i)), s = 0, u = i > 0 ? n - 4 : n, h;
    for (h = 0; h < u; h += 4) t = m2[e.charCodeAt(h)] << 18 | m2[e.charCodeAt(h + 1)] << 12 | m2[e.charCodeAt(h + 2)] << 6 | m2[e.charCodeAt(h + 3)], o[s++] = t >> 16 & 255, o[s++] = t >> 8 & 255, o[s++] = t & 255;
    return i === 2 && (t = m2[e.charCodeAt(h)] << 2 | m2[e.charCodeAt(h + 1)] >> 4, o[s++] = t & 255), i === 1 && (t = m2[e.charCodeAt(h)] << 10 | m2[e.charCodeAt(h + 1)] << 4 | m2[e.charCodeAt(h + 2)] >> 2, o[s++] = t >> 8 & 255, o[s++] = t & 255), o;
  }
  function Dr2(e) {
    return b2[e >> 18 & 63] + b2[e >> 12 & 63] + b2[e >> 6 & 63] + b2[e & 63];
  }
  function Pr2(e, t, r) {
    for (var n, i = [], o = t; o < r; o += 3) n = (e[o] << 16 & 16711680) + (e[o + 1] << 8 & 65280) + (e[o + 2] & 255), i.push(Dr2(n));
    return i.join("");
  }
  function Nr2(e) {
    for (var t, r = e.length, n = r % 3, i = [], o = 16383, s = 0, u = r - n; s < u; s += o) i.push(Pr2(e, s, s + o > u ? u : s + o));
    return n === 1 ? (t = e[r - 1], i.push(b2[t >> 2] + b2[t << 4 & 63] + "==")) : n === 2 && (t = (e[r - 2] << 8) + e[r - 1], i.push(b2[t >> 10] + b2[t >> 4 & 63] + b2[t << 2 & 63] + "=")), i.join("");
  }
});
var pt3 = T3((g2) => {
  "use strict";
  Object.defineProperty(g2, "__esModule", { value: true });
  g2.b64UrlDecode = g2.b64UrlEncode = g2.bufferTob64Url = g2.bufferTob64 = g2.b64UrlToBuffer = g2.stringToB64Url = g2.stringToBuffer = g2.bufferToString = g2.b64UrlToString = g2.concatBuffers = void 0;
  var kt2 = ct3();
  function kr2(e) {
    let t = 0;
    for (let i = 0; i < e.length; i++) t += e[i].byteLength;
    let r = new Uint8Array(t), n = 0;
    r.set(new Uint8Array(e[0]), n), n += e[0].byteLength;
    for (let i = 1; i < e.length; i++) r.set(new Uint8Array(e[i]), n), n += e[i].byteLength;
    return r;
  }
  g2.concatBuffers = kr2;
  function Mr2(e) {
    let t = $t2(e);
    return Mt2(t);
  }
  g2.b64UrlToString = Mr2;
  function Mt2(e) {
    return new TextDecoder("utf-8", { fatal: true }).decode(e);
  }
  g2.bufferToString = Mt2;
  function Ot2(e) {
    return new TextEncoder().encode(e);
  }
  g2.stringToBuffer = Ot2;
  function Or2(e) {
    return Ht2(Ot2(e));
  }
  g2.stringToB64Url = Or2;
  function $t2(e) {
    return new Uint8Array(kt2.toByteArray(qt2(e)));
  }
  g2.b64UrlToBuffer = $t2;
  function Kt2(e) {
    return kt2.fromByteArray(new Uint8Array(e));
  }
  g2.bufferTob64 = Kt2;
  function Ht2(e) {
    return jt2(Kt2(e));
  }
  g2.bufferTob64Url = Ht2;
  function jt2(e) {
    return e.replace(/\+/g, "-").replace(/\//g, "_").replace(/\=/g, "");
  }
  g2.b64UrlEncode = jt2;
  function qt2(e) {
    e = e.replace(/\-/g, "+").replace(/\_/g, "/");
    let t;
    return e.length % 4 == 0 ? t = 0 : t = 4 - e.length % 4, e.concat("=".repeat(t));
  }
  g2.b64UrlDecode = qt2;
});
var Yt2 = T3((gt2) => {
  "use strict";
  Object.defineProperty(gt2, "__esModule", { value: true });
  var F3 = pt3(), lt2 = class {
    constructor() {
      __publicField(this, "keyLength", 4096);
      __publicField(this, "publicExponent", 65537);
      __publicField(this, "hashAlgorithm", "sha256");
      __publicField(this, "driver");
      if (!this.detectWebCrypto()) throw new Error("SubtleCrypto not available!");
      this.driver = crypto.subtle;
    }
    async generateJWK() {
      let t = await this.driver.generateKey({ name: "RSA-PSS", modulusLength: 4096, publicExponent: new Uint8Array([1, 0, 1]), hash: { name: "SHA-256" } }, true, ["sign"]), r = await this.driver.exportKey("jwk", t.privateKey);
      return { kty: r.kty, e: r.e, n: r.n, d: r.d, p: r.p, q: r.q, dp: r.dp, dq: r.dq, qi: r.qi };
    }
    async sign(t, r, { saltLength: n } = {}) {
      let i = await this.driver.sign({ name: "RSA-PSS", saltLength: 32 }, await this.jwkToCryptoKey(t), r);
      return new Uint8Array(i);
    }
    async hash(t, r = "SHA-256") {
      let n = await this.driver.digest(r, t);
      return new Uint8Array(n);
    }
    async verify(t, r, n) {
      let i = { kty: "RSA", e: "AQAB", n: t }, o = await this.jwkToPublicCryptoKey(i), s = await this.driver.digest("SHA-256", r), u = await this.driver.verify({ name: "RSA-PSS", saltLength: 0 }, o, n, r), h = await this.driver.verify({ name: "RSA-PSS", saltLength: 32 }, o, n, r), p2 = await this.driver.verify({ name: "RSA-PSS", saltLength: Math.ceil((o.algorithm.modulusLength - 1) / 8) - s.byteLength - 2 }, o, n, r);
      return u || h || p2;
    }
    async jwkToCryptoKey(t) {
      return this.driver.importKey("jwk", t, { name: "RSA-PSS", hash: { name: "SHA-256" } }, false, ["sign"]);
    }
    async jwkToPublicCryptoKey(t) {
      return this.driver.importKey("jwk", t, { name: "RSA-PSS", hash: { name: "SHA-256" } }, false, ["verify"]);
    }
    detectWebCrypto() {
      if (typeof crypto > "u") return false;
      let t = crypto == null ? void 0 : crypto.subtle;
      return t === void 0 ? false : ["generateKey", "importKey", "exportKey", "digest", "sign"].every((n) => typeof t[n] == "function");
    }
    async encrypt(t, r, n) {
      let i = await this.driver.importKey("raw", typeof r == "string" ? F3.stringToBuffer(r) : r, { name: "PBKDF2", length: 32 }, false, ["deriveKey"]), o = await this.driver.deriveKey({ name: "PBKDF2", salt: n ? F3.stringToBuffer(n) : F3.stringToBuffer("salt"), iterations: 1e5, hash: "SHA-256" }, i, { name: "AES-CBC", length: 256 }, false, ["encrypt", "decrypt"]), s = new Uint8Array(16);
      crypto.getRandomValues(s);
      let u = await this.driver.encrypt({ name: "AES-CBC", iv: s }, o, t);
      return F3.concatBuffers([s, u]);
    }
    async decrypt(t, r, n) {
      let i = await this.driver.importKey("raw", typeof r == "string" ? F3.stringToBuffer(r) : r, { name: "PBKDF2", length: 32 }, false, ["deriveKey"]), o = await this.driver.deriveKey({ name: "PBKDF2", salt: n ? F3.stringToBuffer(n) : F3.stringToBuffer("salt"), iterations: 1e5, hash: "SHA-256" }, i, { name: "AES-CBC", length: 256 }, false, ["encrypt", "decrypt"]), s = t.slice(0, 16), u = await this.driver.decrypt({ name: "AES-CBC", iv: s }, o, t.slice(16));
      return F3.concatBuffers([u]);
    }
  };
  gt2.default = lt2;
});
var zt3 = T3((mt2) => {
  mt2.read = function(e, t, r, n, i) {
    var o, s, u = i * 8 - n - 1, h = (1 << u) - 1, p2 = h >> 1, f2 = -7, c2 = r ? i - 1 : 0, U2 = r ? -1 : 1, l = e[t + c2];
    for (c2 += U2, o = l & (1 << -f2) - 1, l >>= -f2, f2 += u; f2 > 0; o = o * 256 + e[t + c2], c2 += U2, f2 -= 8) ;
    for (s = o & (1 << -f2) - 1, o >>= -f2, f2 += n; f2 > 0; s = s * 256 + e[t + c2], c2 += U2, f2 -= 8) ;
    if (o === 0) o = 1 - p2;
    else {
      if (o === h) return s ? NaN : (l ? -1 : 1) * (1 / 0);
      s = s + Math.pow(2, n), o = o - p2;
    }
    return (l ? -1 : 1) * s * Math.pow(2, o - n);
  };
  mt2.write = function(e, t, r, n, i, o) {
    var s, u, h, p2 = o * 8 - i - 1, f2 = (1 << p2) - 1, c2 = f2 >> 1, U2 = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, l = n ? 0 : o - 1, R2 = n ? 1 : -1, G2 = t < 0 || t === 0 && 1 / t < 0 ? 1 : 0;
    for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (u = isNaN(t) ? 1 : 0, s = f2) : (s = Math.floor(Math.log(t) / Math.LN2), t * (h = Math.pow(2, -s)) < 1 && (s--, h *= 2), s + c2 >= 1 ? t += U2 / h : t += U2 * Math.pow(2, 1 - c2), t * h >= 2 && (s++, h /= 2), s + c2 >= f2 ? (u = 0, s = f2) : s + c2 >= 1 ? (u = (t * h - 1) * Math.pow(2, i), s = s + c2) : (u = t * Math.pow(2, c2 - 1) * Math.pow(2, i), s = 0)); i >= 8; e[r + l] = u & 255, l += R2, u /= 256, i -= 8) ;
    for (s = s << i | u, p2 += i; p2 > 0; e[r + l] = s & 255, l += R2, s /= 256, p2 -= 8) ;
    e[r + l - R2] |= G2 * 128;
  };
});
var nt3 = T3((q2) => {
  "use strict";
  var Bt2 = ct3(), H2 = zt3(), Jt = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
  q2.Buffer = a;
  q2.SlowBuffer = Vr2;
  q2.INSPECT_MAX_BYTES = 50;
  var rt2 = 2147483647;
  q2.kMaxLength = rt2;
  a.TYPED_ARRAY_SUPPORT = qr2();
  !a.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
  function qr2() {
    try {
      let e = new Uint8Array(1), t = { foo: function() {
        return 42;
      } };
      return Object.setPrototypeOf(t, Uint8Array.prototype), Object.setPrototypeOf(e, t), e.foo() === 42;
    } catch (e) {
      return false;
    }
  }
  Object.defineProperty(a.prototype, "parent", { enumerable: true, get: function() {
    if (a.isBuffer(this)) return this.buffer;
  } });
  Object.defineProperty(a.prototype, "offset", { enumerable: true, get: function() {
    if (a.isBuffer(this)) return this.byteOffset;
  } });
  function S(e) {
    if (e > rt2) throw new RangeError('The value "' + e + '" is invalid for option "size"');
    let t = new Uint8Array(e);
    return Object.setPrototypeOf(t, a.prototype), t;
  }
  function a(e, t, r) {
    if (typeof e == "number") {
      if (typeof t == "string") throw new TypeError('The "string" argument must be of type string. Received type number');
      return Tt2(e);
    }
    return tr2(e, t, r);
  }
  a.poolSize = 8192;
  function tr2(e, t, r) {
    if (typeof e == "string") return Yr2(e, t);
    if (ArrayBuffer.isView(e)) return vr2(e);
    if (e == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
    if (A(e, ArrayBuffer) || e && A(e.buffer, ArrayBuffer) || typeof SharedArrayBuffer < "u" && (A(e, SharedArrayBuffer) || e && A(e.buffer, SharedArrayBuffer))) return bt2(e, t, r);
    if (typeof e == "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    let n = e.valueOf && e.valueOf();
    if (n != null && n !== e) return a.from(n, t, r);
    let i = Wr2(e);
    if (i) return i;
    if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof e[Symbol.toPrimitive] == "function") return a.from(e[Symbol.toPrimitive]("string"), t, r);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
  }
  a.from = function(e, t, r) {
    return tr2(e, t, r);
  };
  Object.setPrototypeOf(a.prototype, Uint8Array.prototype);
  Object.setPrototypeOf(a, Uint8Array);
  function rr2(e) {
    if (typeof e != "number") throw new TypeError('"size" argument must be of type number');
    if (e < 0) throw new RangeError('The value "' + e + '" is invalid for option "size"');
  }
  function Gr2(e, t, r) {
    return rr2(e), e <= 0 ? S(e) : t !== void 0 ? typeof r == "string" ? S(e).fill(t, r) : S(e).fill(t) : S(e);
  }
  a.alloc = function(e, t, r) {
    return Gr2(e, t, r);
  };
  function Tt2(e) {
    return rr2(e), S(e < 0 ? 0 : It2(e) | 0);
  }
  a.allocUnsafe = function(e) {
    return Tt2(e);
  };
  a.allocUnsafeSlow = function(e) {
    return Tt2(e);
  };
  function Yr2(e, t) {
    if ((typeof t != "string" || t === "") && (t = "utf8"), !a.isEncoding(t)) throw new TypeError("Unknown encoding: " + t);
    let r = er2(e, t) | 0, n = S(r), i = n.write(e, t);
    return i !== r && (n = n.slice(0, i)), n;
  }
  function Et2(e) {
    let t = e.length < 0 ? 0 : It2(e.length) | 0, r = S(t);
    for (let n = 0; n < t; n += 1) r[n] = e[n] & 255;
    return r;
  }
  function vr2(e) {
    if (A(e, Uint8Array)) {
      let t = new Uint8Array(e);
      return bt2(t.buffer, t.byteOffset, t.byteLength);
    }
    return Et2(e);
  }
  function bt2(e, t, r) {
    if (t < 0 || e.byteLength < t) throw new RangeError('"offset" is outside of buffer bounds');
    if (e.byteLength < t + (r || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let n;
    return t === void 0 && r === void 0 ? n = new Uint8Array(e) : r === void 0 ? n = new Uint8Array(e, t) : n = new Uint8Array(e, t, r), Object.setPrototypeOf(n, a.prototype), n;
  }
  function Wr2(e) {
    if (a.isBuffer(e)) {
      let t = It2(e.length) | 0, r = S(t);
      return r.length === 0 || e.copy(r, 0, 0, t), r;
    }
    if (e.length !== void 0) return typeof e.length != "number" || Ut2(e.length) ? S(0) : Et2(e);
    if (e.type === "Buffer" && Array.isArray(e.data)) return Et2(e.data);
  }
  function It2(e) {
    if (e >= rt2) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + rt2.toString(16) + " bytes");
    return e | 0;
  }
  function Vr2(e) {
    return +e != e && (e = 0), a.alloc(+e);
  }
  a.isBuffer = function(t) {
    return t != null && t._isBuffer === true && t !== a.prototype;
  };
  a.compare = function(t, r) {
    if (A(t, Uint8Array) && (t = a.from(t, t.offset, t.byteLength)), A(r, Uint8Array) && (r = a.from(r, r.offset, r.byteLength)), !a.isBuffer(t) || !a.isBuffer(r)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (t === r) return 0;
    let n = t.length, i = r.length;
    for (let o = 0, s = Math.min(n, i); o < s; ++o) if (t[o] !== r[o]) {
      n = t[o], i = r[o];
      break;
    }
    return n < i ? -1 : i < n ? 1 : 0;
  };
  a.isEncoding = function(t) {
    switch (String(t).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return true;
      default:
        return false;
    }
  };
  a.concat = function(t, r) {
    if (!Array.isArray(t)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (t.length === 0) return a.alloc(0);
    let n;
    if (r === void 0) for (r = 0, n = 0; n < t.length; ++n) r += t[n].length;
    let i = a.allocUnsafe(r), o = 0;
    for (n = 0; n < t.length; ++n) {
      let s = t[n];
      if (A(s, Uint8Array)) o + s.length > i.length ? (a.isBuffer(s) || (s = a.from(s)), s.copy(i, o)) : Uint8Array.prototype.set.call(i, s, o);
      else if (a.isBuffer(s)) s.copy(i, o);
      else throw new TypeError('"list" argument must be an Array of Buffers');
      o += s.length;
    }
    return i;
  };
  function er2(e, t) {
    if (a.isBuffer(e)) return e.length;
    if (ArrayBuffer.isView(e) || A(e, ArrayBuffer)) return e.byteLength;
    if (typeof e != "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof e);
    let r = e.length, n = arguments.length > 2 && arguments[2] === true;
    if (!n && r === 0) return 0;
    let i = false;
    for (; ; ) switch (t) {
      case "ascii":
      case "latin1":
      case "binary":
        return r;
      case "utf8":
      case "utf-8":
        return At2(e).length;
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return r * 2;
      case "hex":
        return r >>> 1;
      case "base64":
        return cr2(e).length;
      default:
        if (i) return n ? -1 : At2(e).length;
        t = ("" + t).toLowerCase(), i = true;
    }
  }
  a.byteLength = er2;
  function zr2(e, t, r) {
    let n = false;
    if ((t === void 0 || t < 0) && (t = 0), t > this.length || ((r === void 0 || r > this.length) && (r = this.length), r <= 0) || (r >>>= 0, t >>>= 0, r <= t)) return "";
    for (e || (e = "utf8"); ; ) switch (e) {
      case "hex":
        return oe(this, t, r);
      case "utf8":
      case "utf-8":
        return ir2(this, t, r);
      case "ascii":
        return ne2(this, t, r);
      case "latin1":
      case "binary":
        return ie2(this, t, r);
      case "base64":
        return re2(this, t, r);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return se2(this, t, r);
      default:
        if (n) throw new TypeError("Unknown encoding: " + e);
        e = (e + "").toLowerCase(), n = true;
    }
  }
  a.prototype._isBuffer = true;
  function k2(e, t, r) {
    let n = e[t];
    e[t] = e[r], e[r] = n;
  }
  a.prototype.swap16 = function() {
    let t = this.length;
    if (t % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for (let r = 0; r < t; r += 2) k2(this, r, r + 1);
    return this;
  };
  a.prototype.swap32 = function() {
    let t = this.length;
    if (t % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for (let r = 0; r < t; r += 4) k2(this, r, r + 3), k2(this, r + 1, r + 2);
    return this;
  };
  a.prototype.swap64 = function() {
    let t = this.length;
    if (t % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for (let r = 0; r < t; r += 8) k2(this, r, r + 7), k2(this, r + 1, r + 6), k2(this, r + 2, r + 5), k2(this, r + 3, r + 4);
    return this;
  };
  a.prototype.toString = function() {
    let t = this.length;
    return t === 0 ? "" : arguments.length === 0 ? ir2(this, 0, t) : zr2.apply(this, arguments);
  };
  a.prototype.toLocaleString = a.prototype.toString;
  a.prototype.equals = function(t) {
    if (!a.isBuffer(t)) throw new TypeError("Argument must be a Buffer");
    return this === t ? true : a.compare(this, t) === 0;
  };
  a.prototype.inspect = function() {
    let t = "", r = q2.INSPECT_MAX_BYTES;
    return t = this.toString("hex", 0, r).replace(/(.{2})/g, "$1 ").trim(), this.length > r && (t += " ... "), "<Buffer " + t + ">";
  };
  Jt && (a.prototype[Jt] = a.prototype.inspect);
  a.prototype.compare = function(t, r, n, i, o) {
    if (A(t, Uint8Array) && (t = a.from(t, t.offset, t.byteLength)), !a.isBuffer(t)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof t);
    if (r === void 0 && (r = 0), n === void 0 && (n = t ? t.length : 0), i === void 0 && (i = 0), o === void 0 && (o = this.length), r < 0 || n > t.length || i < 0 || o > this.length) throw new RangeError("out of range index");
    if (i >= o && r >= n) return 0;
    if (i >= o) return -1;
    if (r >= n) return 1;
    if (r >>>= 0, n >>>= 0, i >>>= 0, o >>>= 0, this === t) return 0;
    let s = o - i, u = n - r, h = Math.min(s, u), p2 = this.slice(i, o), f2 = t.slice(r, n);
    for (let c2 = 0; c2 < h; ++c2) if (p2[c2] !== f2[c2]) {
      s = p2[c2], u = f2[c2];
      break;
    }
    return s < u ? -1 : u < s ? 1 : 0;
  };
  function nr2(e, t, r, n, i) {
    if (e.length === 0) return -1;
    if (typeof r == "string" ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, Ut2(r) && (r = i ? 0 : e.length - 1), r < 0 && (r = e.length + r), r >= e.length) {
      if (i) return -1;
      r = e.length - 1;
    } else if (r < 0) if (i) r = 0;
    else return -1;
    if (typeof t == "string" && (t = a.from(t, n)), a.isBuffer(t)) return t.length === 0 ? -1 : Xt2(e, t, r, n, i);
    if (typeof t == "number") return t = t & 255, typeof Uint8Array.prototype.indexOf == "function" ? i ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : Xt2(e, [t], r, n, i);
    throw new TypeError("val must be string, number or Buffer");
  }
  function Xt2(e, t, r, n, i) {
    let o = 1, s = e.length, u = t.length;
    if (n !== void 0 && (n = String(n).toLowerCase(), n === "ucs2" || n === "ucs-2" || n === "utf16le" || n === "utf-16le")) {
      if (e.length < 2 || t.length < 2) return -1;
      o = 2, s /= 2, u /= 2, r /= 2;
    }
    function h(f2, c2) {
      return o === 1 ? f2[c2] : f2.readUInt16BE(c2 * o);
    }
    let p2;
    if (i) {
      let f2 = -1;
      for (p2 = r; p2 < s; p2++) if (h(e, p2) === h(t, f2 === -1 ? 0 : p2 - f2)) {
        if (f2 === -1 && (f2 = p2), p2 - f2 + 1 === u) return f2 * o;
      } else f2 !== -1 && (p2 -= p2 - f2), f2 = -1;
    } else for (r + u > s && (r = s - u), p2 = r; p2 >= 0; p2--) {
      let f2 = true;
      for (let c2 = 0; c2 < u; c2++) if (h(e, p2 + c2) !== h(t, c2)) {
        f2 = false;
        break;
      }
      if (f2) return p2;
    }
    return -1;
  }
  a.prototype.includes = function(t, r, n) {
    return this.indexOf(t, r, n) !== -1;
  };
  a.prototype.indexOf = function(t, r, n) {
    return nr2(this, t, r, n, true);
  };
  a.prototype.lastIndexOf = function(t, r, n) {
    return nr2(this, t, r, n, false);
  };
  function Jr2(e, t, r, n) {
    r = Number(r) || 0;
    let i = e.length - r;
    n ? (n = Number(n), n > i && (n = i)) : n = i;
    let o = t.length;
    n > o / 2 && (n = o / 2);
    let s;
    for (s = 0; s < n; ++s) {
      let u = parseInt(t.substr(s * 2, 2), 16);
      if (Ut2(u)) return s;
      e[r + s] = u;
    }
    return s;
  }
  function Xr2(e, t, r, n) {
    return et2(At2(t, e.length - r), e, r, n);
  }
  function Zr2(e, t, r, n) {
    return et2(fe2(t), e, r, n);
  }
  function Qr2(e, t, r, n) {
    return et2(cr2(t), e, r, n);
  }
  function te2(e, t, r, n) {
    return et2(ce2(t, e.length - r), e, r, n);
  }
  a.prototype.write = function(t, r, n, i) {
    if (r === void 0) i = "utf8", n = this.length, r = 0;
    else if (n === void 0 && typeof r == "string") i = r, n = this.length, r = 0;
    else if (isFinite(r)) r = r >>> 0, isFinite(n) ? (n = n >>> 0, i === void 0 && (i = "utf8")) : (i = n, n = void 0);
    else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    let o = this.length - r;
    if ((n === void 0 || n > o) && (n = o), t.length > 0 && (n < 0 || r < 0) || r > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    i || (i = "utf8");
    let s = false;
    for (; ; ) switch (i) {
      case "hex":
        return Jr2(this, t, r, n);
      case "utf8":
      case "utf-8":
        return Xr2(this, t, r, n);
      case "ascii":
      case "latin1":
      case "binary":
        return Zr2(this, t, r, n);
      case "base64":
        return Qr2(this, t, r, n);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return te2(this, t, r, n);
      default:
        if (s) throw new TypeError("Unknown encoding: " + i);
        i = ("" + i).toLowerCase(), s = true;
    }
  };
  a.prototype.toJSON = function() {
    return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
  };
  function re2(e, t, r) {
    return t === 0 && r === e.length ? Bt2.fromByteArray(e) : Bt2.fromByteArray(e.slice(t, r));
  }
  function ir2(e, t, r) {
    r = Math.min(e.length, r);
    let n = [], i = t;
    for (; i < r; ) {
      let o = e[i], s = null, u = o > 239 ? 4 : o > 223 ? 3 : o > 191 ? 2 : 1;
      if (i + u <= r) {
        let h, p2, f2, c2;
        switch (u) {
          case 1:
            o < 128 && (s = o);
            break;
          case 2:
            h = e[i + 1], (h & 192) === 128 && (c2 = (o & 31) << 6 | h & 63, c2 > 127 && (s = c2));
            break;
          case 3:
            h = e[i + 1], p2 = e[i + 2], (h & 192) === 128 && (p2 & 192) === 128 && (c2 = (o & 15) << 12 | (h & 63) << 6 | p2 & 63, c2 > 2047 && (c2 < 55296 || c2 > 57343) && (s = c2));
            break;
          case 4:
            h = e[i + 1], p2 = e[i + 2], f2 = e[i + 3], (h & 192) === 128 && (p2 & 192) === 128 && (f2 & 192) === 128 && (c2 = (o & 15) << 18 | (h & 63) << 12 | (p2 & 63) << 6 | f2 & 63, c2 > 65535 && c2 < 1114112 && (s = c2));
        }
      }
      s === null ? (s = 65533, u = 1) : s > 65535 && (s -= 65536, n.push(s >>> 10 & 1023 | 55296), s = 56320 | s & 1023), n.push(s), i += u;
    }
    return ee2(n);
  }
  var Zt2 = 4096;
  function ee2(e) {
    let t = e.length;
    if (t <= Zt2) return String.fromCharCode.apply(String, e);
    let r = "", n = 0;
    for (; n < t; ) r += String.fromCharCode.apply(String, e.slice(n, n += Zt2));
    return r;
  }
  function ne2(e, t, r) {
    let n = "";
    r = Math.min(e.length, r);
    for (let i = t; i < r; ++i) n += String.fromCharCode(e[i] & 127);
    return n;
  }
  function ie2(e, t, r) {
    let n = "";
    r = Math.min(e.length, r);
    for (let i = t; i < r; ++i) n += String.fromCharCode(e[i]);
    return n;
  }
  function oe(e, t, r) {
    let n = e.length;
    (!t || t < 0) && (t = 0), (!r || r < 0 || r > n) && (r = n);
    let i = "";
    for (let o = t; o < r; ++o) i += pe2[e[o]];
    return i;
  }
  function se2(e, t, r) {
    let n = e.slice(t, r), i = "";
    for (let o = 0; o < n.length - 1; o += 2) i += String.fromCharCode(n[o] + n[o + 1] * 256);
    return i;
  }
  a.prototype.slice = function(t, r) {
    let n = this.length;
    t = ~~t, r = r === void 0 ? n : ~~r, t < 0 ? (t += n, t < 0 && (t = 0)) : t > n && (t = n), r < 0 ? (r += n, r < 0 && (r = 0)) : r > n && (r = n), r < t && (r = t);
    let i = this.subarray(t, r);
    return Object.setPrototypeOf(i, a.prototype), i;
  };
  function y2(e, t, r) {
    if (e % 1 !== 0 || e < 0) throw new RangeError("offset is not uint");
    if (e + t > r) throw new RangeError("Trying to access beyond buffer length");
  }
  a.prototype.readUintLE = a.prototype.readUIntLE = function(t, r, n) {
    t = t >>> 0, r = r >>> 0, n || y2(t, r, this.length);
    let i = this[t], o = 1, s = 0;
    for (; ++s < r && (o *= 256); ) i += this[t + s] * o;
    return i;
  };
  a.prototype.readUintBE = a.prototype.readUIntBE = function(t, r, n) {
    t = t >>> 0, r = r >>> 0, n || y2(t, r, this.length);
    let i = this[t + --r], o = 1;
    for (; r > 0 && (o *= 256); ) i += this[t + --r] * o;
    return i;
  };
  a.prototype.readUint8 = a.prototype.readUInt8 = function(t, r) {
    return t = t >>> 0, r || y2(t, 1, this.length), this[t];
  };
  a.prototype.readUint16LE = a.prototype.readUInt16LE = function(t, r) {
    return t = t >>> 0, r || y2(t, 2, this.length), this[t] | this[t + 1] << 8;
  };
  a.prototype.readUint16BE = a.prototype.readUInt16BE = function(t, r) {
    return t = t >>> 0, r || y2(t, 2, this.length), this[t] << 8 | this[t + 1];
  };
  a.prototype.readUint32LE = a.prototype.readUInt32LE = function(t, r) {
    return t = t >>> 0, r || y2(t, 4, this.length), (this[t] | this[t + 1] << 8 | this[t + 2] << 16) + this[t + 3] * 16777216;
  };
  a.prototype.readUint32BE = a.prototype.readUInt32BE = function(t, r) {
    return t = t >>> 0, r || y2(t, 4, this.length), this[t] * 16777216 + (this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3]);
  };
  a.prototype.readBigUInt64LE = L(function(t) {
    t = t >>> 0, j2(t, "offset");
    let r = this[t], n = this[t + 7];
    (r === void 0 || n === void 0) && W(t, this.length - 8);
    let i = r + this[++t] * 2 ** 8 + this[++t] * 2 ** 16 + this[++t] * 2 ** 24, o = this[++t] + this[++t] * 2 ** 8 + this[++t] * 2 ** 16 + n * 2 ** 24;
    return BigInt(i) + (BigInt(o) << BigInt(32));
  });
  a.prototype.readBigUInt64BE = L(function(t) {
    t = t >>> 0, j2(t, "offset");
    let r = this[t], n = this[t + 7];
    (r === void 0 || n === void 0) && W(t, this.length - 8);
    let i = r * 2 ** 24 + this[++t] * 2 ** 16 + this[++t] * 2 ** 8 + this[++t], o = this[++t] * 2 ** 24 + this[++t] * 2 ** 16 + this[++t] * 2 ** 8 + n;
    return (BigInt(i) << BigInt(32)) + BigInt(o);
  });
  a.prototype.readIntLE = function(t, r, n) {
    t = t >>> 0, r = r >>> 0, n || y2(t, r, this.length);
    let i = this[t], o = 1, s = 0;
    for (; ++s < r && (o *= 256); ) i += this[t + s] * o;
    return o *= 128, i >= o && (i -= Math.pow(2, 8 * r)), i;
  };
  a.prototype.readIntBE = function(t, r, n) {
    t = t >>> 0, r = r >>> 0, n || y2(t, r, this.length);
    let i = r, o = 1, s = this[t + --i];
    for (; i > 0 && (o *= 256); ) s += this[t + --i] * o;
    return o *= 128, s >= o && (s -= Math.pow(2, 8 * r)), s;
  };
  a.prototype.readInt8 = function(t, r) {
    return t = t >>> 0, r || y2(t, 1, this.length), this[t] & 128 ? (255 - this[t] + 1) * -1 : this[t];
  };
  a.prototype.readInt16LE = function(t, r) {
    t = t >>> 0, r || y2(t, 2, this.length);
    let n = this[t] | this[t + 1] << 8;
    return n & 32768 ? n | 4294901760 : n;
  };
  a.prototype.readInt16BE = function(t, r) {
    t = t >>> 0, r || y2(t, 2, this.length);
    let n = this[t + 1] | this[t] << 8;
    return n & 32768 ? n | 4294901760 : n;
  };
  a.prototype.readInt32LE = function(t, r) {
    return t = t >>> 0, r || y2(t, 4, this.length), this[t] | this[t + 1] << 8 | this[t + 2] << 16 | this[t + 3] << 24;
  };
  a.prototype.readInt32BE = function(t, r) {
    return t = t >>> 0, r || y2(t, 4, this.length), this[t] << 24 | this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3];
  };
  a.prototype.readBigInt64LE = L(function(t) {
    t = t >>> 0, j2(t, "offset");
    let r = this[t], n = this[t + 7];
    (r === void 0 || n === void 0) && W(t, this.length - 8);
    let i = this[t + 4] + this[t + 5] * 2 ** 8 + this[t + 6] * 2 ** 16 + (n << 24);
    return (BigInt(i) << BigInt(32)) + BigInt(r + this[++t] * 2 ** 8 + this[++t] * 2 ** 16 + this[++t] * 2 ** 24);
  });
  a.prototype.readBigInt64BE = L(function(t) {
    t = t >>> 0, j2(t, "offset");
    let r = this[t], n = this[t + 7];
    (r === void 0 || n === void 0) && W(t, this.length - 8);
    let i = (r << 24) + this[++t] * 2 ** 16 + this[++t] * 2 ** 8 + this[++t];
    return (BigInt(i) << BigInt(32)) + BigInt(this[++t] * 2 ** 24 + this[++t] * 2 ** 16 + this[++t] * 2 ** 8 + n);
  });
  a.prototype.readFloatLE = function(t, r) {
    return t = t >>> 0, r || y2(t, 4, this.length), H2.read(this, t, true, 23, 4);
  };
  a.prototype.readFloatBE = function(t, r) {
    return t = t >>> 0, r || y2(t, 4, this.length), H2.read(this, t, false, 23, 4);
  };
  a.prototype.readDoubleLE = function(t, r) {
    return t = t >>> 0, r || y2(t, 8, this.length), H2.read(this, t, true, 52, 8);
  };
  a.prototype.readDoubleBE = function(t, r) {
    return t = t >>> 0, r || y2(t, 8, this.length), H2.read(this, t, false, 52, 8);
  };
  function d2(e, t, r, n, i, o) {
    if (!a.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (t > i || t < o) throw new RangeError('"value" argument is out of bounds');
    if (r + n > e.length) throw new RangeError("Index out of range");
  }
  a.prototype.writeUintLE = a.prototype.writeUIntLE = function(t, r, n, i) {
    if (t = +t, r = r >>> 0, n = n >>> 0, !i) {
      let u = Math.pow(2, 8 * n) - 1;
      d2(this, t, r, n, u, 0);
    }
    let o = 1, s = 0;
    for (this[r] = t & 255; ++s < n && (o *= 256); ) this[r + s] = t / o & 255;
    return r + n;
  };
  a.prototype.writeUintBE = a.prototype.writeUIntBE = function(t, r, n, i) {
    if (t = +t, r = r >>> 0, n = n >>> 0, !i) {
      let u = Math.pow(2, 8 * n) - 1;
      d2(this, t, r, n, u, 0);
    }
    let o = n - 1, s = 1;
    for (this[r + o] = t & 255; --o >= 0 && (s *= 256); ) this[r + o] = t / s & 255;
    return r + n;
  };
  a.prototype.writeUint8 = a.prototype.writeUInt8 = function(t, r, n) {
    return t = +t, r = r >>> 0, n || d2(this, t, r, 1, 255, 0), this[r] = t & 255, r + 1;
  };
  a.prototype.writeUint16LE = a.prototype.writeUInt16LE = function(t, r, n) {
    return t = +t, r = r >>> 0, n || d2(this, t, r, 2, 65535, 0), this[r] = t & 255, this[r + 1] = t >>> 8, r + 2;
  };
  a.prototype.writeUint16BE = a.prototype.writeUInt16BE = function(t, r, n) {
    return t = +t, r = r >>> 0, n || d2(this, t, r, 2, 65535, 0), this[r] = t >>> 8, this[r + 1] = t & 255, r + 2;
  };
  a.prototype.writeUint32LE = a.prototype.writeUInt32LE = function(t, r, n) {
    return t = +t, r = r >>> 0, n || d2(this, t, r, 4, 4294967295, 0), this[r + 3] = t >>> 24, this[r + 2] = t >>> 16, this[r + 1] = t >>> 8, this[r] = t & 255, r + 4;
  };
  a.prototype.writeUint32BE = a.prototype.writeUInt32BE = function(t, r, n) {
    return t = +t, r = r >>> 0, n || d2(this, t, r, 4, 4294967295, 0), this[r] = t >>> 24, this[r + 1] = t >>> 16, this[r + 2] = t >>> 8, this[r + 3] = t & 255, r + 4;
  };
  function or2(e, t, r, n, i) {
    fr2(t, n, i, e, r, 7);
    let o = Number(t & BigInt(4294967295));
    e[r++] = o, o = o >> 8, e[r++] = o, o = o >> 8, e[r++] = o, o = o >> 8, e[r++] = o;
    let s = Number(t >> BigInt(32) & BigInt(4294967295));
    return e[r++] = s, s = s >> 8, e[r++] = s, s = s >> 8, e[r++] = s, s = s >> 8, e[r++] = s, r;
  }
  function sr2(e, t, r, n, i) {
    fr2(t, n, i, e, r, 7);
    let o = Number(t & BigInt(4294967295));
    e[r + 7] = o, o = o >> 8, e[r + 6] = o, o = o >> 8, e[r + 5] = o, o = o >> 8, e[r + 4] = o;
    let s = Number(t >> BigInt(32) & BigInt(4294967295));
    return e[r + 3] = s, s = s >> 8, e[r + 2] = s, s = s >> 8, e[r + 1] = s, s = s >> 8, e[r] = s, r + 8;
  }
  a.prototype.writeBigUInt64LE = L(function(t, r = 0) {
    return or2(this, t, r, BigInt(0), BigInt("0xffffffffffffffff"));
  });
  a.prototype.writeBigUInt64BE = L(function(t, r = 0) {
    return sr2(this, t, r, BigInt(0), BigInt("0xffffffffffffffff"));
  });
  a.prototype.writeIntLE = function(t, r, n, i) {
    if (t = +t, r = r >>> 0, !i) {
      let h = Math.pow(2, 8 * n - 1);
      d2(this, t, r, n, h - 1, -h);
    }
    let o = 0, s = 1, u = 0;
    for (this[r] = t & 255; ++o < n && (s *= 256); ) t < 0 && u === 0 && this[r + o - 1] !== 0 && (u = 1), this[r + o] = (t / s >> 0) - u & 255;
    return r + n;
  };
  a.prototype.writeIntBE = function(t, r, n, i) {
    if (t = +t, r = r >>> 0, !i) {
      let h = Math.pow(2, 8 * n - 1);
      d2(this, t, r, n, h - 1, -h);
    }
    let o = n - 1, s = 1, u = 0;
    for (this[r + o] = t & 255; --o >= 0 && (s *= 256); ) t < 0 && u === 0 && this[r + o + 1] !== 0 && (u = 1), this[r + o] = (t / s >> 0) - u & 255;
    return r + n;
  };
  a.prototype.writeInt8 = function(t, r, n) {
    return t = +t, r = r >>> 0, n || d2(this, t, r, 1, 127, -128), t < 0 && (t = 255 + t + 1), this[r] = t & 255, r + 1;
  };
  a.prototype.writeInt16LE = function(t, r, n) {
    return t = +t, r = r >>> 0, n || d2(this, t, r, 2, 32767, -32768), this[r] = t & 255, this[r + 1] = t >>> 8, r + 2;
  };
  a.prototype.writeInt16BE = function(t, r, n) {
    return t = +t, r = r >>> 0, n || d2(this, t, r, 2, 32767, -32768), this[r] = t >>> 8, this[r + 1] = t & 255, r + 2;
  };
  a.prototype.writeInt32LE = function(t, r, n) {
    return t = +t, r = r >>> 0, n || d2(this, t, r, 4, 2147483647, -2147483648), this[r] = t & 255, this[r + 1] = t >>> 8, this[r + 2] = t >>> 16, this[r + 3] = t >>> 24, r + 4;
  };
  a.prototype.writeInt32BE = function(t, r, n) {
    return t = +t, r = r >>> 0, n || d2(this, t, r, 4, 2147483647, -2147483648), t < 0 && (t = 4294967295 + t + 1), this[r] = t >>> 24, this[r + 1] = t >>> 16, this[r + 2] = t >>> 8, this[r + 3] = t & 255, r + 4;
  };
  a.prototype.writeBigInt64LE = L(function(t, r = 0) {
    return or2(this, t, r, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  a.prototype.writeBigInt64BE = L(function(t, r = 0) {
    return sr2(this, t, r, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  function ar2(e, t, r, n, i, o) {
    if (r + n > e.length) throw new RangeError("Index out of range");
    if (r < 0) throw new RangeError("Index out of range");
  }
  function ur2(e, t, r, n, i) {
    return t = +t, r = r >>> 0, i || ar2(e, t, r, 4, 34028234663852886e22, -34028234663852886e22), H2.write(e, t, r, n, 23, 4), r + 4;
  }
  a.prototype.writeFloatLE = function(t, r, n) {
    return ur2(this, t, r, true, n);
  };
  a.prototype.writeFloatBE = function(t, r, n) {
    return ur2(this, t, r, false, n);
  };
  function hr2(e, t, r, n, i) {
    return t = +t, r = r >>> 0, i || ar2(e, t, r, 8, 17976931348623157e292, -17976931348623157e292), H2.write(e, t, r, n, 52, 8), r + 8;
  }
  a.prototype.writeDoubleLE = function(t, r, n) {
    return hr2(this, t, r, true, n);
  };
  a.prototype.writeDoubleBE = function(t, r, n) {
    return hr2(this, t, r, false, n);
  };
  a.prototype.copy = function(t, r, n, i) {
    if (!a.isBuffer(t)) throw new TypeError("argument should be a Buffer");
    if (n || (n = 0), !i && i !== 0 && (i = this.length), r >= t.length && (r = t.length), r || (r = 0), i > 0 && i < n && (i = n), i === n || t.length === 0 || this.length === 0) return 0;
    if (r < 0) throw new RangeError("targetStart out of bounds");
    if (n < 0 || n >= this.length) throw new RangeError("Index out of range");
    if (i < 0) throw new RangeError("sourceEnd out of bounds");
    i > this.length && (i = this.length), t.length - r < i - n && (i = t.length - r + n);
    let o = i - n;
    return this === t && typeof Uint8Array.prototype.copyWithin == "function" ? this.copyWithin(r, n, i) : Uint8Array.prototype.set.call(t, this.subarray(n, i), r), o;
  };
  a.prototype.fill = function(t, r, n, i) {
    if (typeof t == "string") {
      if (typeof r == "string" ? (i = r, r = 0, n = this.length) : typeof n == "string" && (i = n, n = this.length), i !== void 0 && typeof i != "string") throw new TypeError("encoding must be a string");
      if (typeof i == "string" && !a.isEncoding(i)) throw new TypeError("Unknown encoding: " + i);
      if (t.length === 1) {
        let s = t.charCodeAt(0);
        (i === "utf8" && s < 128 || i === "latin1") && (t = s);
      }
    } else typeof t == "number" ? t = t & 255 : typeof t == "boolean" && (t = Number(t));
    if (r < 0 || this.length < r || this.length < n) throw new RangeError("Out of range index");
    if (n <= r) return this;
    r = r >>> 0, n = n === void 0 ? this.length : n >>> 0, t || (t = 0);
    let o;
    if (typeof t == "number") for (o = r; o < n; ++o) this[o] = t;
    else {
      let s = a.isBuffer(t) ? t : a.from(t, i), u = s.length;
      if (u === 0) throw new TypeError('The value "' + t + '" is invalid for argument "value"');
      for (o = 0; o < n - r; ++o) this[o + r] = s[o % u];
    }
    return this;
  };
  var K2 = {};
  function St2(e, t, r) {
    K2[e] = class extends r {
      constructor() {
        super(), Object.defineProperty(this, "message", { value: t.apply(this, arguments), writable: true, configurable: true }), this.name = `${this.name} [${e}]`, this.stack, delete this.name;
      }
      get code() {
        return e;
      }
      set code(i) {
        Object.defineProperty(this, "code", { configurable: true, enumerable: true, value: i, writable: true });
      }
      toString() {
        return `${this.name} [${e}]: ${this.message}`;
      }
    };
  }
  St2("ERR_BUFFER_OUT_OF_BOUNDS", function(e) {
    return e ? `${e} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
  }, RangeError);
  St2("ERR_INVALID_ARG_TYPE", function(e, t) {
    return `The "${e}" argument must be of type number. Received type ${typeof t}`;
  }, TypeError);
  St2("ERR_OUT_OF_RANGE", function(e, t, r) {
    let n = `The value of "${e}" is out of range.`, i = r;
    return Number.isInteger(r) && Math.abs(r) > 2 ** 32 ? i = Qt2(String(r)) : typeof r == "bigint" && (i = String(r), (r > BigInt(2) ** BigInt(32) || r < -(BigInt(2) ** BigInt(32))) && (i = Qt2(i)), i += "n"), n += ` It must be ${t}. Received ${i}`, n;
  }, RangeError);
  function Qt2(e) {
    let t = "", r = e.length, n = e[0] === "-" ? 1 : 0;
    for (; r >= n + 4; r -= 3) t = `_${e.slice(r - 3, r)}${t}`;
    return `${e.slice(0, r)}${t}`;
  }
  function ae2(e, t, r) {
    j2(t, "offset"), (e[t] === void 0 || e[t + r] === void 0) && W(t, e.length - (r + 1));
  }
  function fr2(e, t, r, n, i, o) {
    if (e > r || e < t) {
      let s = typeof t == "bigint" ? "n" : "", u;
      throw o > 3 ? t === 0 || t === BigInt(0) ? u = `>= 0${s} and < 2${s} ** ${(o + 1) * 8}${s}` : u = `>= -(2${s} ** ${(o + 1) * 8 - 1}${s}) and < 2 ** ${(o + 1) * 8 - 1}${s}` : u = `>= ${t}${s} and <= ${r}${s}`, new K2.ERR_OUT_OF_RANGE("value", u, e);
    }
    ae2(n, i, o);
  }
  function j2(e, t) {
    if (typeof e != "number") throw new K2.ERR_INVALID_ARG_TYPE(t, "number", e);
  }
  function W(e, t, r) {
    throw Math.floor(e) !== e ? (j2(e, r), new K2.ERR_OUT_OF_RANGE(r || "offset", "an integer", e)) : t < 0 ? new K2.ERR_BUFFER_OUT_OF_BOUNDS() : new K2.ERR_OUT_OF_RANGE(r || "offset", `>= ${r ? 1 : 0} and <= ${t}`, e);
  }
  var ue2 = /[^+/0-9A-Za-z-_]/g;
  function he2(e) {
    if (e = e.split("=")[0], e = e.trim().replace(ue2, ""), e.length < 2) return "";
    for (; e.length % 4 !== 0; ) e = e + "=";
    return e;
  }
  function At2(e, t) {
    t = t || 1 / 0;
    let r, n = e.length, i = null, o = [];
    for (let s = 0; s < n; ++s) {
      if (r = e.charCodeAt(s), r > 55295 && r < 57344) {
        if (!i) {
          if (r > 56319) {
            (t -= 3) > -1 && o.push(239, 191, 189);
            continue;
          } else if (s + 1 === n) {
            (t -= 3) > -1 && o.push(239, 191, 189);
            continue;
          }
          i = r;
          continue;
        }
        if (r < 56320) {
          (t -= 3) > -1 && o.push(239, 191, 189), i = r;
          continue;
        }
        r = (i - 55296 << 10 | r - 56320) + 65536;
      } else i && (t -= 3) > -1 && o.push(239, 191, 189);
      if (i = null, r < 128) {
        if ((t -= 1) < 0) break;
        o.push(r);
      } else if (r < 2048) {
        if ((t -= 2) < 0) break;
        o.push(r >> 6 | 192, r & 63 | 128);
      } else if (r < 65536) {
        if ((t -= 3) < 0) break;
        o.push(r >> 12 | 224, r >> 6 & 63 | 128, r & 63 | 128);
      } else if (r < 1114112) {
        if ((t -= 4) < 0) break;
        o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, r & 63 | 128);
      } else throw new Error("Invalid code point");
    }
    return o;
  }
  function fe2(e) {
    let t = [];
    for (let r = 0; r < e.length; ++r) t.push(e.charCodeAt(r) & 255);
    return t;
  }
  function ce2(e, t) {
    let r, n, i, o = [];
    for (let s = 0; s < e.length && !((t -= 2) < 0); ++s) r = e.charCodeAt(s), n = r >> 8, i = r % 256, o.push(i), o.push(n);
    return o;
  }
  function cr2(e) {
    return Bt2.toByteArray(he2(e));
  }
  function et2(e, t, r, n) {
    let i;
    for (i = 0; i < n && !(i + r >= t.length || i >= e.length); ++i) t[i + r] = e[i];
    return i;
  }
  function A(e, t) {
    return e instanceof t || e != null && e.constructor != null && e.constructor.name != null && e.constructor.name === t.name;
  }
  function Ut2(e) {
    return e !== e;
  }
  var pe2 = function() {
    let e = "0123456789abcdef", t = new Array(256);
    for (let r = 0; r < 16; ++r) {
      let n = r * 16;
      for (let i = 0; i < 16; ++i) t[n + i] = e[r] + e[i];
    }
    return t;
  }();
  function L(e) {
    return typeof BigInt > "u" ? le2 : e;
  }
  function le2() {
    throw new Error("BigInt not supported");
  }
});
var pr3 = T3((Je2, Ft2) => {
  typeof window < "u" ? (window.global = window, window.fetch = window.fetch, Ft2.exports = { Buffer: nt3().Buffer, Crypto: window.crypto }) : Ft2.exports = { Buffer: nt3().Buffer, Crypto: crypto };
});
var Lt3 = {};
Ar3(Lt3, { AVSCTap: () => $3, ArweaveSigner: () => N3, DataItem: () => _3, MAX_TAG_BYTES: () => tt3, MIN_BINARY_SIZE: () => gr3, SIG_CONFIG: () => P3, SignatureConfig: () => B2, Signer: () => ot3, createData: () => ge3, deserializeTags: () => Q2, indexToType: () => wt3, serializeTags: () => dt3, tagsExceedLimit: () => jr3 });
var ot3 = class {
  constructor() {
    __publicField(this, "signer");
    __publicField(this, "publicKey");
    __publicField(this, "signatureType");
    __publicField(this, "signatureLength");
    __publicField(this, "ownerLength");
    __publicField(this, "pem");
  }
  static verify(t, r, n, i) {
    throw new Error("You must implement verify method on child");
  }
};
var vt3 = C2(z4(), 1);
var w3 = C2(pt3(), 1);
async function X3(e) {
  if (Array.isArray(e)) {
    let i = (0, w3.concatBuffers)([(0, w3.stringToBuffer)("list"), (0, w3.stringToBuffer)(e.length.toString())]);
    return await Gt3(e, await x3().hash(i, "SHA-384"));
  }
  let t = e, r = (0, w3.concatBuffers)([(0, w3.stringToBuffer)("blob"), (0, w3.stringToBuffer)(t.byteLength.toString())]), n = (0, w3.concatBuffers)([await x3().hash(r, "SHA-384"), await x3().hash(t, "SHA-384")]);
  return await x3().hash(n, "SHA-384");
}
async function Gt3(e, t) {
  if (e.length < 1) return t;
  let r = (0, w3.concatBuffers)([t, await X3(e[0])]), n = await x3().hash(r, "SHA-384");
  return await Gt3(e.slice(1), n);
}
var Z3 = C2(Yt2(), 1);
var $r3 = Z3.default.default ? Z3.default.default : Z3.default;
var yt3 = class extends $r3 {
  getPublicKey(t) {
    throw new Error("Unimplemented");
  }
};
var Kr3;
function x3() {
  return Kr3 != null ? Kr3 : Kr3 = new yt3();
}
var B2;
(function(e) {
  e[e.ARWEAVE = 1] = "ARWEAVE", e[e.ED25519 = 2] = "ED25519", e[e.ETHEREUM = 3] = "ETHEREUM", e[e.SOLANA = 4] = "SOLANA", e[e.INJECTEDAPTOS = 5] = "INJECTEDAPTOS", e[e.MULTIAPTOS = 6] = "MULTIAPTOS", e[e.TYPEDETHEREUM = 7] = "TYPEDETHEREUM";
})(B2 || (B2 = {}));
var P3 = { [B2.ARWEAVE]: { sigLength: 512, pubLength: 512, sigName: "arweave" }, [B2.ED25519]: { sigLength: 64, pubLength: 32, sigName: "ed25519" }, [B2.ETHEREUM]: { sigLength: 65, pubLength: 65, sigName: "ethereum" }, [B2.SOLANA]: { sigLength: 64, pubLength: 32, sigName: "solana" }, [B2.INJECTEDAPTOS]: { sigLength: 64, pubLength: 32, sigName: "injectedAptos" }, [B2.MULTIAPTOS]: { sigLength: 64 * 32 + 4, pubLength: 32 * 32 + 1, sigName: "multiAptos" }, [B2.TYPEDETHEREUM]: { sigLength: 65, pubLength: 42, sigName: "typedEthereum" } };
var N3 = class {
  constructor(t) {
    __publicField(this, "signatureType", 1);
    __publicField(this, "ownerLength", P3[1].pubLength);
    __publicField(this, "signatureLength", P3[1].sigLength);
    __publicField(this, "jwk");
    __publicField(this, "pk");
    this.pk = t.n, this.jwk = t;
  }
  get publicKey() {
    return vt3.default.toBuffer(this.pk);
  }
  sign(t) {
    return x3().sign(this.jwk, t);
  }
  static async verify(t, r, n) {
    return await x3().verify(t, r, n);
  }
};
var wt3 = { 1: N3 };
var E3 = C2(z4(), 1);
async function v2(e) {
  return X3([(0, w3.stringToBuffer)("dataitem"), (0, w3.stringToBuffer)("1"), (0, w3.stringToBuffer)(e.signatureType.toString()), e.rawOwner, e.rawTarget, e.rawAnchor, e.rawTags, e.rawData]);
}
async function Hr3(e, t) {
  let r = await v2(e), n = await t.sign(r), i = await x3().hash(n);
  return { signature: Buffer.from(n), id: Buffer.from(i) };
}
async function Wt3(e, t) {
  let { signature: r, id: n } = await Hr3(e, t);
  return e.getRaw().set(r, 2), n;
}
var $3 = class {
  constructor(t = Buffer.alloc(tt3), r = 0) {
    __publicField(this, "buf");
    __publicField(this, "pos");
    this.buf = t, this.pos = r;
  }
  writeTags(t) {
    if (!Array.isArray(t)) throw new Error("input must be array");
    let r = t.length, n;
    if (r) for (this.writeLong(r), n = 0; n < r; n++) {
      let i = t[n];
      if ((i == null ? void 0 : i.name) === void 0 || (i == null ? void 0 : i.value) === void 0) throw new Error(`Invalid tag format for ${i}, expected {name:string, value: string}`);
      this.writeString(i.name), this.writeString(i.value);
    }
    this.writeLong(0);
  }
  toBuffer() {
    let t = Buffer.alloc(this.pos);
    if (this.pos > this.buf.length) throw new Error(`Too many tag bytes (${this.pos} > ${this.buf.length})`);
    return this.buf.copy(t, 0, 0, this.pos), t;
  }
  tagsExceedLimit() {
    return this.pos > this.buf.length;
  }
  writeLong(t) {
    let r = this.buf, n, i;
    if (t >= -1073741824 && t < 1073741824) {
      i = t >= 0 ? t << 1 : ~t << 1 | 1;
      do
        r[this.pos] = i & 127, i >>= 7;
      while (i && (r[this.pos++] |= 128));
    } else {
      n = t >= 0 ? t * 2 : -t * 2 - 1;
      do
        r[this.pos] = n & 127, n /= 128;
      while (n >= 1 && (r[this.pos++] |= 128));
    }
    this.pos++, this.buf = r;
  }
  writeString(t) {
    let r = Buffer.byteLength(t), n = this.buf;
    this.writeLong(r);
    let i = this.pos;
    if (this.pos += r, !(this.pos > n.length)) {
      if (r > 64) this.buf.write(t, this.pos - r, r, "utf8");
      else {
        let o, s, u, h;
        for (o = 0, s = r; o < s; o++) u = t.charCodeAt(o), u < 128 ? n[i++] = u : u < 2048 ? (n[i++] = u >> 6 | 192, n[i++] = u & 63 | 128) : (u & 64512) === 55296 && ((h = t.charCodeAt(o + 1)) & 64512) === 56320 ? (u = 65536 + ((u & 1023) << 10) + (h & 1023), o++, n[i++] = u >> 18 | 240, n[i++] = u >> 12 & 63 | 128, n[i++] = u >> 6 & 63 | 128, n[i++] = u & 63 | 128) : (n[i++] = u >> 12 | 224, n[i++] = u >> 6 & 63 | 128, n[i++] = u & 63 | 128);
      }
      this.buf = n;
    }
  }
  readLong() {
    let t = 0, r = 0, n = this.buf, i, o, s, u;
    do
      i = n[this.pos++], o = i & 128, t |= (i & 127) << r, r += 7;
    while (o && r < 28);
    if (o) {
      s = t, u = 268435456;
      do
        i = n[this.pos++], s += (i & 127) * u, u *= 128;
      while (i & 128);
      return (s % 2 ? -(s + 1) : s) / 2;
    }
    return t >> 1 ^ -(t & 1);
  }
  skipLong() {
    let t = this.buf;
    for (; t[this.pos++] & 128; ) ;
  }
  readTags() {
    let t = [], r;
    for (; r = this.readLong(); ) for (r < 0 && (r = -r, this.skipLong()); r--; ) {
      let n = this.readString(), i = this.readString();
      t.push({ name: n, value: i });
    }
    return t;
  }
  readString() {
    let t = this.readLong(), r = this.pos, n = this.buf;
    if (this.pos += t, !(this.pos > n.length)) return this.buf.slice(r, r + t).toString();
  }
};
function dt3(e) {
  let t = new $3();
  return t.writeTags(e), t.toBuffer();
}
function jr3(e) {
  let t = new $3();
  return t.writeTags(e), t.tagsExceedLimit();
}
function Q2(e) {
  return new $3(e).readTags();
}
function I2(e) {
  let t = 0;
  for (let r = e.length - 1; r >= 0; r--) t = t * 256 + e[r];
  return t;
}
function Vt3(e) {
  if (e > (2 ^ 32 - 1)) throw new Error("Short too long");
  let t = [0, 0];
  for (let r = 0; r < t.length; r++) {
    let n = e & 255;
    t[r] = n, e = (e - n) / 256;
  }
  return Uint8Array.from(t);
}
function xt3(e) {
  let t = [0, 0, 0, 0, 0, 0, 0, 0];
  for (let r = 0; r < t.length; r++) {
    let n = e & 255;
    t[r] = n, e = (e - n) / 256;
  }
  return Uint8Array.from(t);
}
var lr3 = C2(pr3(), 1);
var M3 = C2(nt3(), 1);
var tt3 = 4096;
var gr3 = 80;
var _3 = class {
  constructor(t) {
    __publicField(this, "binary");
    __publicField(this, "_id");
    this.binary = t;
  }
  static isDataItem(t) {
    return t.binary !== void 0;
  }
  get signatureType() {
    let t = I2(this.binary.subarray(0, 2));
    if ((B2 == null ? void 0 : B2[t]) !== void 0) return t;
    throw new Error("Unknown signature type: " + t);
  }
  async isValid() {
    return _3.verify(this.binary);
  }
  get id() {
    return (async () => E3.default.encode(await this.rawId))();
  }
  set id(t) {
    this._id = E3.default.toBuffer(t);
  }
  get rawId() {
    return (async () => M3.Buffer.from(await lr3.Crypto.subtle.digest("SHA-256", this.rawSignature)))();
  }
  set rawId(t) {
    this._id = t;
  }
  get rawSignature() {
    return this.binary.subarray(2, 2 + this.signatureLength);
  }
  get signature() {
    return E3.default.encode(this.rawSignature);
  }
  set rawOwner(t) {
    if (t.byteLength != this.ownerLength) throw new Error(`Expected raw owner (pubkey) to be ${this.ownerLength} bytes, got ${t.byteLength} bytes.`);
    this.binary.set(t, 2 + this.signatureLength);
  }
  get rawOwner() {
    return this.binary.subarray(2 + this.signatureLength, 2 + this.signatureLength + this.ownerLength);
  }
  get signatureLength() {
    return P3[this.signatureType].sigLength;
  }
  get owner() {
    return E3.default.encode(this.rawOwner);
  }
  get ownerLength() {
    return P3[this.signatureType].pubLength;
  }
  get rawTarget() {
    let t = this.getTargetStart();
    return this.binary[t] == 1 ? this.binary.subarray(t + 1, t + 33) : M3.Buffer.alloc(0);
  }
  get target() {
    return E3.default.encode(this.rawTarget);
  }
  get rawAnchor() {
    let t = this.getAnchorStart();
    return this.binary[t] == 1 ? this.binary.subarray(t + 1, t + 33) : M3.Buffer.alloc(0);
  }
  get anchor() {
    return this.rawAnchor.toString();
  }
  get rawTags() {
    let t = this.getTagsStart(), r = I2(this.binary.subarray(t + 8, t + 16));
    return this.binary.subarray(t + 16, t + 16 + r);
  }
  get tags() {
    let t = this.getTagsStart();
    if (I2(this.binary.subarray(t, t + 8)) == 0) return [];
    let n = I2(this.binary.subarray(t + 8, t + 16));
    return Q2(M3.Buffer.from(this.binary.subarray(t + 16, t + 16 + n)));
  }
  get tagsB64Url() {
    return this.tags.map((r) => ({ name: E3.default.encode(r.name), value: E3.default.encode(r.value) }));
  }
  getStartOfData() {
    let t = this.getTagsStart(), r = this.binary.subarray(t + 8, t + 16), n = I2(r);
    return t + 16 + n;
  }
  get rawData() {
    let t = this.getTagsStart(), r = this.binary.subarray(t + 8, t + 16), n = I2(r), i = t + 16 + n;
    return this.binary.subarray(i, this.binary.length);
  }
  get data() {
    return E3.default.encode(this.rawData);
  }
  getRaw() {
    return this.binary;
  }
  async sign(t) {
    return this._id = await Wt3(this, t), this.rawId;
  }
  async setSignature(t) {
    this.binary.set(t, 2), this._id = M3.Buffer.from(await x3().hash(t));
  }
  isSigned() {
    var _a7, _b2;
    return ((_b2 = (_a7 = this._id) == null ? void 0 : _a7.length) != null ? _b2 : 0) > 0;
  }
  toJSON() {
    return { signature: this.signature, owner: this.owner, target: this.target, tags: this.tags.map((t) => ({ name: E3.default.encode(t.name), value: E3.default.encode(t.value) })), data: this.data };
  }
  static async verify(t) {
    if (t.byteLength < gr3) return false;
    let r = new _3(t), n = r.signatureType, i = r.getTagsStart(), o = I2(t.subarray(i, i + 8)), s = t.subarray(i + 8, i + 16), u = I2(s);
    if (u > tt3) return false;
    if (o > 0) try {
      if (Q2(M3.Buffer.from(t.subarray(i + 16, i + 16 + u))).length !== o) return false;
    } catch (e) {
      return false;
    }
    let h = wt3[n], p2 = await v2(r);
    return await h.verify(r.rawOwner, p2, r.rawSignature);
  }
  async getSignatureData() {
    return v2(this);
  }
  getTagsStart() {
    let t = this.getTargetStart(), r = this.binary[t] == 1, n = t + (r ? 33 : 1), i = this.binary[n] == 1;
    return n += i ? 33 : 1, n;
  }
  getTargetStart() {
    return 2 + this.signatureLength + this.ownerLength;
  }
  getAnchorStart() {
    let t = this.getTargetStart() + 1, r = this.binary[this.getTargetStart()] == 1;
    return t += r ? 32 : 0, t;
  }
};
var yr3 = C2(z4(), 1);
function ge3(e, t, r) {
  var _a7, _b2, _c3, _d2, _e3, _f2, _g2;
  let n = t.publicKey, i = (r == null ? void 0 : r.target) ? yr3.default.toBuffer(r.target) : null, o = 1 + ((_a7 = i == null ? void 0 : i.byteLength) != null ? _a7 : 0), s = (r == null ? void 0 : r.anchor) ? Buffer.from(r.anchor) : null, u = 1 + ((_b2 = s == null ? void 0 : s.byteLength) != null ? _b2 : 0), h = ((_d2 = (_c3 = r == null ? void 0 : r.tags) == null ? void 0 : _c3.length) != null ? _d2 : 0) > 0 ? dt3(r.tags) : null, p2 = 16 + (h ? h.byteLength : 0), f2 = Buffer.from(e), c2 = f2.byteLength, U2 = 2 + t.signatureLength + t.ownerLength + o + u + p2 + c2, l = Buffer.alloc(U2);
  if (l.set(Vt3(t.signatureType), 0), l.set(new Uint8Array(t.signatureLength).fill(0), 2), n.byteLength !== t.ownerLength) throw new Error(`Owner must be ${t.ownerLength} bytes, but was incorrectly ${n.byteLength}`);
  l.set(n, 2 + t.signatureLength);
  let R2 = 2 + t.signatureLength + t.ownerLength;
  if (l[R2] = i ? 1 : 0, i) {
    if (i.byteLength !== 32) throw new Error(`Target must be 32 bytes but was incorrectly ${i.byteLength}`);
    l.set(i, R2 + 1);
  }
  let G2 = R2 + o, Y2 = G2 + 1;
  if (l[G2] = s ? 1 : 0, s) {
    if (Y2 += s.byteLength, s.byteLength !== 32) throw new Error("Anchor must be 32 bytes");
    l.set(s, G2 + 1);
  }
  l.set(xt3((_f2 = (_e3 = r == null ? void 0 : r.tags) == null ? void 0 : _e3.length) != null ? _f2 : 0), Y2);
  let wr2 = xt3((_g2 = h == null ? void 0 : h.byteLength) != null ? _g2 : 0);
  l.set(wr2, Y2 + 8), h && l.set(h, Y2 + 16);
  let dr2 = Y2 + p2;
  return l.set(f2, dr2), new _3(l);
}
var _t3 = { ...Lt3 };
var _a6;
(_a6 = globalThis.arbundles) != null ? _a6 : globalThis.arbundles = _t3;
var wn3 = _t3;
var dn3 = _t3;

// src/managers/aoManager.ts
var import_ar_gql = __toESM(require_dist());
var { createData, ArweaveSigner } = bundle_exports2;
function createDataItemSigner3(wallet) {
  const signer = async ({
    data,
    tags,
    target,
    anchor
  }) => {
    const signer2 = new ArweaveSigner(wallet);
    const dataItem = createData(data, signer2, { tags, target, anchor });
    return dataItem.sign(signer2).then(async () => ({
      id: await dataItem.id,
      raw: dataItem.getRaw()
    }));
  };
  return signer;
}
var AOManager = class {
  constructor(plugin) {
    this.processId = null;
    this.initialized = false;
    this.plugin = plugin;
    this.argql = (0, import_ar_gql.arGql)();
  }
  async initialize(wallet) {
    if (wallet) {
      this.signer = createDataItemSigner3(wallet);
      this.initialized = true;
      await this.ensureProcessExists();
      await this.updateHandlers();
    } else {
      this.signer = null;
      this.initialized = false;
      this.processId = null;
    }
  }
  async ensureProcessExists() {
    const customProcessId = this.plugin.settings.customProcessId;
    if (customProcessId) {
      this.processId = customProcessId;
      console.log(`Using custom process ID: ${this.processId}`);
    } else {
      const existingProcess = await this.getExistingProcess();
      if (existingProcess) {
        this.processId = existingProcess;
      } else {
        this.processId = await this.spawnNewProcess();
      }
    }
    console.log(`Using process ID: ${this.processId}`);
  }
  async getExistingProcess() {
    var _a7, _b2;
    try {
      const query = `
        query($owner: String!) {
          transactions(
            owners: [$owner],
            tags: [
              { name: "App-Name", values: ["ArweaveSync"] },
              { name: "Type", values: ["Process"] }
            ],
            sort: HEIGHT_ASC
          ) {
            edges {
              node {
                id
              }
            }
          }
        }
      `;
      const variables = {
        owner: this.plugin.getWalletAddress()
      };
      const result2 = await this.argql.run(query, variables);
      const edges = (_b2 = (_a7 = result2.data) == null ? void 0 : _a7.transactions) == null ? void 0 : _b2.edges;
      if (edges && edges.length > 0) {
        return edges[0].node.id;
      }
    } catch (error) {
      console.error("Error querying for existing process:", error);
    }
    return null;
  }
  async spawnNewProcess() {
    try {
      const processId = await spawn({
        module: "ffvkmPM1jW71hFlBpVbaIapBa_Wl6UIwfdTkDNqsKNw",
        scheduler: "_GQ33BkPtZrqxA84vM8Zk-N2aO0toNNu_C-l-rawrBA",
        signer: this.signer,
        tags: [
          { name: "App-Name", value: "ArweaveSync" },
          { name: "Type", value: "Process" }
        ],
        data: "Spawning ArweaveSync process..."
      });
      console.log("New process spawned with ID:", processId);
      return processId;
    } catch (error) {
      console.error("Error spawning new process:", error);
      throw error;
    }
  }
  isInitialized() {
    return this.initialized;
  }
  async sendMessage(action, data = {}) {
    var _a7, _b2;
    if (!this.signer || !this.processId) {
      throw new Error("AOManager not initialized");
    }
    const messageId = await message({
      process: this.processId,
      tags: [{ name: "Action", value: action }],
      signer: this.signer,
      data
    });
    const messageResult = await result({
      process: this.processId,
      message: messageId
    });
    if (messageResult.Error) throw new Error(messageResult.Error);
    return (_b2 = (_a7 = messageResult.Messages) == null ? void 0 : _a7[0]) == null ? void 0 : _b2.Data;
  }
  async dryRun(action, data = {}) {
    var _a7, _b2;
    if (!this.signer || !this.processId) {
      throw new Error("AOManager not initialized");
    }
    const result2 = await dryrun({
      process: this.processId,
      tags: [{ name: "Action", value: action }],
      signer: this.signer,
      data: JSON.stringify(data)
    });
    if (result2.Error) throw new Error(result2.Error);
    return (_b2 = (_a7 = result2.Messages) == null ? void 0 : _a7[0]) == null ? void 0 : _b2.Data;
  }
  encryptUploadConfig(uploadConfig, password) {
    const jsonString = JSON.stringify(uploadConfig);
    return encrypt(jsonString, password, false);
  }
  decryptUploadConfig(encryptedData, password) {
    const decryptedData = decrypt(encryptedData, password);
    if (typeof decryptedData !== "string") {
      throw new Error("Decrypted data is not a string");
    }
    return JSON.parse(decryptedData);
  }
  async updateUploadConfig(uploadConfig) {
    const encryptedConfig = this.encryptUploadConfig(
      uploadConfig,
      this.plugin.settings.encryptionPassword
    );
    await this.sendMessage("UpdateEncryptedUploadConfig", encryptedConfig);
    await this.plugin.vaultSyncManager.updateRemoteConfig();
    this.plugin.updateSyncUI();
  }
  async getUploadConfig() {
    try {
      const encryptedConfig = await this.dryRun("GetEncryptedUploadConfig");
      if (encryptedConfig) {
        return this.decryptUploadConfig(
          encryptedConfig,
          this.plugin.settings.encryptionPassword
        );
      }
    } catch (error) {
      console.error("Error fetching remote upload config:", error);
    }
    return null;
  }
  async getState() {
    const result2 = await this.dryRun("GetState");
    return result2 ? JSON.parse(result2) : null;
  }
  async updateHandlers() {
    if (!this.processId || !this.signer) {
      throw new Error("Process ID or signer not set");
    }
    try {
      console.log("Updating handlers...");
      const handlersCode = AO_PROCESS_CODE;
      const evalMessageId = await message({
        process: this.processId,
        tags: [{ name: "Action", value: "Eval" }],
        data: handlersCode,
        signer: this.signer
      });
      const { Error: Error2 } = await result({
        process: this.processId,
        message: evalMessageId
      });
      if (Error2) {
        console.error("Error updating handlers:", Error2);
      } else {
        console.log("Handlers updated successfully");
      }
    } catch (error) {
      console.error("Error updating handlers:", error);
      throw error;
    }
  }
};
var AO_PROCESS_CODE = `
  local json = require("json")

  -- Initialize state
  State = State or {}
  State.encryptedUploadConfig = State.encryptedUploadConfig or ""
  State.encryptedRenameTracker = State.encryptedRenameTracker or ""

  -- Handler for updating the encrypted upload config
  Handlers.add(
      "UpdateEncryptedUploadConfig",
      Handlers.utils.hasMatchingTag("Action", "UpdateEncryptedUploadConfig"),
      function(msg)
          local encryptedData = msg.Data
          if encryptedData and encryptedData ~= "" then
              State.encryptedUploadConfig = encryptedData
              print("Updated encrypted upload config")
              ao.send({
                  Target = msg.From,
                  Action = "UpdateEncryptedUploadConfigResponse",
                  Data = json.encode({ success = true, message = "Encrypted upload config updated" })
              })
          else
              print("Error: Invalid encrypted data")
              ao.send({
                  Target = msg.From,
                  Action = "UpdateEncryptedUploadConfigResponse",
                  Data = json.encode({ success = false, message = "Error: Invalid encrypted data" })
              })
          end
      end
  )

  -- Handler for updating the encrypted rename tracker
  Handlers.add(
      "UpdateEncryptedRenameTracker",
      Handlers.utils.hasMatchingTag("Action", "UpdateEncryptedRenameTracker"),
      function(msg)
          local encryptedData = msg.Data
          if encryptedData and encryptedData ~= "" then
              State.encryptedRenameTracker = encryptedData
              print("Updated encrypted rename tracker")
              ao.send({
                  Target = msg.From,
                  Action = "UpdateEncryptedRenameTrackerResponse",
                  Data = json.encode({ success = true, message = "Encrypted rename tracker updated" })
              })
          else
              print("Error: Invalid encrypted rename tracker data")
              ao.send({
                  Target = msg.From,
                  Action = "UpdateEncryptedRenameTrackerResponse",
                  Data = json.encode({ success = false, message = "Error: Invalid encrypted data" })
              })
          end
      end
  )

  -- Handler for retrieving the encrypted upload config
  Handlers.add(
      "GetEncryptedUploadConfig",
      Handlers.utils.hasMatchingTag("Action", "GetEncryptedUploadConfig"),
      function(msg)
          print("Sending encrypted upload config")
          ao.send({
              Target = msg.From,
              Action = "GetEncryptedUploadConfigResponse",
              Data = State.encryptedUploadConfig
          })
      end
  )

  -- Handler for retrieving the encrypted rename tracker
  Handlers.add(
      "GetEncryptedRenameTracker",
      Handlers.utils.hasMatchingTag("Action", "GetEncryptedRenameTracker"),
      function(msg)
          print("Sending encrypted rename tracker")
          ao.send({
              Target = msg.From,
              Action = "GetEncryptedRenameTrackerResponse",
              Data = State.encryptedRenameTracker
          })
      end
  )

  -- Handler for getting the full state (for debugging purposes)
  Handlers.add(
      "GetState",
      Handlers.utils.hasMatchingTag("Action", "GetState"),
      function(msg)
          print("Sending full state")
          ao.send({
              Target = msg.From,
              Action = "GetStateResponse",
              Data = json.encode(State)
          })
      end
  )
`;

// src/managers/walletManager.ts
var import_obsidian = require("obsidian");
var import_arweave = __toESM(require_web());
var WalletManager = class extends import_obsidian.Events {
  constructor() {
    super();
    this.address = null;
    this.jwk = null;
    this.walletJson = null;
    this.arweave = import_arweave.default.init({});
    this.loadCachedWallet();
  }
  async loadCachedWallet() {
    const cachedAddress = localStorage.getItem("cachedWalletAddress");
    const cachedJWK = localStorage.getItem("cachedJWK");
    if (cachedAddress && cachedJWK) {
      try {
        await this.initializeWallet(cachedJWK);
        console.log("Loaded cached wallet:", this.address);
        this.trigger("wallet-connected", this.getWalletJson());
      } catch (error) {
        console.error("Failed to load cached wallet:", error);
        this.clearCache();
      }
    }
  }
  async initializeWallet(jwkJson) {
    try {
      const jwk = JSON.parse(jwkJson);
      this.jwk = jwk;
      this.walletJson = jwkJson;
      this.address = await this.arweave.wallets.jwkToAddress(jwk);
      this.cacheWalletInfo();
    } catch (error) {
      console.error("Failed to initialize wallet:", error);
      throw error;
    }
  }
  async connect(jwkFile) {
    try {
      const jwkJson = await this._readJWKFile(jwkFile);
      await this.initializeWallet(jwkJson);
      if (this.address) {
        console.log("Wallet connected successfully:", this.address);
        if (!this.isConnected()) {
          this.trigger("wallet-connected", this.getWalletJson());
        }
        return this.address;
      }
      throw new Error("Failed to obtain wallet address");
    } catch (error) {
      console.error("Wallet connection failed:", error);
      throw error;
    }
  }
  async disconnect() {
    try {
      this.clearCache();
      this._resetState();
      console.log("Wallet disconnected successfully");
      this.trigger("wallet-disconnected");
    } catch (error) {
      console.error("Error disconnecting wallet:", error);
      throw error;
    }
  }
  isWalletLoaded() {
    return this.address !== null && this.jwk !== null;
  }
  getAddress() {
    return this.address;
  }
  getJWK() {
    return this.jwk;
  }
  getWalletJson() {
    return this.walletJson;
  }
  isConnected() {
    return this.address !== null && this.jwk !== null;
  }
  async _readJWKFile(jwkFile) {
    return new Promise((resolve, reject3) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        var _a7;
        resolve((_a7 = e.target) == null ? void 0 : _a7.result);
      };
      reader.onerror = (error) => reject3(error);
      reader.readAsText(jwkFile);
    });
  }
  cacheWalletInfo() {
    if (this.address) {
      localStorage.setItem("cachedWalletAddress", this.address);
    }
    if (this.walletJson) {
      localStorage.setItem("cachedJWK", this.walletJson);
    }
  }
  clearCache() {
    localStorage.removeItem("cachedWalletAddress");
    localStorage.removeItem("cachedJWK");
  }
  _resetState() {
    this.address = null;
    this.jwk = null;
    this.walletJson = null;
  }
};
var walletManager;
function initializeWalletManager() {
  walletManager = new WalletManager();
  return walletManager;
}

// src/managers/vaultSyncManager.ts
var import_arweave2 = __toESM(require_web());
var import_obsidian2 = require("obsidian");
var import_crypto_js2 = __toESM(require_crypto_js());
var import_ar_gql2 = __toESM(require_dist());
var import_buffer3 = __toESM(require_buffer2());

// src/utils/path.ts
function join2(...parts) {
  return parts.join("/").replace(/\/+/g, "/");
}
function dirname(path2) {
  return path2.replace(/\/+$/, "").replace(/\/[^\/]*$/, "");
}
function basename(path2) {
  return path2.split("/").pop() || "";
}
function relative(from, to) {
  const fromParts = from.split("/").filter(Boolean);
  const toParts = to.split("/").filter(Boolean);
  let commonLength = 0;
  for (let i = 0; i < Math.min(fromParts.length, toParts.length); i++) {
    if (fromParts[i] !== toParts[i]) break;
    commonLength++;
  }
  const upCount = fromParts.length - commonLength;
  const downParts = toParts.slice(commonLength);
  const relativePath = [...Array(upCount).fill(".."), ...downParts];
  return relativePath.join("/") || ".";
}

// src/managers/vaultSyncManager.ts
var VaultSyncManager = class {
  constructor(plugin, encryptionPassword, remoteUploadConfig, localUploadConfig) {
    this.plugin = plugin;
    this.encryptionPassword = encryptionPassword;
    this.remoteUploadConfig = remoteUploadConfig;
    this.localUploadConfig = localUploadConfig;
    this.vault = plugin.app.vault;
    this.encryptionPassword = encryptionPassword;
    this.remoteUploadConfig = remoteUploadConfig;
    this.localUploadConfig = localUploadConfig;
    this.arweave = import_arweave2.default.init({
      host: "arweave.net",
      port: 443,
      protocol: "https"
    });
    this.argql = (0, import_ar_gql2.arGql)();
  }
  isWalletSet() {
    return walletManager.isConnected();
  }
  async syncFile(file) {
    await this.updateRemoteConfig();
    const { syncState, fileHash } = await this.checkFileSync(file);
    if (syncState === "synced") {
      console.log(`File ${file.path} is already synced.`);
      return;
    }
    switch (syncState) {
      case "new-local":
      case "local-newer":
        console.log(`Exporting local changes for ${file.path}`);
        let newFileInfo = await this.exportFileToArweave(file, fileHash);
        let updatedRemoteConfig = {
          ...this.plugin.settings.remoteUploadConfig,
          [newFileInfo.filePath]: newFileInfo
        };
        await this.plugin.aoManager.updateUploadConfig(updatedRemoteConfig);
        break;
      case "new-remote":
      case "remote-newer":
        console.log(`Importing remote changes for ${file.path}`);
        await this.importFileFromArweave(file.path);
        const remoteFileInfo = this.remoteUploadConfig[file.path];
        if (remoteFileInfo) {
          this.localUploadConfig[file.path] = {
            ...remoteFileInfo
          };
        }
        break;
      default:
        console.warn(`Unexpected sync state for ${file.path}: ${syncState}`);
        return;
    }
    await this.plugin.saveSettings();
    console.log(`File ${file.path} synced successfully.`);
  }
  isWalletConnected() {
    return walletManager.isConnected();
  }
  async importFilesFromArweave(filePaths) {
    const importedFiles = [];
    for (const filePath of filePaths) {
      try {
        await this.importFileFromArweave(filePath);
        importedFiles.push(filePath);
        console.log(`Successfully imported: ${filePath}`);
      } catch (error) {
        console.error(`Failed to import file: ${filePath}`, error);
        new import_obsidian2.Notice(`Failed to import ${filePath}. Error: ${error.message}`);
      }
    }
    return importedFiles;
  }
  async importFileFromArweave(filePath) {
    try {
      const normalizedPath = (0, import_obsidian2.normalizePath)(filePath);
      const remoteFileInfo = this.remoteUploadConfig[filePath];
      if (!remoteFileInfo) {
        throw new Error(`No remote file info found for ${filePath}`);
      }
      await this.remoteRename(normalizedPath, remoteFileInfo);
      const encryptedContent = await this.fetchEncryptedContent(
        remoteFileInfo.txId
      );
      let decryptedContent;
      try {
        decryptedContent = decrypt(encryptedContent, this.encryptionPassword);
      } catch (decryptError) {
        console.error(`Failed to decrypt ${filePath}:`, decryptError);
        await this.handleDecryptionFailure(filePath);
        return;
      }
      const existingFile = this.plugin.app.vault.getAbstractFileByPath(normalizedPath);
      if (existingFile instanceof import_obsidian2.TFile) {
        await this.updateExistingFile(existingFile, decryptedContent);
        console.log(`Updated existing file: ${normalizedPath}`);
      } else if (existingFile instanceof import_obsidian2.TFolder) {
        const uniquePath = this.generateUniqueFilePath(normalizedPath);
        await this.createNewFile(uniquePath, decryptedContent);
        console.log(`Created new file with modified path: ${uniquePath}`);
      } else {
        await this.ensureDirectoryExists(normalizedPath);
        await this.createNewFile(normalizedPath, decryptedContent);
        console.log(`Created new file: ${normalizedPath}`);
      }
      this.plugin.updateLocalConfig(filePath, {
        ...remoteFileInfo,
        filePath: normalizedPath
      });
      await this.plugin.saveSettings();
      console.log(`Imported file: ${normalizedPath}`);
    } catch (error) {
      console.error(`Failed to import file: ${filePath}`, error);
      throw error;
    }
  }
  async createNewFile(path2, content) {
    if (content instanceof ArrayBuffer) {
      await this.plugin.app.vault.createBinary(path2, content);
    } else {
      await this.plugin.app.vault.create(path2, content);
    }
  }
  async updateExistingFile(file, content) {
    const activeLeaf = this.plugin.app.workspace.activeLeaf;
    if ((activeLeaf == null ? void 0 : activeLeaf.view) instanceof import_obsidian2.MarkdownView && activeLeaf.view.file === file) {
      const editor = activeLeaf.view.editor;
      if (typeof content === "string") {
        editor.setValue(content);
      } else {
        new import_obsidian2.Notice(`Binary file ${file.name} has been updated.`);
        await this.plugin.app.vault.modifyBinary(file, content);
      }
    } else {
      if (typeof content === "string") {
        await this.plugin.app.vault.process(file, () => content);
      } else {
        await this.plugin.app.vault.modifyBinary(file, content);
      }
    }
  }
  generateUniqueFilePath(originalPath) {
    let newPath = originalPath;
    let counter = 1;
    while (this.plugin.app.vault.getAbstractFileByPath(newPath)) {
      const dir = dirname(originalPath);
      const name = basename(originalPath).replace(/\.[^/.]+$/, "");
      const ext = basename(originalPath).split(".").pop() || "";
      newPath = (0, import_obsidian2.normalizePath)(
        `${dir}/${name}_${counter}${ext ? "." + ext : ""}`
      );
      counter++;
    }
    return newPath;
  }
  async forcePullFile(file) {
    try {
      const remoteFileInfo = this.remoteUploadConfig[file.path];
      if (!remoteFileInfo) {
        throw new Error(`No remote file info found for ${file.path}`);
      }
      const encryptedContent = await this.fetchEncryptedContent(
        remoteFileInfo.txId
      );
      let decryptedContent;
      try {
        decryptedContent = decrypt(encryptedContent, this.encryptionPassword);
      } catch (decryptError) {
        console.error(`Failed to decrypt ${file.path}:`, decryptError);
        throw new Error(
          `Failed to decrypt ${file.path}. Please check your encryption password.`
        );
      }
      if (import_buffer3.Buffer.isBuffer(decryptedContent)) {
        await this.plugin.app.vault.modifyBinary(file, decryptedContent.buffer);
      } else if (typeof decryptedContent === "string") {
        await this.plugin.app.vault.modify(file, decryptedContent);
      } else {
        throw new Error(`Unexpected decrypted content type for ${file.path}`);
      }
      this.plugin.updateLocalConfig(file.path, remoteFileInfo);
      await this.plugin.saveSettings();
      console.log(`Force pulled file: ${file.path}`);
    } catch (error) {
      console.error(`Failed to force pull file: ${file.path}`, error);
      throw error;
    }
  }
  async handleDecryptionFailure(filePath) {
    console.log(
      `Removing ${filePath} from remote upload config due to decryption failure`
    );
    let updatedRemoteConfig = this.remoteUploadConfig;
    delete updatedRemoteConfig[filePath];
    await this.plugin.aoManager.updateUploadConfig(updatedRemoteConfig);
    new import_obsidian2.Notice(
      `Failed to decrypt ${filePath}. It has been removed from the sync list.`
    );
  }
  async ensureDirectoryExists(filePath) {
    const dir = dirname(filePath);
    if (dir && dir !== ".") {
      const folders = dir.split("/").filter(Boolean);
      let currentPath = "";
      for (const folder of folders) {
        currentPath += (currentPath ? "/" : "") + folder;
        const folderFile = this.plugin.app.vault.getAbstractFileByPath(currentPath);
        if (!folderFile) {
          try {
            await this.plugin.app.vault.createFolder(currentPath);
          } catch (error) {
            if (error.message !== "Folder already exists.") {
              throw error;
            }
          }
        } else if (!(folderFile instanceof import_obsidian2.TFolder)) {
          throw new Error(`${currentPath} exists but is not a folder`);
        }
      }
    }
  }
  async exportFileToArweave(file, fileHash) {
    if (!walletManager.isConnected()) {
      throw new Error(
        "Wallet not connected. Please connect a wallet before uploading."
      );
    }
    const wallet = walletManager.getJWK();
    if (!wallet) {
      throw new Error("Unable to retrieve wallet. Please try reconnecting.");
    }
    const isBinary = this.isBinaryFile(file);
    const content = isBinary ? await this.vault.readBinary(file) : await this.vault.read(file);
    const encryptedContent = encrypt(
      content instanceof ArrayBuffer ? import_buffer3.Buffer.from(content) : content,
      this.encryptionPassword,
      isBinary
    );
    const currentFileInfo = this.localUploadConfig[file.path];
    const previousVersionTxId = currentFileInfo ? currentFileInfo.txId : null;
    const versionNumber = currentFileInfo ? currentFileInfo.versionNumber + 1 : 1;
    const transaction = await this.arweave.createTransaction(
      { data: encryptedContent },
      wallet
    );
    transaction.addTag("Content-Type", "text/markdown");
    transaction.addTag("App-Name", "ArweaveSync");
    transaction.addTag("File-Hash", fileHash);
    transaction.addTag("Previous-Version", previousVersionTxId || "");
    transaction.addTag("Version-Number", versionNumber.toString());
    await this.arweave.transactions.sign(transaction, wallet);
    const response = await this.arweave.transactions.post(transaction);
    if (response.status !== 200) {
      throw new Error(
        `Upload failed with status ${response.status}: ${response.statusText}`
      );
    }
    const newFileInfo = {
      txId: transaction.id,
      timestamp: Date.now(),
      fileHash,
      encrypted: true,
      filePath: file.path,
      previousVersionTxId,
      versionNumber
    };
    this.plugin.updateLocalConfig(file.path, newFileInfo);
    console.log(
      `File ${file.path} exported to Arweave. Transaction ID: ${transaction.id}`
    );
    return newFileInfo;
  }
  async exportFilesToArweave(filePaths) {
    const updatedFiles = [];
    const currentRemoteConfig = await this.plugin.aoManager.getUploadConfig() || {};
    for (const filePath of filePaths) {
      const file = this.vault.getAbstractFileByPath(filePath);
      if (file instanceof import_obsidian2.TFile) {
        const { syncState, fileHash } = await this.checkFileSync(file);
        if (syncState !== "synced") {
          const newFileInfo = await this.exportFileToArweave(file, fileHash);
          updatedFiles.push(newFileInfo);
          this.localUploadConfig[file.path] = newFileInfo;
          currentRemoteConfig[file.path] = newFileInfo;
        }
      }
    }
    if (updatedFiles.length > 0) {
      await this.plugin.aoManager.updateUploadConfig(currentRemoteConfig);
    }
    await this.plugin.saveSettings();
  }
  async updateRemoteConfig() {
    const remoteConfig = await this.plugin.aoManager.getUploadConfig();
    console.log(remoteConfig);
    this.remoteUploadConfig = remoteConfig || {};
    this.plugin.settings.remoteUploadConfig = remoteConfig || {};
    await this.plugin.saveSettings();
  }
  async checkFileSync(file) {
    const currentFileHash = await this.getFileHash(file);
    const remoteFileInfo = this.remoteUploadConfig[file.path];
    const localFileInfo = this.localUploadConfig[file.path];
    let syncState;
    if (!remoteFileInfo && localFileInfo) {
      syncState = "new-local";
    } else if (!localFileInfo && remoteFileInfo) {
      try {
        const encryptedContent = await this.fetchEncryptedContent(
          remoteFileInfo.txId
        );
        decrypt(encryptedContent, this.encryptionPassword);
        syncState = "new-remote";
      } catch (decryptError) {
        console.error(`Failed to decrypt ${file.path}:`, decryptError);
        await this.handleDecryptionFailure(file.path);
        syncState = "decrypt-failed";
      }
    } else if (currentFileHash !== (remoteFileInfo == null ? void 0 : remoteFileInfo.fileHash)) {
      if (remoteFileInfo && remoteFileInfo.timestamp > file.stat.mtime) {
        syncState = "remote-newer";
      } else {
        syncState = "local-newer";
      }
    } else {
      syncState = "synced";
    }
    return { syncState, fileHash: currentFileHash };
  }
  async getFileHash(file) {
    const isBinary = this.isBinaryFile(file);
    const content = isBinary ? await this.plugin.app.vault.readBinary(file) : await this.plugin.app.vault.read(file);
    if (isBinary) {
      return import_crypto_js2.default.SHA256(
        import_crypto_js2.default.lib.WordArray.create(content)
      ).toString();
    } else {
      return import_crypto_js2.default.SHA256(content).toString();
    }
  }
  async fetchEncryptedContent(txId, maxRetries = 3) {
    for (let attempt = 0; attempt < maxRetries; attempt++) {
      try {
        const transaction = await this.arweave.transactions.getData(txId, {
          decode: true,
          string: true
        });
        return transaction;
      } catch (error) {
        console.warn(
          `Attempt ${attempt + 1} failed to fetch content for txId ${txId}:`,
          error
        );
        if (attempt === maxRetries - 1) {
          throw new Error(
            `Failed to fetch content for txId ${txId} after ${maxRetries} attempts.`
          );
        }
        await new Promise(
          (resolve) => setTimeout(resolve, 1e3 * (attempt + 1))
        );
      }
    }
    throw new Error("Unexpected error in fetchEncryptedContent");
  }
  async fetchPreviousVersion(filePath, n) {
    const query = `
      query($id: ID!) {
        transaction(id: $id) {
          id
          tags {
            name
            value
          }
          block {
            height
            timestamp
          }
        }
      }
    `;
    try {
      let currentTxId = this.getCurrentTransactionId(filePath);
      if (!currentTxId) {
        console.error(`No transaction ID found for file: ${filePath}`);
        return null;
      }
      for (let i = 0; i < n; i++) {
        if (!currentTxId) {
          return null;
        }
        const variables = { id: currentTxId };
        const results2 = await this.argql.run(query, variables);
        const transaction = results2.data.transaction;
        if (!transaction) {
          return null;
        }
        const previousVersionTag = transaction.tags.find(
          (tag) => tag.name === "Previous-Version"
        );
        currentTxId = previousVersionTag ? previousVersionTag.value : null;
        if (i === n - 1) {
          const data = await this.plugin.getArweave().transactions.getData(transaction.id, {
            decode: true,
            string: true
          });
          const content = typeof data === "string" ? data : new TextDecoder().decode(data);
          const decryptedContent = decrypt(content, this.encryptionPassword);
          return {
            content: typeof decryptedContent === "string" ? decryptedContent : decryptedContent.toString("utf-8"),
            timestamp: transaction.block.timestamp
          };
        }
      }
      return null;
    } catch (error) {
      console.error("Error fetching previous version:", error);
      return null;
    }
  }
  async remoteRename(filePath, remoteFileInfo) {
    if (remoteFileInfo.oldFilePath) {
      const oldFile = this.plugin.app.vault.getAbstractFileByPath(
        remoteFileInfo.oldFilePath
      );
      if (oldFile instanceof import_obsidian2.TFile) {
        try {
          await this.plugin.app.fileManager.renameFile(oldFile, filePath);
          console.log(
            `Renamed file from ${remoteFileInfo.oldFilePath} to ${filePath}`
          );
        } catch (error) {
          console.error(
            `Failed to rename file from ${remoteFileInfo.oldFilePath} to ${filePath}:`,
            error
          );
          throw new Error(`Failed to rename file: ${error.message}`);
        }
      }
    }
  }
  getCurrentTransactionId(filePath) {
    const fileInfo = this.localUploadConfig[filePath];
    return fileInfo ? fileInfo.txId : null;
  }
  isBinaryFile(file) {
    const binaryExtensions = [
      "png",
      "jpg",
      "jpeg",
      "gif",
      "pdf",
      "mp3",
      "mp4",
      "zip"
    ];
    return binaryExtensions.includes(file.extension.toLowerCase());
  }
  async fileExistsCaseInsensitive(filePath) {
    const normalizedPath = (0, import_obsidian2.normalizePath)(filePath.toLowerCase());
    const allFiles = this.plugin.app.vault.getFiles();
    return allFiles.some((file) => file.path.toLowerCase() === normalizedPath);
  }
};

// src/types/index.ts
var DEFAULT_SETTINGS = {
  encryptionPassword: "",
  lastConfigUploadTxId: "",
  customProcessId: "",
  localUploadConfig: {},
  remoteUploadConfig: {},
  autoImportUnsyncedChanges: false
};

// src/components/WalletConnectModal.ts
var import_obsidian3 = require("obsidian");
var WalletConnectModal = class extends import_obsidian3.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Connect Your Wallet" });
    contentEl.createEl("p", {
      text: "Drag and drop your wallet JSON file here to connect."
    });
    this.dragArea = contentEl.createEl("div", { cls: "wallet-drag-area" });
    this.dragArea.setText("Drag & Drop Wallet File Here");
    this.setupDragAndDrop();
  }
  setupDragAndDrop() {
    const preventDefault = (e) => e.preventDefault();
    this.dragArea.addEventListener("dragenter", preventDefault);
    this.dragArea.addEventListener("dragover", preventDefault);
    this.dragArea.addEventListener("dragleave", () => {
      this.dragArea.removeClass("drag-active");
    });
    this.dragArea.addEventListener("dragenter", () => {
      this.dragArea.addClass("drag-active");
    });
    this.dragArea.addEventListener("drop", (e) => {
      var _a7;
      e.preventDefault();
      this.dragArea.removeClass("drag-active");
      const file = (_a7 = e.dataTransfer) == null ? void 0 : _a7.files[0];
      if (file) {
        this.handleFileUpload(file);
      }
    });
    this.dragArea.addEventListener("click", () => {
      const input = createEl("input", {
        attr: { type: "file", accept: ".json" }
      });
      input.onchange = (e) => {
        var _a7;
        const file = (_a7 = e.target.files) == null ? void 0 : _a7[0];
        if (file) {
          this.handleFileUpload(file);
        }
      };
      input.click();
    });
  }
  async handleFileUpload(file) {
    try {
      await walletManager.connect(file);
      this.close();
    } catch (error) {
      console.error("Failed to connect wallet:", error);
      new import_obsidian3.Notice("Failed to connect wallet. Please try again.");
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var import_arweave3 = __toESM(require_web());

// src/settings/settings.ts
var import_obsidian4 = require("obsidian");
var ArweaveSyncSettingTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "ArweaveSync Settings" });
    new import_obsidian4.Setting(containerEl).setName("Encryption Password").setDesc("Set the encryption password for your synced files").addText(
      (text) => text.setPlaceholder("Enter your password").setValue(this.plugin.settings.encryptionPassword).onChange(async (value) => {
        this.plugin.settings.encryptionPassword = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian4.Setting(containerEl).setName("Auto-import Unsynced Changes").setDesc("Automatically import unsynced changes when connecting wallet").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.autoImportUnsyncedChanges).onChange(async (value) => {
        this.plugin.settings.autoImportUnsyncedChanges = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian4.Setting(containerEl).setName("Custom Process ID").setDesc("Optionally provide a custom AO process ID").addText(
      (text) => text.setPlaceholder("Enter custom process ID").setValue(this.plugin.settings.customProcessId).onChange(async (value) => {
        this.plugin.settings.customProcessId = value;
        await this.plugin.saveSettings();
        await this.plugin.reinitializeAOManager();
      })
    );
  }
};

// src/utils/helpers.ts
function debounce(func, wait) {
  let timeout = null;
  return function(...args) {
    const later = () => {
      timeout = null;
      func(...args);
    };
    if (timeout) clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// src/components/SyncSidebar.ts
var import_obsidian5 = require("obsidian");
var SYNC_SIDEBAR_VIEW = "arweave-sync-view";
var SyncSidebar = class extends import_obsidian5.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.currentTab = "export";
    this.files = {
      export: [],
      import: []
    };
    this.filesToSync = {
      export: [],
      import: []
    };
    this.totalExportSize = 0;
    this.totalPrice = "0";
    this.exportFiles = /* @__PURE__ */ new Set();
    this.currentBalance = "0";
    this.newBalance = "0";
    this.plugin = plugin;
    this.totalExportSize = 0;
    this.totalPrice = "0";
    this.exportFiles = /* @__PURE__ */ new Set();
  }
  getViewType() {
    return SYNC_SIDEBAR_VIEW;
  }
  getDisplayText() {
    return "Arweave Sync";
  }
  getIcon() {
    return "wallet";
  }
  isVisible() {
    return this.containerEl.isShown();
  }
  async onOpen() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("arweave-sync-sidebar");
    this.renderTabs();
    this.contentContainer = containerEl.createEl("div", {
      cls: "content-container"
    });
    await this.initializeFiles();
    await this.renderContent();
  }
  async renderContent() {
    const folderState = this.saveFolderState();
    this.contentContainer.empty();
    const scrollableContent = this.contentContainer.createEl("div", {
      cls: "scrollable-content"
    });
    this.updateNoFilesMessageVisibility();
    if (!this.isEmptyContent()) {
      this.renderRootFolders(scrollableContent);
    }
    this.renderSubmitButton();
    this.applyFolderState(folderState);
  }
  renderRootFolders(container) {
    const filesToExportFolder = this.createRootFolder(
      "Files to Export",
      this.filesToSync[this.currentTab]
    );
    const unsyncedFilesFolder = this.createRootFolder(
      "Unsynced Files",
      this.files[this.currentTab]
    );
    container.appendChild(unsyncedFilesFolder);
    container.appendChild(filesToExportFolder);
  }
  createRootFolder(name, files) {
    const folderEl = createEl("div", { cls: "root-folder" });
    const folderHeader = folderEl.createEl("div", {
      cls: "folder-header nav-folder-title is-clickable"
    });
    const toggleEl = folderHeader.createEl("div", {
      cls: "tree-item-icon collapse-icon nav-folder-collapse-indicator"
    });
    const chevronSvg = this.createChevronSvg();
    toggleEl.appendChild(chevronSvg);
    folderHeader.createEl("div", {
      text: name,
      cls: "tree-item-inner nav-folder-title-content"
    });
    const contentEl = folderEl.createEl("div", { cls: "nav-folder-children" });
    this.renderFileNodes(files, contentEl, name === "Unsynced Files", 0);
    let isExpanded = true;
    folderHeader.addEventListener("click", () => {
      isExpanded = !isExpanded;
      contentEl.style.display = isExpanded ? "block" : "none";
      this.updateChevronRotation(chevronSvg, isExpanded);
    });
    return folderEl;
  }
  renderTabs() {
    const tabContainer = this.containerEl.createEl("div", {
      cls: "tab-container"
    });
    const tabs = ["export", "import"];
    tabs.forEach((tab) => {
      const tabEl = tabContainer.createEl("div", {
        cls: `tab ${this.currentTab === tab ? "active" : ""}`,
        text: `${tab.charAt(0).toUpperCase() + tab.slice(1)} Files`
      });
      tabEl.addEventListener("click", () => this.switchTab(tab));
    });
  }
  async switchTab(tab) {
    if (this.currentTab !== tab) {
      if (this.currentTab === "export") {
        this.totalExportSize = 0;
        this.totalPrice = "0";
        this.exportFiles.clear();
      }
      this.currentTab = tab;
      this.updateTabStyles();
      this.updateNoFilesMessageVisibility();
      await this.renderContent();
      this.refresh();
    }
  }
  updateTabStyles() {
    this.containerEl.querySelectorAll(".tab").forEach((tabEl) => {
      var _a7;
      if (tabEl instanceof HTMLElement) {
        const isActive = (_a7 = tabEl.textContent) == null ? void 0 : _a7.toLowerCase().startsWith(this.currentTab);
        tabEl.classList.toggle("active", isActive);
      }
    });
  }
  async initializeFiles() {
    this.files.export = await this.getLocalFilesForExport();
    this.files.import = await this.getRemoteFilesForImport();
    this.filesToSync = { export: [], import: [] };
  }
  isEmptyContent() {
    return this.files[this.currentTab].length === 0 && this.filesToSync[this.currentTab].length === 0;
  }
  handleFileRename(file, oldPath) {
    this.files[this.currentTab] = this.removeFileFromTree(
      this.files[this.currentTab],
      oldPath
    );
    this.filesToSync[this.currentTab] = this.removeFileFromTree(
      this.filesToSync[this.currentTab],
      oldPath
    );
    this.renderContent();
  }
  renderFileColumns() {
    const fileColumns = this.contentContainer.createEl("div", {
      cls: "file-columns"
    });
    this.renderFileColumn(
      fileColumns,
      this.files[this.currentTab],
      `Unsynced Files`,
      true
    );
    this.renderFileColumn(
      fileColumns,
      this.filesToSync[this.currentTab],
      `Files to ${this.currentTab === "export" ? "Export" : "Import"}`,
      false
    );
  }
  renderSubmitButton() {
    const submitContainer = this.contentContainer.createEl("div", {
      cls: "submit-changes-container"
    });
    const submitButton = submitContainer.createEl("button", {
      text: `${this.currentTab === "export" ? "Export" : "Import"}`,
      cls: "mod-cta submit-changes",
      attr: {
        "data-state": "ready"
      }
    });
    submitButton.addEventListener("click", () => this.submitChanges());
  }
  renderFileColumn(parentEl, files, title, isSource) {
    const columnEl = parentEl.createEl("div", { cls: "file-column" });
    columnEl.createEl("h3", { text: title });
    const treeContainer = columnEl.createEl("div", {
      cls: "file-tree-container"
    });
    const treeEl = treeContainer.createEl("div", { cls: "file-tree" });
    this.renderFileNodes(files, treeEl, isSource, 0);
  }
  renderFileNodes(nodes, parentEl, isSource, depth) {
    nodes.filter((node) => {
      if (this.currentTab === "export" && node.syncState === "synced") {
        return false;
      }
      return !node.isFolder || node.children.length > 0;
    }).sort((a, b2) => {
      if (a.isFolder === b2.isFolder) return a.name.localeCompare(b2.name);
      return a.isFolder ? -1 : 1;
    }).forEach((node) => {
      const itemEl = parentEl.createEl("div", {
        cls: `tree-item ${node.isFolder ? "nav-folder" : "nav-file"}`
      });
      const contentEl = itemEl.createEl("div", {
        cls: `tree-item-self is-clickable ${node.isFolder ? "nav-folder-title mod-collapsible" : "nav-file-title"}`,
        attr: { "data-path": node.path }
      });
      if (node.isFolder) {
        this.renderFolderNode(node, contentEl, itemEl, isSource, depth);
      } else {
        this.renderFileNode(node, contentEl, isSource);
      }
    });
  }
  setNodeStyles(contentEl, depth) {
    contentEl.style.setProperty(
      "margin-inline-start",
      `${depth * 13 - 13}px !important`
    );
    contentEl.style.setProperty(
      "padding-inline-start",
      `${24 + depth * 13}px !important`
    );
  }
  renderFolderNode(node, contentEl, itemEl, isSource, depth) {
    const toggleEl = contentEl.createEl("div", {
      cls: "tree-item-icon collapse-icon nav-folder-collapse-indicator"
    });
    const chevronSvg = this.createChevronSvg();
    toggleEl.appendChild(chevronSvg);
    this.updateChevronRotation(chevronSvg, node.expanded);
    contentEl.createEl("div", {
      cls: "tree-item-inner nav-folder-title-content",
      text: node.name
    });
    const childrenEl = itemEl.createEl("div", {
      cls: "tree-item-children nav-folder-children"
    });
    childrenEl.style.display = node.expanded ? "block" : "none";
    const toggleFolder = (e) => {
      e.preventDefault();
      e.stopPropagation();
      node.expanded = !node.expanded;
      this.updateChevronRotation(chevronSvg, node.expanded);
      childrenEl.style.display = node.expanded ? "block" : "none";
      if (node.expanded && childrenEl.childElementCount === 0) {
        this.renderFileNodes(node.children, childrenEl, isSource, depth + 1);
      }
    };
    let pressTimer;
    let longPressTriggered = false;
    let startX;
    let startY;
    const startPress = (e) => {
      startX = e instanceof MouseEvent ? e.clientX : e.touches[0].clientX;
      startY = e instanceof MouseEvent ? e.clientY : e.touches[0].clientY;
      pressTimer = window.setTimeout(() => {
        longPressTriggered = true;
        this.toggleEntireFolder(node, isSource);
        if (navigator.vibrate) {
          navigator.vibrate(50);
        }
      }, 500);
    };
    const endPress = (e) => {
      const endX = e instanceof MouseEvent ? e.clientX : e.changedTouches[0].clientX;
      const endY = e instanceof MouseEvent ? e.clientY : e.changedTouches[0].clientY;
      const distance = Math.sqrt(
        Math.pow(endX - startX, 2) + Math.pow(endY - startY, 2)
      );
      clearTimeout(pressTimer);
      if (!longPressTriggered && distance < 5) {
        toggleFolder(e);
      }
      longPressTriggered = false;
    };
    const cancelPress = () => {
      clearTimeout(pressTimer);
      longPressTriggered = false;
    };
    contentEl.addEventListener("mousedown", startPress);
    contentEl.addEventListener("touchstart", startPress, { passive: true });
    contentEl.addEventListener("mouseup", endPress);
    contentEl.addEventListener("touchend", endPress);
    contentEl.addEventListener("mouseleave", cancelPress);
    contentEl.addEventListener("touchcancel", cancelPress);
    if (node.expanded) {
      this.renderFileNodes(node.children, childrenEl, isSource, depth + 1);
    }
  }
  createArrowSvg(direction) {
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
    svg.setAttribute("width", "24");
    svg.setAttribute("height", "24");
    svg.setAttribute("viewBox", "0 0 24 24");
    svg.setAttribute("fill", "none");
    svg.setAttribute("stroke", "currentColor");
    svg.setAttribute("stroke-width", "2");
    svg.setAttribute("stroke-linecap", "round");
    svg.setAttribute("stroke-linejoin", "round");
    svg.classList.add("svg-icon", "toggle-arrow", direction);
    const path2 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path2.setAttribute(
      "d",
      direction === "down" ? "M7 10l5 5 5-5" : "M7 15l5-5 5 5"
    );
    svg.appendChild(path2);
    return svg;
  }
  getFolderIconSvg() {
    return `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-folder"><path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path></svg>`;
  }
  toggleEntireFolder(folder, isSource) {
    const allFiles = this.getAllFilesInFolder(folder);
    allFiles.forEach((file) => this.toggleFileSelection(file, isSource));
    this.renderContent();
  }
  getAllFilesInFolder(folder) {
    let files = [];
    folder.children.forEach((child) => {
      if (child.isFolder) {
        files = files.concat(this.getAllFilesInFolder(child));
      } else {
        files.push(child);
      }
    });
    return files;
  }
  async renderFileNode(node, contentEl, isSource) {
    contentEl.empty();
    contentEl.addClass("tree-item-self", "is-clickable", "nav-file-title");
    if (node.syncState) {
      contentEl.addClass(node.syncState);
    }
    const innerEl = contentEl.createEl("div", {
      cls: "tree-item-inner nav-file-title-content",
      text: this.displayFileName(node.name)
    });
    if (node.fileInfo) {
      this.setFileNodeAttributes(contentEl, node);
    }
    contentEl.addEventListener(
      "click",
      () => this.toggleFileSelection(node, isSource)
    );
  }
  async setFileNodeAttributes(contentEl, node) {
    if (node.fileInfo) {
      contentEl.setAttribute(
        "title",
        `Last modified: ${new Date(node.fileInfo.timestamp).toLocaleString()}
Version: ${node.fileInfo.versionNumber}`
      );
    }
    if (node.path) {
      const file = this.plugin.app.vault.getAbstractFileByPath(
        node.path
      );
      if (file instanceof import_obsidian5.TFile) {
        const syncState = await this.plugin.vaultSyncManager.checkFileSync(file);
        contentEl.addClass(syncState.syncState);
        console.log(
          `File name: ${file.name}, Sync state: ${syncState.syncState}`
        );
      }
    }
  }
  createChevronSvg() {
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
    svg.setAttribute("width", "24");
    svg.setAttribute("height", "24");
    svg.setAttribute("viewBox", "0 0 24 24");
    svg.setAttribute("fill", "none");
    svg.setAttribute("stroke", "currentColor");
    svg.setAttribute("stroke-width", "2");
    svg.setAttribute("stroke-linecap", "round");
    svg.setAttribute("stroke-linejoin", "round");
    svg.classList.add("svg-icon", "right-triangle");
    const path2 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path2.setAttribute("d", "M3 8L12 17L21 8");
    svg.appendChild(path2);
    return svg;
  }
  updateChevronRotation(chevronSvg, expanded) {
    chevronSvg.style.transform = expanded ? "" : "rotate(-90deg)";
  }
  displayFileName(fileName) {
    return fileName.endsWith(".md") ? fileName.slice(0, -3) : fileName;
  }
  updateNoFilesMessageVisibility() {
    const isEmpty = this.isEmptyContent();
    let messageContainer = this.contentContainer.querySelector(
      ".no-files-message-container"
    );
    if (!messageContainer) {
      messageContainer = this.contentContainer.createEl("div", {
        cls: "no-files-message-container"
      });
      const iconEl = messageContainer.createEl("div", {
        cls: "no-files-icon",
        attr: { "aria-hidden": "true" }
      });
      iconEl.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-edit"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.12 2.12 0 0 1 3 3L12 15l-4 1 1-4Z"></path></svg>`;
      messageContainer.createEl("div", {
        cls: "no-files-text",
        text: `No notes to ${this.currentTab === "export" ? "export" : "import"}`
      });
      messageContainer.createEl("div", {
        cls: "no-files-subtext",
        text: "Your notes will appear here when they're ready to sync."
      });
    }
    if (messageContainer instanceof HTMLElement) {
      messageContainer.style.display = isEmpty ? "flex" : "none";
    }
  }
  expandParentFolders(filePath, tree) {
    const parts = filePath.split("/");
    let currentPath = "";
    for (let i = 0; i < parts.length - 1; i++) {
      currentPath += (i > 0 ? "/" : "") + parts[i];
      const folder = this.findNodeByPath(tree, currentPath);
      if (folder && folder.isFolder) {
        folder.expanded = true;
      }
    }
  }
  findNodeByPath(nodes, path2) {
    for (const node of nodes) {
      if (node.path === path2) {
        return node;
      }
      if (node.isFolder && path2.startsWith(node.path + "/")) {
        const found = this.findNodeByPath(node.children, path2);
        if (found) return found;
      }
    }
    return void 0;
  }
  toggleFileSelection(file, isSource) {
    const sourceTree = isSource ? this.files : this.filesToSync;
    const targetTree = isSource ? this.filesToSync : this.files;
    sourceTree[this.currentTab] = this.removeFileFromTree(
      sourceTree[this.currentTab],
      file.path
    );
    targetTree[this.currentTab] = this.addFileToTree(
      targetTree[this.currentTab],
      file
    );
    this.expandParentFolders(file.path, targetTree[this.currentTab]);
    this.files[this.currentTab] = this.removeEmptyFolders(
      this.files[this.currentTab]
    );
    this.filesToSync[this.currentTab] = this.removeEmptyFolders(
      this.filesToSync[this.currentTab]
    );
    this.updateNoFilesMessageVisibility();
    this.renderContent();
    if (this.currentTab === "export") {
      const isAddingToExport = isSource;
      console.log(
        `Toggling file selection: ${file.path}, isAddingToExport: ${isAddingToExport}`
      );
      this.updateFileSizeAndPrice(file, isAddingToExport).then(() => {
        this.updatePriceDisplay();
      });
    }
  }
  removeFileFromTree(tree, path2) {
    return tree.filter((node) => {
      if (node.path === path2) {
        return false;
      }
      if (node.isFolder) {
        node.children = this.removeFileFromTree(node.children, path2);
        return node.children.length > 0 || path2.startsWith(node.path + "/");
      }
      return true;
    });
  }
  addFileToTree(tree, file) {
    if (!file.path) {
      console.error("Path is undefined for file:", file);
      return tree;
    }
    const parts = file.path.split("/");
    let currentLevel = tree;
    for (let i = 0; i < parts.length; i++) {
      const part = parts[i];
      if (!part) continue;
      let existingNode = currentLevel.find((node) => node.name === part);
      if (i === parts.length - 1) {
        if (existingNode) {
          Object.assign(existingNode, file);
        } else {
          currentLevel.push(file);
        }
      } else {
        if (!existingNode) {
          existingNode = {
            name: part,
            path: parts.slice(0, i + 1).join("/"),
            isFolder: true,
            children: [],
            expanded: false
          };
          currentLevel.push(existingNode);
        }
        currentLevel = existingNode.children;
      }
    }
    return tree;
  }
  async submitChanges() {
    var _a7;
    if (!this.plugin.vaultSyncManager.isWalletConnected()) {
      new import_obsidian5.Notice("Please connect a wallet before syncing.");
      return;
    }
    const submitButton = this.contentContainer.querySelector(
      ".submit-changes"
    );
    if (!submitButton || submitButton.getAttribute("data-state") === "submitting") {
      return;
    }
    try {
      submitButton.setAttribute("data-state", "submitting");
      submitButton.disabled = true;
      submitButton.setText(
        `Submitting ${this.currentTab === "export" ? "Export" : "Import"}`
      );
      submitButton.createSpan({ cls: "loading-dots" });
      const filesToSync = this.flattenFileTree(
        this.filesToSync[this.currentTab]
      );
      if (filesToSync.length === 0) {
        new import_obsidian5.Notice("No files selected for sync.");
        return;
      }
      if (this.currentTab === "export") {
        await this.plugin.vaultSyncManager.exportFilesToArweave(filesToSync);
      } else {
        await this.importFiles(filesToSync);
      }
      await this.plugin.vaultSyncManager.updateRemoteConfig();
      await this.initializeFiles();
      await this.renderContent();
      new import_obsidian5.Notice(
        `${this.currentTab === "export" ? "Export" : "Import"} completed successfully.`
      );
    } catch (error) {
      console.error("Error during submission:", error);
      new import_obsidian5.Notice(`Error during ${this.currentTab}: ${error.message}`);
    } finally {
      submitButton.setAttribute("data-state", "ready");
      submitButton.disabled = false;
      submitButton.setText(
        `Submit ${this.currentTab === "export" ? "Export" : "Import"}`
      );
      (_a7 = submitButton.querySelector(".loading-dots")) == null ? void 0 : _a7.remove();
    }
  }
  async importFiles(filePaths) {
    const importedFiles = await this.plugin.vaultSyncManager.importFilesFromArweave(filePaths);
    this.updateAfterImport(importedFiles);
  }
  updateAfterImport(importedFiles) {
    importedFiles.forEach((filePath) => {
      const fileNode = this.removeFileFromTree(
        this.filesToSync.import,
        filePath
      )[0];
      if (fileNode) {
        this.files.import = this.removeFileFromTree(
          this.files.import,
          filePath
        );
        this.files.import = this.addFileToTree(this.files.import, fileNode);
      }
    });
    this.files.import = this.removeEmptyFolders(this.files.import);
    this.filesToSync.import = this.removeEmptyFolders(this.filesToSync.import);
  }
  flattenFileTree(nodes) {
    return nodes.reduce((files, node) => {
      return node.isFolder ? files.concat(this.flattenFileTree(node.children)) : files.concat(node.path);
    }, []);
  }
  async getLocalFilesForExport() {
    const newOrModifiedFiles = [];
    const files = this.plugin.app.vault.getFiles();
    for (const file of files) {
      const { syncState, fileHash } = await this.plugin.vaultSyncManager.checkFileSync(file);
      if (syncState === "new-local" || syncState === "local-newer") {
        const localFileInfo = this.plugin.settings.localUploadConfig[file.path];
        const fileNode = this.createFileNode(
          file.path,
          {
            txId: (localFileInfo == null ? void 0 : localFileInfo.txId) || "",
            timestamp: file.stat.mtime,
            fileHash,
            encrypted: false,
            filePath: file.path,
            previousVersionTxId: (localFileInfo == null ? void 0 : localFileInfo.previousVersionTxId) || null,
            versionNumber: ((localFileInfo == null ? void 0 : localFileInfo.versionNumber) || 0) + 1
          },
          syncState
        );
        newOrModifiedFiles.push(fileNode);
      }
    }
    return this.buildFileTree(newOrModifiedFiles);
  }
  async getRemoteFilesForImport() {
    const remoteConfig = this.plugin.settings.remoteUploadConfig;
    const newOrModifiedFiles = [];
    for (const [filePath, remoteFileInfo] of Object.entries(remoteConfig)) {
      const file = this.plugin.app.vault.getAbstractFileByPath(filePath);
      let syncState;
      if (!file) {
        syncState = "new-remote";
      } else if (file instanceof import_obsidian5.TFile) {
        const result2 = await this.plugin.vaultSyncManager.checkFileSync(file);
        syncState = result2.syncState;
      } else {
        continue;
      }
      if (syncState !== "synced" && syncState !== "new-local" && syncState !== "local-newer" && syncState !== "decrypt-failed") {
        const fileNode = this.createFileNode(
          filePath,
          remoteFileInfo,
          syncState
        );
        newOrModifiedFiles.push(fileNode);
      }
    }
    const fileTree = this.buildFileTree(newOrModifiedFiles);
    return fileTree;
  }
  createFileNode(filePath, fileInfo, syncState) {
    return {
      name: filePath.split("/").pop() || "",
      path: filePath,
      fileInfo,
      isFolder: false,
      children: [],
      expanded: false,
      syncState
    };
  }
  buildFileTree(files) {
    const root = [];
    const pathMap = {};
    files.forEach((file) => {
      const parts = file.path.split("/");
      let currentPath = "";
      parts.forEach((part, index) => {
        currentPath += (index > 0 ? "/" : "") + part;
        if (!pathMap[currentPath]) {
          const newNode = {
            name: part,
            path: currentPath,
            isFolder: index < parts.length - 1,
            children: [],
            expanded: false,
            syncState: index === parts.length - 1 ? file.syncState : void 0
          };
          pathMap[currentPath] = newNode;
          if (index === 0) {
            root.push(newNode);
          } else {
            const parentPath = parts.slice(0, index).join("/");
            pathMap[parentPath].children.push(newNode);
          }
        }
      });
      if (file.fileInfo) {
        pathMap[file.path].fileInfo = file.fileInfo;
      }
    });
    return root;
  }
  async updateFileStatus(file) {
    const folderState = this.saveFolderState();
    try {
      const { syncState } = await this.plugin.vaultSyncManager.checkFileSync(file);
      if (syncState === "synced") {
        this.removeFileFromSidebar(file.path);
      } else {
        const fileNode = this.findFileNode(
          this.files[this.currentTab],
          file.path
        );
        if (fileNode) {
          fileNode.syncState = syncState;
          this.updateFileNodeInDOM(fileNode);
        } else {
          await this.initializeFiles();
          await this.renderContent();
        }
      }
    } catch (error) {
      console.error("Error getting file sync state:", error);
      this.removeFileFromSidebar(file.path);
    }
    this.applyFolderState(folderState);
  }
  removeFileFromSidebar(filePath) {
    const folderState = this.saveFolderState();
    this.files.export = this.removeFileFromTree(this.files.export, filePath);
    this.files.import = this.removeFileFromTree(this.files.import, filePath);
    this.filesToSync.export = this.removeFileFromTree(
      this.filesToSync.export,
      filePath
    );
    this.filesToSync.import = this.removeFileFromTree(
      this.filesToSync.import,
      filePath
    );
    this.files.export = this.removeEmptyFolders(this.files.export);
    this.files.import = this.removeEmptyFolders(this.files.import);
    this.filesToSync.export = this.removeEmptyFolders(this.filesToSync.export);
    this.filesToSync.import = this.removeEmptyFolders(this.filesToSync.import);
    this.updateNoFilesMessageVisibility();
    this.renderContent();
    this.applyFolderState(folderState);
  }
  removeEmptyFolders(tree) {
    return tree.filter((node) => {
      if (node.isFolder) {
        node.children = this.removeEmptyFolders(node.children);
        return node.children.length > 0;
      }
      return true;
    });
  }
  showNoFilesMessage(show) {
    let messageContainer = this.contentContainer.querySelector(
      ".no-files-message-container"
    );
    if (!messageContainer) {
      messageContainer = this.contentContainer.createEl("div", {
        cls: "no-files-message-container"
      });
      messageContainer.createEl("div", {
        cls: "no-files-icon",
        attr: { "aria-hidden": "true" }
      }).innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>`;
      messageContainer.createEl("div", {
        cls: "no-files-text",
        text: "No files to sync"
      });
      messageContainer.createEl("div", {
        cls: "no-files-subtext",
        text: "Your files will appear here when they're ready to sync."
      });
    }
    if (messageContainer instanceof HTMLElement) {
      messageContainer.style.display = show ? "flex" : "none";
    }
  }
  findFileNode(nodes, path2) {
    for (const node of nodes) {
      if (node.path === path2) {
        return node;
      }
      if (node.isFolder) {
        const found = this.findFileNode(node.children, path2);
        if (found) return found;
      }
    }
    return null;
  }
  updateFileNodeInDOM(fileNode) {
    const fileEl = this.containerEl.querySelector(
      `[data-path="${fileNode.path}"]`
    );
    if (fileEl) {
      fileEl.classList.remove("new-file", "updated-file", "synced");
      if (fileNode.syncState) {
        fileEl.classList.add(fileNode.syncState);
      }
    }
  }
  saveFolderState() {
    const folderState = {};
    this.containerEl.querySelectorAll(".folder-item").forEach((folderEl) => {
      const path2 = folderEl.getAttribute("data-path");
      const isExpanded = folderEl.classList.contains("expanded");
      if (path2) {
        folderState[path2] = isExpanded;
      }
    });
    return folderState;
  }
  applyFolderState(folderState) {
    Object.entries(folderState).forEach(([path2, isExpanded]) => {
      const folderEl = this.containerEl.querySelector(
        `.folder-item[data-path="${path2}"]`
      );
      if (folderEl) {
        const toggleEl = folderEl.querySelector(".folder-toggle");
        const childrenEl = folderEl.querySelector(".folder-contents");
        if (isExpanded) {
          folderEl.classList.add("expanded");
          if (toggleEl instanceof HTMLElement) {
            toggleEl.style.transform = "rotate(90deg)";
          }
          if (childrenEl instanceof HTMLElement) {
            childrenEl.style.display = "block";
          }
        } else {
          folderEl.classList.remove("expanded");
          if (toggleEl instanceof HTMLElement) {
            toggleEl.style.transform = "rotate(0deg)";
          }
          if (childrenEl instanceof HTMLElement) {
            childrenEl.style.display = "none";
          }
        }
      }
    });
  }
  async refresh() {
    await this.initializeFiles();
    this.renderContent();
  }
  async onClose() {
  }
  async updateFileSizeAndPrice(file, isAddingToExport) {
    if (!file.isFolder) {
      const filePath = file.path;
      const abstractFile = this.plugin.app.vault.getAbstractFileByPath(filePath);
      if (!(abstractFile instanceof import_obsidian5.TFile)) {
        console.error(`File not found: ${filePath}`);
        return;
      }
      const fileSize = abstractFile.stat.size;
      if (isAddingToExport) {
        if (!this.exportFiles.has(filePath)) {
          this.totalExportSize += fileSize;
          this.exportFiles.add(filePath);
        }
      } else {
        if (this.exportFiles.has(filePath)) {
          this.totalExportSize = Math.max(0, this.totalExportSize - fileSize);
          this.exportFiles.delete(filePath);
        }
      }
      await this.updateTotalPrice();
    } else {
    }
  }
  async updateTotalPrice() {
    var _a7;
    if (this.totalExportSize > 0) {
      try {
        const url = `https://arweave.net/price/${this.totalExportSize}`;
        const response = await (0, import_obsidian5.request)({
          url,
          method: "GET"
        });
        const winston = parseInt(response);
        const ar2 = winston / 1e12;
        const precision = 2;
        this.totalPrice = ar2.toPrecision(precision);
        const address = this.plugin.getWalletAddress();
        if (address) {
          const balanceWinston = await this.plugin.getArweave().wallets.getBalance(address);
          const balanceAR = parseInt(balanceWinston) / 1e12;
          const decimalPlaces = ((_a7 = this.totalPrice.split(".")[1]) == null ? void 0 : _a7.length) || 0;
          this.currentBalance = balanceAR.toFixed(decimalPlaces);
          this.newBalance = (balanceAR - ar2).toFixed(decimalPlaces);
        }
      } catch (error) {
        console.error("Error fetching Arweave price or balance:", error);
        this.totalPrice = "Error";
        this.currentBalance = "Error";
        this.newBalance = "Error";
      }
    } else {
      this.totalPrice = "0";
      this.newBalance = this.currentBalance;
    }
  }
  updatePriceDisplay() {
    const priceInfoBox = this.contentContainer.querySelector(".price-info-box");
    if (priceInfoBox) {
      const currentBalanceEl = priceInfoBox.querySelector(".balance-display");
      const totalPriceEl = priceInfoBox.querySelector(".total-price-display");
      const newBalanceEl = priceInfoBox.querySelector(".new-balance-display");
      if (currentBalanceEl instanceof HTMLElement) {
        currentBalanceEl.setAttribute(
          "data-value",
          `${this.currentBalance} AR`
        );
      }
      if (totalPriceEl instanceof HTMLElement) {
        totalPriceEl.setAttribute("data-value", `${this.totalPrice} AR`);
      }
      if (newBalanceEl instanceof HTMLElement) {
        newBalanceEl.setAttribute("data-value", `${this.newBalance} AR`);
      }
    }
  }
  removeFile(filePath) {
    this.files.export = this.removeFileFromTree(this.files.export, filePath);
    this.files.import = this.removeFileFromTree(this.files.import, filePath);
    this.filesToSync.export = this.removeFileFromTree(
      this.filesToSync.export,
      filePath
    );
    this.filesToSync.import = this.removeFileFromTree(
      this.filesToSync.import,
      filePath
    );
    this.renderContent();
  }
};

// src/managers/arPublishManager.ts
var import_obsidian6 = require("obsidian");
var ArPublishManager = class {
  constructor(app, plugin) {
    this.app = app;
    this.plugin = plugin;
  }
  async publishWebsiteToArweave(folder) {
    const markdownFiles = this.getMarkdownFiles(folder);
    const indexFile = markdownFiles.find((file) => file.name === "index.md");
    if (!indexFile) {
      new import_obsidian6.Notice("Error: index.md file is required in the root of the folder.");
      return;
    }
    const outputDir = await this.createOutputDirectory(folder.name);
    const pathManifest = {
      fallback: { id: "" },
      index: { path: "index.html" },
      manifest: "arweave/paths",
      paths: {},
      version: "0.2.0"
    };
    for (const file of markdownFiles) {
      const content = await this.app.vault.read(file);
      const htmlContent = await this.convertMarkdownToHtml(
        content,
        markdownFiles,
        file
      );
      const htmlFilePath = await this.saveHtmlFile(
        outputDir,
        file.path,
        htmlContent
      );
      const relativePath = this.getManifestRelativePath(folder.name, file.path);
      const txId = await this.uploadToArweave(htmlContent, "text/html");
      pathManifest.paths[relativePath] = { id: txId };
      if (file === indexFile) {
        pathManifest.index.path = relativePath;
      }
    }
    const notFoundContent = await this.createNotFoundPage(markdownFiles);
    const notFoundTxId = await this.uploadToArweave(
      notFoundContent,
      "text/html"
    );
    pathManifest.fallback.id = notFoundTxId;
    pathManifest.paths["404.html"] = { id: notFoundTxId };
    const manifestTxId = await this.uploadToArweave(
      JSON.stringify(pathManifest),
      "application/x.arweave-manifest+json"
    );
    const arweaveLink = `https://arweave.net/${manifestTxId}`;
    console.log("Manifest uploaded:", arweaveLink);
    navigator.clipboard.writeText(arweaveLink).then(() => {
      new import_obsidian6.Notice(`Website link copied to clipboard: ${arweaveLink}`);
    }).catch((err) => {
      console.error("Failed to copy to clipboard:", err);
      new import_obsidian6.Notice(`Website published to Arweave. Link: ${arweaveLink}`);
    });
  }
  getRelativePath(folderPath, filePath) {
    const relativePath = relative(folderPath, filePath);
    return relativePath.replace(/\.md$/, ".html");
  }
  async uploadToArweave(content, contentType) {
    const wallet = walletManager.getJWK();
    if (!wallet) {
      throw new Error("Wallet not connected");
    }
    const transaction = await this.plugin.getArweave().createTransaction({ data: content }, wallet);
    transaction.addTag("Content-Type", contentType);
    transaction.addTag("App-Name", "ArweaveSync");
    await this.plugin.getArweave().transactions.sign(transaction, wallet);
    const response = await this.plugin.getArweave().transactions.post(transaction);
    if (response.status !== 200) {
      throw new Error(
        `Upload failed with status ${response.status}: ${response.statusText}`
      );
    }
    return transaction.id;
  }
  getMarkdownFiles(folder) {
    const files = [];
    const collectFiles = (item) => {
      if (item instanceof import_obsidian6.TFolder) {
        item.children.forEach(collectFiles);
      } else if (item instanceof import_obsidian6.TFile && item.extension === "md") {
        files.push(item);
      }
    };
    collectFiles(folder);
    return files;
  }
  async createOutputDirectory(folderName) {
    const basePath = this.app.vault.configDir;
    const outputDir = join2(basePath, "arweave-publish", folderName);
    await this.app.vault.adapter.mkdir(outputDir);
    return outputDir;
  }
  async saveHtmlFile(outputDir, filePath, htmlContent) {
    const baseDir = this.getBaseDir(filePath);
    const relativePath = filePath.replace(new RegExp(`^${baseDir}`), ".");
    const htmlFileName = relativePath.replace(/\.md$/, ".html");
    const fullPath = join2(outputDir, htmlFileName.slice(1));
    await this.app.vault.adapter.mkdir(dirname(fullPath));
    await this.app.vault.adapter.write(fullPath, htmlContent);
    console.log(`Saved HTML file: ${fullPath}`);
    return fullPath;
  }
  async convertMarkdownToHtml(markdown, allFiles, currentFile) {
    markdown = this.convertWikiLinks(markdown, currentFile);
    const tempDiv = createDiv();
    await import_obsidian6.MarkdownRenderer.renderMarkdown(
      markdown,
      tempDiv,
      currentFile.path,
      this.plugin
    );
    let htmlContent = tempDiv.innerHTML;
    htmlContent = htmlContent.replace(/" dir="auto">/g, '">');
    htmlContent = htmlContent.replace(/data-heading="[^"]*"/g, "");
    htmlContent = htmlContent.replace(
      /\[([^\]]+)\]\(([^\)]+)\.html\)/g,
      '<a href="$2.html">$1</a>'
    );
    const baseDir = this.getBaseDir(currentFile.path);
    const isIndex = currentFile.name === "index.md";
    const pageTitle = isIndex ? "Home" : currentFile.basename;
    const fullHtml = `
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>${pageTitle}</title>
          <style>${this.getStyles()}</style>
      </head>
      <body>
      <div class="app-container">
              <aside class="sidebar">
                <div class="sidebar-header">
                  <div class="logo">
                      <!-- SVG element goes here -->
                  </div>
                  <h1 class="site-title">${baseDir}</h1>
                </div>
                <div class="sidebar-search">
                  <input type="text" placeholder="Search pages...">
                </div>
                <nav class="sidebar-nav">
                    ${this.createSidebar(allFiles, currentFile)}
                </nav>
              </aside>
              <main class="content">
                  <article class="markdown-content">
                      <h1 class="doc-title">${pageTitle}</h1>
                      ${htmlContent}
                  </article>
              </main>
              <aside class="page-toc">
                  <h3>ON THIS PAGE</h3>
                  ${this.generateTableOfContents(htmlContent)}
              </aside>
          </div>
          <script>${this.getJavaScript()}<\/script>
      </body>
      </html>
    `;
    return fullHtml;
  }
  generateTableOfContents(htmlContent) {
    const parser = new DOMParser();
    const doc = parser.parseFromString(htmlContent, "text/html");
    const headings = doc.querySelectorAll("h1, h2, h3");
    let toc = "<ul>";
    headings.forEach((heading) => {
      const level = parseInt(heading.tagName.charAt(1));
      const text = heading.textContent || "";
      const id = heading.id || this.slugify(text);
      toc += `<li class="toc-item toc-item-${level}"><a href="#${id}">${text}</a></li>`;
    });
    toc += "</ul>";
    return toc;
  }
  slugify(text) {
    return text.toLowerCase().replace(/[^a-z0-9]+/g, "-").replace(/(^-|-$)/g, "");
  }
  convertWikiLinks(markdown, currentFile) {
    return markdown.replace(
      /\[\[([^\]|]+)(\|[^\]]+)?\]\](\([^\)]+\))?/g,
      (match, linkText, displayText, linkUrl) => {
        const display = displayText ? displayText.slice(1) : linkText;
        const url = linkUrl ? linkUrl.slice(1, -1) : `${linkText}.html`;
        return `[${display}](${url})`;
      }
    );
  }
  getManifestRelativePath(folderName, filePath) {
    const parts = filePath.split("/");
    const folderIndex = parts.indexOf(folderName);
    if (folderIndex === -1) {
      throw new Error(
        `Folder name "${folderName}" not found in file path "${filePath}"`
      );
    }
    return parts.slice(folderIndex + 1).join("/").replace(/\.md$/, ".html");
  }
  getRelativePathToRoot(path2) {
    const depth = Math.max(0, path2.split("/").length - 2);
    return depth === 0 ? "./" : "../".repeat(depth);
  }
  getBaseDir(path2) {
    const parts = path2.split("/");
    return parts[0] || "";
  }
  getStyles() {
    return `
      :root {
        --background-primary: #ffffff;
        --background-secondary: #f5f6f8;
        --text-normal: #2e3338;
        --text-muted: #6e7781;
        --text-faint: #999999;
        --interactive-accent: #7f6df2;
        --interactive-accent-rgb: 127, 109, 242;
        --font-ui-small: 13px;
      }

      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;
        line-height: 1.6;
        color: var(--text-normal);
        background-color: var(--background-primary);
      }

      input {
        outline: none;
      }

      .app-container {
        display: flex;
        height: 100vh;
      }

      .sidebar {
        width: 300px;
        background-color: var(--background-secondary);
        padding: 20px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
      }

      .sidebar-header {
        margin-bottom: 20px;
      }

      .logo {
        margin-right: 10px;
      }

      .site-title {
        font-size: 1.2rem;
        font-weight: 600;
      }

      .sidebar-search {
        margin-bottom: 20px;
      }

      .sidebar-search input {
        width: 100%;
        padding: 8px;
        border: 1px solid var(--text-faint);
        border-radius: 4px;
        font-size: var(--font-ui-small);
      }

      .sidebar-nav {
        flex-grow: 1;
        margin-top: 2vh;
      }

      .sidebar-nav ul {
        list-style-type: none;
        padding-left: 0;
      }

      .sidebar-nav li {
        margin-bottom: 0;
      }

      .nav-file-title, .nav-folder-title {
        display: flex;
        align-items: center;
        width: 100%;
        padding: 2px 0;
        color: var(--text-muted);
        font-size: var(--font-ui-small);
        text-decoration: none;
      }

      .nav-file-title:hover, .nav-folder-title:hover {
        color: var(--text-normal);
      }

      .nav-file-title-content, .nav-folder-title-content {
        flex-grow: 1;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }

      .tree-item-self {
        padding-left: 4px;
      }

      .tree-item-icon {
        width: 16px;
        height: 16px;
        margin-right: 5px;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .tree-item-icon svg {
        width: 16px;
        height: 16px;
      }

      .nav-folder-children {
        padding-left: 20px;
      }

      .is-active > .nav-file-title {
        color: var(--text-normal);
        font-weight: bold;
      }

      .content {
        flex: 1;
        padding: 20px 40px;
        overflow-y: auto;
        scrollbar-width: none;
      }

      .markdown-content {
        max-width: 750px;
        margin: 0 auto;
      }

      .doc-title {
        font-size: 2rem;
        margin-bottom: 20px;
        color: var(--text-normal);
      }

      .page-toc {
        width: 200px;
        padding: 20px;
        border-left: 1px solid var(--background-secondary);
      }

      .page-toc h3 {
        font-size: 0.8rem;
        text-transform: uppercase;
        color: var(--text-muted);
        margin-bottom: 10px;
      }

      .page-toc ul {
        list-style-type: none;
      }

      .page-toc a {
        color: var(--text-muted);
        text-decoration: none;
        font-size: var(--font-ui-small);
      }

      .page-toc a:hover {
        color: var(--interactive-accent);
      }

      .tree-item-children {
        margin-left: 20px;
      }

      .tree-item-self {
        display: flex;
        align-items: center;
        cursor: pointer;
      }

      .nav-folder-children {
        display: block;
        padding-left: 20px;
      }

      .nav-folder.is-collapsed > .nav-folder-children {
        display: none;
      }

      .nav-folder > .nav-folder-title > .nav-folder-collapse-indicator {
        transition: transform 100ms ease-in-out;
      }

      .nav-folder.is-collapsed > .nav-folder-title > .nav-folder-collapse-indicator {
        transform: rotate(-90deg);
      }

      .tree-item-icon svg {
        width: 12px;
        height: 12px;
      }

      .collapse-icon {
        transition: transform 0.3s ease;
      }

      .collapse-icon.is-collapsed {
        transform: rotate(-90deg);
      }

      .markdown-content a {
        color: var(--interactive-accent);
        text-decoration: none;
      }

      .markdown-content a:hover {
        text-decoration: underline;
      }

      .markdown-content h1, .markdown-content h2, .markdown-content h3,
      .markdown-content h4, .markdown-content h5, .markdown-content h6 {
        margin-top: 1em;
        margin-bottom: 0.5em;
      }

      .markdown-content pre {
        background-color: var(--background-secondary);
        padding: 10px;
        border-radius: 4px;
        overflow-x: auto;
      }

      .markdown-content code {
        font-family: monospace;
        font-size: 0.9em;
      }

      .markdown-content blockquote {
        border-left: 3px solid var(--interactive-accent);
        margin: 1em 0;
        padding-left: 1em;
        color: var(--text-muted);
      }

      .tree-item {
        margin-bottom: 2px;
      }

      .tree-item-self {
        display: flex;
        align-items: center;
      }

      .nav-file-title, .nav-folder-title {
        display: flex;
        align-items: center;
        width: 100%;
      }

      .nav-file-title-content, .nav-folder-title-content {
        flex-grow: 1;
      }
    `;
  }
  getJavaScript() {
    return `
        document.addEventListener('DOMContentLoaded', (event) => {
          // Expand/collapse folders in sidebar
          const folderTitles = document.querySelectorAll('.nav-folder > .nav-folder-title');
          folderTitles.forEach(folderTitle => {
            folderTitle.addEventListener('click', (e) => {
              e.preventDefault();
              e.stopPropagation();
              const folder = folderTitle.closest('.nav-folder');
              folder.classList.toggle('is-collapsed');

              // Save folder state
              const folderPath = folder.querySelector('.nav-folder-title').getAttribute('data-path');
              localStorage.setItem('folderState_' + folderPath, folder.classList.contains('is-collapsed'));
            });
          });

          // Restore folder state
          document.querySelectorAll('.nav-folder').forEach(folder => {
            const folderPath = folder.querySelector('.nav-folder-title').getAttribute('data-path');
            const isCollapsed = localStorage.getItem('folderState_' + folderPath) === 'true';
            if (isCollapsed) {
              folder.classList.add('is-collapsed');
            } else {
              folder.classList.remove('is-collapsed');
            }
          });

          // Expand parent folders of the current page
          const currentFileLink = document.querySelector('.nav-file-title.is-active');
          if (currentFileLink) {
            let parent = currentFileLink.closest('.nav-folder');
            while (parent) {
              parent.classList.remove('is-collapsed');
              parent = parent.parentElement.closest('.nav-folder');
            }
          }

          // Highlight active page in sidebar
          const currentPath = window.location.pathname;
          const sidebarLinks = document.querySelectorAll('.nav-file-title');
          sidebarLinks.forEach(link => {
            if (link.getAttribute('href') === currentPath) {
              link.classList.add('is-active');
            }
          });

          // Search functionality
          const searchInput = document.querySelector('.sidebar-search input');
          const navItems = document.querySelectorAll('.nav-file-title, .nav-folder-title');

          searchInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();

            navItems.forEach(item => {
              const text = item.textContent.toLowerCase();
              const parent = item.closest('.tree-item');

              if (text.includes(searchTerm)) {
                parent.style.display = 'block';
                let folder = parent.closest('.nav-folder');
                while (folder) {
                  folder.classList.remove('is-collapsed');
                  folder = folder.parentElement.closest('.nav-folder');
                }
              } else {
                parent.style.display = 'none';
              }
            });
          });
        });
      `;
  }
  createSidebar(files, currentFile) {
    const tree = this.buildFileTree(files);
    const baseDir = Object.keys(tree)[0];
    const homeLink = this.createHomeLink(currentFile);
    const fileTree = this.renderFileTree(
      tree[baseDir],
      baseDir,
      currentFile
    );
    return homeLink + fileTree;
  }
  createHomeLink(currentFile) {
    const isActive = currentFile.name === "index.md" ? "is-active" : "";
    const homeHref = this.getCorrectRelativePath(currentFile.path, "index.md");
    return `
      <div class="tree-item nav-file">
        <div class="tree-item-self is-clickable ${isActive}" data-path="index.md">
          <a href="${homeHref}" class="nav-file-title">
            <div class="tree-item-icon">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-home">
                <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                <polyline points="9 22 9 12 15 12 15 22"></polyline>
              </svg>
            </div>
            <div class="nav-file-title-content">Home</div>
          </a>
        </div>
      </div>
    `;
  }
  buildFileTree(files) {
    const tree = {};
    files.forEach((file) => {
      const parts = file.path.split("/");
      let current = tree;
      parts.forEach((part, index) => {
        if (!current[part]) {
          current[part] = index === parts.length - 1 ? null : {};
        }
        if (current[part] !== null) {
          current = current[part];
        }
      });
    });
    return tree;
  }
  renderFileTree(tree, path2 = "", currentFile, level = 0) {
    let html = "";
    for (const [name, subtree] of Object.entries(tree)) {
      if (name === "index.md") continue;
      const fullPath = path2 ? `${path2}/${name}` : name;
      const isCurrentFile = fullPath === currentFile.path;
      const itemClass = isCurrentFile ? "is-active" : "";
      const displayName = name.replace(/\.md$/, "");
      if (subtree === null) {
        const href = this.getCorrectRelativePath(currentFile.path, fullPath);
        html += `
          <div class="tree-item nav-file">
            <div class="tree-item-self is-clickable ${itemClass}" data-path="${fullPath}">
              <a href="${href}" class="nav-file-title">
                <div class="nav-file-title-content">${displayName}</div>
              </a>
            </div>
          </div>
        `;
      } else {
        html += `
          <div class="tree-item nav-folder">
            <div class="tree-item-self is-clickable nav-folder-title" data-path="${fullPath}">
              <div class="tree-item-icon collapse-icon nav-folder-collapse-indicator">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon right-triangle">
                  <path d="M3 8L12 17L21 8"></path>
                </svg>
              </div>
              <div class="nav-folder-title-content">${displayName}</div>
            </div>
            <div class="tree-item-children nav-folder-children">
              ${this.renderFileTree(subtree, fullPath, currentFile, level + 1)}
            </div>
          </div>
        `;
      }
    }
    return html;
  }
  getCorrectRelativePath(currentPath, targetPath) {
    const currentParts = currentPath.split("/").slice(0, -1);
    const targetParts = targetPath.split("/");
    if (targetPath === "index.md") {
      const depth = Math.max(0, currentParts.length - 1);
      return depth === 0 ? "index.html" : "../".repeat(depth) + "index.html";
    }
    let commonPrefixLength = 0;
    while (commonPrefixLength < currentParts.length && commonPrefixLength < targetParts.length && currentParts[commonPrefixLength] === targetParts[commonPrefixLength]) {
      commonPrefixLength++;
    }
    const backSteps = currentParts.length - commonPrefixLength;
    const forwardSteps = targetParts.slice(commonPrefixLength);
    let relativePath = "../".repeat(backSteps) + forwardSteps.join("/");
    relativePath = relativePath.replace(/\.md$/, ".html");
    console.log("Current path:", currentPath);
    console.log("Target path:", targetPath);
    console.log("Relative path:", relativePath);
    return relativePath;
  }
  async createNotFoundPage(files) {
    const dummyFile = {
      path: "404.md",
      name: "404.md",
      basename: "404",
      extension: "md"
    };
    let sidebarContent = this.createSidebar(files, dummyFile);
    const notFoundContent = `
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Page Not Found</title>
          <style>${this.getStyles()}</style>
      </head>
      <body>
          <div class="app-container">
              <aside class="sidebar">
                  <div class="sidebar-header">
                      <div class="logo">
                          <!-- SVG element goes here -->
                      </div>
                      <h1 class="site-title">404 - Not Found</h1>
                  </div>
                  <div class="sidebar-search">
                      <input type="text" placeholder="Search pages...">
                  </div>
                  <nav class="sidebar-nav">
                      ${sidebarContent}
                  </nav>
              </aside>
              <main class="content">
                  <article class="markdown-content">
                      <h1 class="doc-title">Page Not Found</h1>
                      <p>The requested page could not be found. Please check the URL or use the sidebar to navigate to an existing page.</p>
                  </article>
              </main>
          </div>
          <script>${this.getJavaScript()}<\/script>
      </body>
      </html>
    `;
    return notFoundContent;
  }
  adjust404SidebarLinks(sidebarContent) {
    const parser = new DOMParser();
    const doc = parser.parseFromString(sidebarContent, "text/html");
    doc.querySelectorAll("a").forEach((link) => {
      let href = link.getAttribute("href");
      if (href) {
        href = this.getCorrectRelativePath(
          "404.md",
          href.replace(/\.html$/, ".md")
        );
        link.setAttribute("href", href);
      }
    });
    return doc.body.innerHTML;
  }
};

// src/main.ts
var import_buffer4 = __toESM(require_buffer2());
var import_process = __toESM(require_browser2());
var ArweaveSync = class extends import_obsidian7.Plugin {
  constructor() {
    super(...arguments);
    this.walletAddress = null;
    this.modifiedFiles = /* @__PURE__ */ new Set();
    this.activeSyncSidebar = null;
    this.isConnecting = false;
  }
  async onload() {
    await this.loadSettings();
    this.initializeManagers();
    this.setupEventListeners();
    this.setupUI();
    this.addCommands();
    this.registerView(SYNC_SIDEBAR_VIEW, (leaf) => new SyncSidebar(leaf, this));
    this.addRibbonIcon("wallet", "Arweave Sync", () => {
      if (this.walletAddress) {
        this.activateSyncSidebar();
      } else {
        this.showWalletConnectModal();
      }
    });
    this.updateSyncUI();
  }
  initializeManagers() {
    initializeWalletManager();
    this.arPublishManager = new ArPublishManager(this.app, this);
    this.aoManager = new AOManager(this);
    this.arweave = import_arweave3.default.init({
      host: "arweave.net",
      port: 443,
      protocol: "https"
    });
    this.vaultSyncManager = new VaultSyncManager(
      this,
      this.settings.encryptionPassword,
      this.settings.remoteUploadConfig,
      this.settings.localUploadConfig
    );
  }
  setupEventListeners() {
    if (walletManager.isWalletLoaded()) {
      const cachedWalletJson = walletManager.getWalletJson();
      if (cachedWalletJson) {
        this.handleWalletConnection(cachedWalletJson);
      }
    }
    walletManager.on(
      "wallet-connected",
      this.handleWalletConnection.bind(this)
    );
    walletManager.on(
      "wallet-disconnected",
      this.handleWalletDisconnection.bind(this)
    );
    this.registerFileEvents();
  }
  registerFileEvents() {
    this.registerEvent(
      this.app.vault.on("modify", this.handleFileModify.bind(this))
    );
    this.registerEvent(
      this.app.vault.on("rename", this.handleFileRename.bind(this))
    );
    this.registerEvent(
      this.app.vault.on("delete", this.handleFileDelete.bind(this))
    );
  }
  setupUI() {
    this.createStatusBarItem();
    this.setupSyncButton();
    this.addSettingTab(new ArweaveSyncSettingTab(this.app, this));
  }
  setupSyncButton() {
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (file instanceof import_obsidian7.TFile) {
          menu.addItem((item) => {
            item.setTitle("Sync with Arweave").setIcon("sync").onClick(() => this.syncFile(file));
          });
          menu.addItem((item) => {
            item.setTitle("Force Pull from Arweave").setIcon("download-cloud").onClick(() => this.forcePullCurrentFile(file));
          });
        }
        if (file instanceof import_obsidian7.TFolder) {
          menu.addItem((item) => {
            item.setTitle("Publish as Website to Arweave").setIcon("globe").onClick(() => this.publishToArweave(file));
          });
        }
      })
    );
    const debouncedAddSyncButtonToLeaf = debounce(
      this.addSyncButtonToLeaf.bind(this),
      100
    );
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", debouncedAddSyncButtonToLeaf)
    );
  }
  addCommands() {
    this.addCommand({
      id: "open-arweave-sync-sidebar",
      name: "Open Arweave Sync Sidebar",
      callback: () => this.activateSyncSidebar()
    });
    this.addCommand({
      id: "force-pull-current-file",
      name: "Force Pull Current File from Arweave",
      checkCallback: (checking) => {
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile) {
          if (!checking) {
            this.forcePullCurrentFile(activeFile);
          }
          return true;
        }
        return false;
      }
    });
    this.addCommand({
      id: "open-wallet-connect-modal",
      name: "Connect Arweave Wallet",
      callback: () => this.showWalletConnectModal()
    });
    this.addCommand({
      id: "force-refresh-sidebar-files",
      name: "Force Refresh Sidebar Files",
      callback: () => {
        this.refreshSyncSidebar();
        new import_obsidian7.Notice("Sidebar files refreshed");
      }
    });
  }
  getArweave() {
    return this.arweave;
  }
  getWalletAddress() {
    return this.walletAddress;
  }
  showWalletConnectModal() {
    new WalletConnectModal(this.app, this).open();
  }
  createStatusBarItem() {
    this.statusBarItem = this.addStatusBarItem();
    this.statusBarItem.addClass("arweave-wallet-status");
    this.updateStatusBar();
  }
  updateStatusBar() {
    this.statusBarItem.empty();
    this.walletAddress ? this.createConnectedWalletStatus() : this.statusBarItem.setText("Arweave Wallet: Not Connected");
  }
  createConnectedWalletStatus() {
    const slicedAddress = `${this.walletAddress.slice(0, 6)}...${this.walletAddress.slice(-4)}`;
    this.statusBarItem.appendChild(this.createAddressElement(slicedAddress));
    this.statusBarItem.appendChild(this.createDisconnectButton());
  }
  createAddressElement(slicedAddress) {
    const addressEl = document.createElement("span");
    addressEl.textContent = slicedAddress;
    addressEl.addClass("arweave-wallet-address");
    addressEl.setAttribute("title", "Click to copy full address");
    addressEl.addEventListener("click", this.copyWalletAddress.bind(this));
    return addressEl;
  }
  createDisconnectButton() {
    const disconnectButton = document.createElement("span");
    disconnectButton.addClass("arweave-wallet-disconnect");
    disconnectButton.setAttribute("title", "Disconnect wallet");
    disconnectButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2,5.27L3.28,4L20,20.72L18.73,22L13.9,17.17L11.29,19.78C9.34,21.73 6.17,21.73 4.22,19.78C2.27,17.83 2.27,14.66 4.22,12.71L5.71,11.22C5.7,12.04 5.83,12.86 6.11,13.65L5.64,14.12C4.46,15.29 4.46,17.19 5.64,18.36C6.81,19.54 8.71,19.54 9.88,18.36L12.5,15.76L10.88,14.15C10.87,14.39 10.77,14.64 10.59,14.83C10.2,15.22 9.56,15.22 9.17,14.83C8.12,13.77 7.63,12.37 7.72,11L2,5.27M12.71,4.22C14.66,2.27 17.83,2.27 19.78,4.22C21.73,6.17 21.73,9.34 19.78,11.29L18.29,12.78C18.3,11.96 18.17,11.14 17.89,10.36L18.36,9.88C19.54,8.71 19.54,6.81 18.36,5.64C17.19,4.46 15.29,4.46 14.12,5.64L10.79,8.97L9.38,7.55L12.71,4.22M13.41,9.17C13.8,8.78 14.44,8.78 14.83,9.17C16.2,10.54 16.61,12.5 16.06,14.23L14.28,12.46C14.23,11.78 13.94,11.11 13.41,10.59C13,10.2 13,9.56 13.41,9.17Z" /></svg>`;
    disconnectButton.addEventListener(
      "click",
      this.disconnectWallet.bind(this)
    );
    return disconnectButton;
  }
  async copyWalletAddress() {
    if (this.walletAddress) {
      await navigator.clipboard.writeText(this.walletAddress);
      new import_obsidian7.Notice("Wallet address copied to clipboard");
    }
  }
  async disconnectWallet() {
    await walletManager.disconnect();
    this.updateStatusBar();
    new import_obsidian7.Notice("Wallet disconnected");
  }
  async addSyncButtonToLeaf(leaf) {
    if (leaf.view instanceof import_obsidian7.MarkdownView) {
      await this.addSyncButton(leaf.view);
    }
  }
  async addSyncButton(view) {
    const headerEl = view.containerEl.querySelector(".view-header");
    if (!headerEl) return;
    this.removePreviousSyncButton(headerEl);
    const syncButton = this.createSyncButton();
    const file = view.file;
    if (file) {
      await this.updateSyncButtonState(syncButton, file);
      this.addSyncButtonClickListener(syncButton, file);
    }
    this.addSyncButtonToHeader(headerEl, syncButton);
  }
  removePreviousSyncButton(headerEl) {
    var _a7;
    (_a7 = headerEl.querySelector(".arweave-sync-button")) == null ? void 0 : _a7.remove();
  }
  createSyncButton() {
    const syncButton = document.createElement("button");
    syncButton.addClass("clickable-icon", "view-action", "arweave-sync-button");
    syncButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="svg-icon lucide-more-vertical sync-button" width="24" height="24" viewBox="0 0 24 24"><path d="M12,18A6,6 0 0,1 6,12C6,11 6.25,10.03 6.7,9.2L5.24,7.74C4.46,8.97 4,10.43 4,12A8,8 0 0,0 12,20V23L16,19L12,15M12,4V1L8,5L12,9V6A6,6 0 0,1 18,12C18,13 17.75,13.97 17.3,14.8L18.76,16.26C19.54,15.03 20,13.57 20,12A8,8 0 0,0 12,4Z" /></svg>`;
    return syncButton;
  }
  async updateSyncButtonState(syncButton, file) {
    const { syncState } = await this.vaultSyncManager.checkFileSync(file);
    const stateConfig = {
      "new-local": {
        color: "var(--text-error)",
        title: "New local file, click to sync"
      },
      "new-remote": {
        color: "var(--text-error)",
        title: "New remote file, click to sync"
      },
      "local-newer": {
        color: "var(--text-warning)",
        title: "Local version is newer, click to sync"
      },
      "remote-newer": {
        color: "var(--text-warning)",
        title: "Remote version is newer, click to sync"
      },
      synced: {
        color: "var(--text-success)",
        title: "File is up to date with Arweave",
        disabled: true
      }
    };
    const config = stateConfig[syncState] || {
      color: "var(--text-muted)",
      title: "Unknown sync state",
      disabled: true
    };
    this.setSyncButtonState(
      syncButton,
      syncState,
      config.color,
      config.title,
      config.disabled
    );
  }
  setSyncButtonState(button, className, color, title, disabled = false) {
    button.removeClass("new-file", "updated-file", "synced");
    button.addClass(className);
    const svgPath = button.querySelector("path");
    if (svgPath) {
      svgPath.setAttribute("fill", color);
    }
    button.setAttrs({
      "aria-label": title,
      "aria-disabled": disabled ? "true" : "false"
    });
    if (disabled) {
      button.setAttribute("disabled", "true");
    } else {
      button.removeAttribute("disabled");
    }
  }
  addSyncButtonClickListener(syncButton, file) {
    syncButton.addEventListener("click", async (e) => {
      e.stopPropagation();
      if (!syncButton.hasAttribute("disabled")) {
        syncButton.addClass("uploading");
        await this.syncFile(file);
        await this.vaultSyncManager.updateRemoteConfig();
        syncButton.removeClass("uploading");
      }
    });
  }
  addSyncButtonToHeader(headerEl, syncButton) {
    let rightIconsContainer = headerEl.querySelector(".view-actions") || headerEl.createEl("div", { cls: "view-header-right-icons" });
    const viewActions = headerEl.querySelector(".view-actions");
    if (viewActions) {
      headerEl.insertBefore(viewActions, rightIconsContainer);
    }
    rightIconsContainer.appendChild(syncButton);
  }
  updateSyncUI() {
    this.updateStatusBar();
    this.updateActiveSyncButton();
    this.refreshSyncSidebar();
  }
  async handleWalletConnection(walletJson) {
    if (this.isConnecting) {
      return;
    }
    this.isConnecting = true;
    try {
      await walletManager.connect(new File([walletJson], "wallet.json"));
      this.walletAddress = walletManager.getAddress();
      await this.aoManager.initialize(walletManager.getJWK());
      this.updateStatusBar();
      this.vaultSyncManager.updateRemoteConfig();
      const newOrModifiedFiles = await this.checkForNewFiles();
      if (this.settings.autoImportUnsyncedChanges && newOrModifiedFiles.length > 0) {
        await this.importFilesFromArweave(newOrModifiedFiles);
        new import_obsidian7.Notice(
          `Automatically imported ${newOrModifiedFiles.length} new or modified files.`
        );
      } else if (newOrModifiedFiles.length > 0) {
        new import_obsidian7.Notice(
          `${newOrModifiedFiles.length} new or modified files available for import.`
        );
        this.refreshSyncSidebar();
        await this.openSyncSidebarWithImportTab();
      } else {
        new import_obsidian7.Notice("Wallet connected. No new files to import.");
      }
    } catch (error) {
      console.error("Error during wallet connection:", error);
      new import_obsidian7.Notice(
        `Error: ${error.message}
Check the console for more details.`
      );
    } finally {
      this.isConnecting = false;
    }
  }
  async handleWalletDisconnection() {
    this.walletAddress = null;
    await this.aoManager.initialize(null);
    this.updateStatusBar();
    new import_obsidian7.Notice("Wallet disconnected successfully");
  }
  async checkForNewFiles() {
    const newOrModifiedFiles = [];
    for (const [filePath, remoteFileInfo] of Object.entries(
      this.settings.remoteUploadConfig
    )) {
      const localFile = this.app.vault.getAbstractFileByPath(filePath);
      if (!localFile) {
        newOrModifiedFiles.push(filePath);
      } else if (localFile instanceof import_obsidian7.TFile) {
        const localFileHash = await this.vaultSyncManager.getFileHash(localFile);
        const localFileTimestamp = localFile.stat.mtime;
        if (remoteFileInfo.fileHash !== localFileHash && remoteFileInfo.timestamp > localFileTimestamp) {
          newOrModifiedFiles.push(filePath);
        }
      }
    }
    if (newOrModifiedFiles.length > 0) {
      new import_obsidian7.Notice(
        `Wallet connected. ${newOrModifiedFiles.length} new or modified files available for import.`
      );
      this.refreshSyncSidebar();
      if (!this.settings.autoImportUnsyncedChanges)
        await this.openSyncSidebarWithImportTab();
    }
    return newOrModifiedFiles;
  }
  async initializeLocalUploadConfig(plugin) {
    const localUploadConfig = {};
    const files = plugin.app.vault.getFiles();
    for (const file of files) {
      const filePath = file.path;
      const fileHash = await plugin.vaultSyncManager.getFileHash(file);
      const existingConfig = plugin.settings.localUploadConfig[filePath];
      localUploadConfig[filePath] = {
        txId: (existingConfig == null ? void 0 : existingConfig.txId) || "",
        timestamp: file.stat.mtime,
        fileHash,
        encrypted: true,
        filePath,
        oldFilePath: (existingConfig == null ? void 0 : existingConfig.oldFilePath) || null,
        previousVersionTxId: (existingConfig == null ? void 0 : existingConfig.previousVersionTxId) || null,
        versionNumber: (existingConfig == null ? void 0 : existingConfig.versionNumber) || 1
      };
    }
    return localUploadConfig;
  }
  updateLocalConfig(filePath, fileInfo) {
    this.settings.localUploadConfig[filePath] = fileInfo;
    this.saveSettings();
  }
  async importFilesFromArweave(selectedFiles) {
    try {
      await this.vaultSyncManager.importFilesFromArweave(selectedFiles);
    } catch (error) {
      console.error("Error during file import:", error);
      new import_obsidian7.Notice(
        `Error: ${error.message}
Check the console for more details.`
      );
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.settings.localUploadConfig = this.settings.localUploadConfig || {};
  }
  async saveSettings() {
    await this.saveData(this.settings);
    console.log("Settings saved");
  }
  async syncFile(file) {
    const syncButton = this.getSyncButtonForFile();
    if (syncButton) {
      syncButton.addClass("uploading");
    }
    try {
      await this.vaultSyncManager.syncFile(file);
    } catch (error) {
      this.handleSyncError(file, error);
    } finally {
      if (syncButton) {
        syncButton.removeClass("uploading");
      }
    }
    this.updateSyncUI();
  }
  getSyncButtonForFile() {
    const view = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView);
    return view == null ? void 0 : view.containerEl.querySelector(
      ".arweave-sync-button"
    );
  }
  handleSyncError(file, error) {
    new import_obsidian7.Notice(`Failed to sync file: ${error.message}`);
  }
  async handleFileModify(file) {
    const { syncState, fileHash } = await this.vaultSyncManager.checkFileSync(file);
    if (syncState !== "synced") {
      const currentConfig = this.settings.localUploadConfig[file.path];
      this.settings.localUploadConfig[file.path] = {
        encrypted: true,
        timestamp: Date.now(),
        txId: (currentConfig == null ? void 0 : currentConfig.txId) || "",
        filePath: file.path,
        fileHash,
        oldFilePath: (currentConfig == null ? void 0 : currentConfig.oldFilePath) || null,
        previousVersionTxId: (currentConfig == null ? void 0 : currentConfig.txId) || null,
        versionNumber: ((currentConfig == null ? void 0 : currentConfig.versionNumber) || 0) + 1
      };
      await this.saveSettings();
    }
    this.updateSyncUI();
  }
  async handleFileRename(file, oldPath) {
    if (this.settings.localUploadConfig[oldPath]) {
      this.settings.localUploadConfig[file.path] = {
        ...this.settings.localUploadConfig[oldPath],
        filePath: file.path
      };
      delete this.settings.localUploadConfig[oldPath];
    }
    console.log(`File renamed from ${oldPath} to ${file.path}`);
    await this.saveSettings();
    const remoteConfig = await this.aoManager.getUploadConfig();
    if (remoteConfig && remoteConfig[oldPath]) {
      remoteConfig[file.path] = {
        ...remoteConfig[oldPath],
        filePath: file.path,
        oldFilePath: oldPath
      };
      delete remoteConfig[oldPath];
      try {
        await this.aoManager.updateUploadConfig(remoteConfig);
      } catch (error) {
        console.error("Error updating remote config after file rename:", error);
        new import_obsidian7.Notice(
          `Failed to update remote config after rename ${file.path}. Please try again later.`
        );
      }
    }
    this.updateSyncUI();
  }
  async handleFileDelete(file) {
    delete this.settings.localUploadConfig[file.path];
    console.log("File deleted:", file.path);
    await this.saveSettings();
    const remoteConfig = await this.aoManager.getUploadConfig();
    if (remoteConfig && remoteConfig[file.path]) {
      delete remoteConfig[file.path];
      try {
        await this.aoManager.updateUploadConfig(remoteConfig);
      } catch (error) {
        console.error(
          "Error updating remote config after file deletion:",
          error
        );
        new import_obsidian7.Notice(
          `Failed to update remote config after deleting ${file.path}. Please try again later.`
        );
      }
    }
    this.removeSyncSidebarFile(file.path);
    this.updateSyncUI();
  }
  // private async handleEditorChange(
  //   editor: Editor,
  //   info: MarkdownView | MarkdownFileInfo,
  // ) {
  //   if (info instanceof MarkdownView) {
  //     const file = info.file;
  //     if (file) {
  //       const { syncState } = await this.vaultSyncManager.checkFileSync(file);
  //       if (syncState === "remote-newer") {
  //         const modal = new RemoteNewerVersionModal(this.app, file, this);
  //         modal.open();
  //         const choice = await modal.awaitChoice();
  //         if (choice === "import") {
  //           await this.vaultSyncManager.importFileFromArweave(file.path);
  //           new Notice(`Imported newer version of ${file.name} from Arweave`);
  //           // Refresh the editor content
  //           const newContent = await this.app.vault.read(file);
  //           editor.setValue(newContent);
  //         } else {
  //           new Notice(
  //             `Proceeding with local edit of ${file.name}. Remote changes will be overwritten on next sync.`,
  //           );
  //         }
  //       }
  //     }
  //   }
  // }
  removeSyncSidebarFile(filePath) {
    this.updateView((view) => {
      view.removeFile(filePath);
    });
  }
  updateActiveSyncButton() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView);
    if (activeView && activeView.file) {
      const syncButton = activeView.containerEl.querySelector(
        ".arweave-sync-button"
      );
      if (syncButton) {
        this.updateSyncButtonState(syncButton, activeView.file);
      }
    }
  }
  async getFileHash(file) {
    const content = await this.app.vault.read(file);
    const buffer = import_arweave3.default.utils.stringToBuffer(content);
    return import_arweave3.default.utils.bufferTob64Url(await import_arweave3.default.crypto.hash(buffer));
  }
  async fetchPreviousVersion(filePath, n) {
    const result2 = await this.vaultSyncManager.fetchPreviousVersion(
      filePath,
      n
    );
    if (result2) {
      return {
        ...result2,
        timestamp: result2.timestamp || Date.now() / 1e3
      };
    }
    return null;
  }
  async isFileNeedingSync(file) {
    const { syncState } = await this.vaultSyncManager.checkFileSync(file);
    return syncState !== "synced";
  }
  async forcePullCurrentFile(file) {
    try {
      await this.vaultSyncManager.forcePullFile(file);
      new import_obsidian7.Notice(
        `Successfully pulled the latest version of ${file.name} from Arweave`
      );
      this.updateSyncUI();
    } catch (error) {
      console.error("Error force pulling file:", error);
      new import_obsidian7.Notice(`Failed to pull ${file.name} from Arweave: ${error.message}`);
    }
  }
  async activateSyncSidebar() {
    const { workspace } = this.app;
    let leaf = workspace.getLeavesOfType(SYNC_SIDEBAR_VIEW)[0];
    if (!leaf) {
      leaf = workspace.getLeftLeaf(false);
      await leaf.setViewState({ type: SYNC_SIDEBAR_VIEW, active: true });
    }
    await workspace.revealLeaf(leaf);
    if (leaf.view instanceof SyncSidebar) {
      this.activeSyncSidebar = leaf.view;
    }
  }
  async openSyncSidebarWithImportTab() {
    await this.activateSyncSidebar();
    if (this.activeSyncSidebar) {
      this.activeSyncSidebar.switchTab("import");
    }
  }
  updateSyncSidebarFile(file, oldPath) {
    this.updateView((view) => {
      if (oldPath) {
        view.handleFileRename(file, oldPath);
      } else {
        view.updateFileStatus(file);
      }
      if (view.isVisible()) {
        view.refresh();
      }
    });
  }
  async refreshSyncSidebar() {
    const leaves = this.app.workspace.getLeavesOfType(SYNC_SIDEBAR_VIEW);
    for (const leaf of leaves) {
      if (leaf.view instanceof SyncSidebar) {
        const view = leaf.view;
        const isActiveView = this.app.workspace.getActiveViewOfType(SyncSidebar) === view;
        if (!isActiveView) {
          setTimeout(() => view.refresh(), 0);
        } else {
          view.refresh();
        }
      }
    }
  }
  updateView(updater) {
    const leaf = this.app.workspace.getLeavesOfType(SYNC_SIDEBAR_VIEW)[0];
    if (leaf && leaf.view instanceof SyncSidebar) {
      updater(leaf.view);
    }
  }
  async reinitializeAOManager() {
    if (this.aoManager) {
      await this.aoManager.initialize(walletManager.getJWK());
    }
  }
  async publishToArweave(folder) {
    try {
      await this.arPublishManager.publishWebsiteToArweave(folder);
      new import_obsidian7.Notice(`Folder "${folder.name}" published to Arweave as a website.`);
    } catch (error) {
      console.error(
        `Error publishing folder ${folder.name} to Arweave:`,
        error
      );
      new import_obsidian7.Notice(
        `Failed to publish ${folder.name} to Arweave. Error: ${error.message}`
      );
    }
  }
  async getSyncSidebarView() {
    const leaf = this.app.workspace.getLeavesOfType(SYNC_SIDEBAR_VIEW)[0];
    if (leaf) {
      await this.app.workspace.revealLeaf(leaf);
      if (leaf.view instanceof SyncSidebar) {
        return leaf.view;
      }
    }
    return null;
  }
  onunload() {
    console.log("Unloading ArweaveSync plugin");
  }
};
/*! Bundled license information:

crypto-js/ripemd160.js:
  (** @preserve
  	(c) 2012 by Cédric Mesnil. All rights reserved.
  
  	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
  
  	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
  	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
  
  	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  	*)

crypto-js/mode-ctr-gladman.js:
  (** @preserve
   * Counter block mode compatible with  Dr Brian Gladman fileenc.c
   * derived from CryptoJS.mode.CTR
   * Jan Hruby jhruby.web@gmail.com
   *)

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

@permaweb/aoconnect/dist/browser.js:
  (*! Bundled license information:
  
  ieee754/index.js:
    (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)
  
  buffer/index.js:
    (*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     *)
  
  warp-arbundles/build/web/esm/bundle.js:
    (*! Bundled license information:
    
    ieee754/index.js:
      (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)
    
    buffer/index.js:
      (*!
       * The buffer module from node.js, for the browser.
       *
       * @author   Feross Aboukhadijeh <https://feross.org>
       * @license  MIT
       *)
    *)
  *)

warp-arbundles/build/web/esm/bundle.js:
  (*! Bundled license information:
  
  ieee754/index.js:
    (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)
  
  buffer/index.js:
    (*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     *)
  *)
*/
//# sourceMappingURL=data:application/json;base64,
